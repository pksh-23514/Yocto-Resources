Enabling System Services using Recipes:
=======================================
1. A Service is a process that usually starts on Boot and runs in the background.
2. If a system Service is required to be installed on the Target, the Recipes must include the required definitions for the Service.
3. It must be ensured that the Service 'init' script or the 'systemd' Service file is installed.
4. If the Recipe file doesn't automatically installs these files, it must be manually installed in the Recipe file using:
	1) The 'do_install:append' function if the Recipe file doesn't have the 'do_install' function.
	2) The end of the 'do_install' function if the Recipe file have it. In such cases, there is no need to create a new 'do_install:append' function.
5. While adding the installation for the Services manually, it must be ensured that the installation arranges the Output files mirroring the directory structure on the Target.
6. The OpenEmbedded Build system provides support for starting the Services in two different ways:
	1) SysVinit
	2) systemd

SysVinit:
*********
1. The SysVinit is a Service management system in older Linux versions. It is an abbreviated word for System V Initialization.
2. It is one of the earliest and the simplest 'init' system.
	1) An 'init' system is the first program started by the Linux Kernel after the Boot.
	2) The 'init' system then controls the starting, running and stopping of all the other programs in the system.
3. It is based on Shell scripts and these scripts are organized into Run levels.
	1) The system operates in different Run levels like single-User mode, multi-User mode etc. Each level represents a different system state.
	2) The 'init' scripts are the Services managed by the Shell scripts located in the '/etc/init.d/' directory that controls starting or stopping the Services.
4. The SysVinit uses the Run levels to determine the order of starting or stopping the Services. For each Run level, there is a directory managed through Symlinks.
	---> /etc/rcX.d/
	---> Here, the 'X' is the Run level.
5. Inside each directory, there are Symlinks to the actual Service scripts located in the '/etc/init.d/' directory. Each link name starts with:
	1) S##name for start
	2) K##name for kill or stop
6. The '##' in the link name determines the order of execution of the Services:
	1) The lower number runs earlier.
	2) The higher number runs later.
7. To enable a SysVinit Service, the Recipe file must inherit the 'update-rc.d' Class. It facilitates the safe installation of the Packages on the Target.
8. The following 'INITSCRIPT_PACKAGES', 'INITSCRIPT_NAME' and 'INITSCRIPT_PARAMS' variables must be set in the Recipes.

systemd:
********
1. The systemd is a Service management system in the modern Linux versions. It is an abbreviated word for System Management Daemon.
2. It is a modern 'init' system designed to replace the older SysVinit.
	1) It is the default 'init' system in most of the major Linux Distributions.
	2) It provides an enhanced management of the Services.
	3) It is the first process (PID=1) which gets started by the Linux Kernel after the Boot.
3. It is responsible for the following:
	1) The starting and managing of the Services.
	2) The tracking of the Service dependencies.
	3) The logging of the system Events.
	4) The mounting of the Filesystems.
	5) The management of Timers, Sockets, Devices etc.
4. It organizes the system resources and Services into 'units' which are managed through the Unit files.
	1) The types of Unit files include '.service', '.socket', '.timer', '.mount', '.path', '.swap', '.snapshot', '.device' etc.
	2) It is a plain text Configuration file that describes how the systemd should manage the resources.
	3) The basic structure of a Unit file is:
		=> [Section]
		=> Directive1=value
		=> Directive2=value

		=> [Section]
		=> Directive1=value
		=> Directive2=value
		...
	4) These files are located in the '/etc/systemd/system/' or '/lib/systemd/system/' directories.
5. The Services are defined using '.service' Unit files used to describe the start, stop, reload and manage background Daemons or Applications.
	1) They are the replacement for the SysVinit 'init' scripts.
6. The Targets are special Unit files that group together other 'units' to define a system state.
	1) The examples are 'graphical.target', 'multi-user.target', 'network-online.target', 'poweroff.target' etc.
	2) They are the replacement for the SysVinit Run levels.
7. The Unit files can define the dependencies as requirement and order.
	1) The requirement dependencies can be provided using the 'Wants=' and 'Require=' directives.
	2) The order dependencies can be provided using the 'After=' and 'Before=' directives.
	3) These directives are used to start Services in the correct order and only when needed.
8. It can start multiple Services at once unlike the sequential execution of scripts by the SysVinit.
	1) It improves the Boot speed and more efficient resource utilization.
	2) The dependencies ensure that the parallel execution can be done safely.
9. It uses it's own integrated logging system called 'journald'.
	1) The logs are stored in a structured binary format.
	2) The log files contain Events and Messages generated by the Kernel, Applications and Users that log into the system.
	3) The 'journalctl' command can be used to access the logs.
10. The systemd can be selected as the default 'init' manager in the Image or Distribution Configuration.
	1) In the 'conf/local.conf' file, the below statements can be added:
		=> DISTRO_FEATURES:append = " systemd"
		=> DISTRO_FEATURES_BACKFILL_CONSIDERED += "sysvinit"
		=> VIRTUAL-RUNTIME_init_manager = "systemd"
		=> VIRTUAL-RUNTIME_initscripts = "systemd-compat-units"
11. To enable a systemd Service, the Recipe file must inherit the 'systemd' Class. It facilitates the correct handling of the Unit files.
12. The following 'SYSTEMD_SERVICE' and 'SYSTEMD_AUTO_ENABLE' variables must be set in the Recipes.
