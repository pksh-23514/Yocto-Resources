Fetching the Source Code using Recipes:
=======================================
1. The first thing that the Recipes must provides is the way to fetch the source files.
2. It is controlled by the 'SRC_URI' variable that points to the location of the source files.
3. The BitBake performs the 'do_fetch' Task to fetch the source files.
4. The 'do_fetch' Task uses the prefix of each entry of the 'SRC_URI' variable to determine the 'fetcher' to be used to get the source files.
5. The OpenEmbedded Build system uses the 'FILESOVERRIDES' variable for scanning the directory locations for local files in the 'SRC_URI' variable.
6. The 'SRC_URI' variable in the Recipe file must define each unique location for the corresponding source files.
7. It is a good practice to not hard-code the version numbers in a URL used in the 'SRC_URI' variable.
	1) The better way is to use the 'PV' variable in the 'SRC_URI' variable.
	2) The 'PV' variable causes the fetch Task to use the version number specified in the Recipe file name.
	3) Therefore, upgrading the Recipes to the future version would be as simple as renaming the Recipe file name to match the version.
	---> In the 'meta/recipes-devtools/strace/strace_5.5.bb' file, the source points to a single Tarball using the 'PV' variable.
	=> SRC_URI = "https://strace.io/files/${PV}/strace-${PV}.tar.xz"
8. The source can be specified from the Source Control Managers (SCMs) as well. For the Git repository, the following should be specified:
	1) The 'SRCREV' variable for the source file.
	2) The 'PV' variable for the source file must include a '+' sign in the definition.
	---> In the 'meta/recipes-sato/l3afpad/l3afpad_git.bb', the source is pointed to by the following definitions:
	=> PV = "0.8.18.1.11+git"
	=> SRC_URI = "git://github.com/stevenhoneyman/l3afpad.git;branch=master;protocol=https"
	=> SRCREV = "3cdccdc9505643e50f8208171d9eee5de11a42ff"
9. If the 'SRC_URI' variable includes a URL pointing to individual files from a remote Server other than a SCM, the 'SRC_URI[checksum]' must be specified.
	1) The BitBake verifies the files against the defined checksums in the Recipe file to ensure that the files have not been tampered or modified.
	2) The 'SRC_URI[sha256sum]' is the most commonly used checksum.
10. There are multiple checksums supported with the 'SRC_URI' variable:
	1) SRC_URI[md5sum]
	2) SRC_URI[sha1sum]
	3) SRC_URI[sha256sum]
	4) SRC_URI[sha384sum]
	5) SRC_URI[sha512sum]
11. If the 'SRC_URI' variable points to more than a single URL (excluding the SCMs), the checksum should be provided for each of the URLs.
	---> In the 'meta/recipes-devtools/git/', the combined lines for the 'git.inc' and the 'git_2.24.1.bb' files are defined as:
	=> SRC_URI = "${KERNELORG_MIRROR}/software/scm/git/git-${PV}.tar.gz;name=tarball \
		      ${KERNELORG_MIRROR}/software/scm/git/git-manpages-${PV}.tar.gz;name=manpages"

	=> SRC_URI[tarball.sha256sum] = "ad5334956301c86841eb1e5b1bb20884a6bad89a10a6762c958220c7cf64da02"
	=> SRC_URI[manpages.sha256sum] = "9a7ae3a093bea39770eb96ca3e5b40bff7af0b9f6123f089d7821d0e5b8e1230"
12. The proper value for the 'sha256sum' checksum might be available together with the other checksums on the download page for the Upstream sources.
	1) The Upstream Projects often provides multiple checksums to verify the integrity of the source code.
	2) However, these checksums shall be manually verified before specifying them in the Recipe file.
	3) To generate the 'sha256sum' checksum for a file, the following command can be used:
		=> sha256sum file-name.extension
13. If no 'SRC_URI[checksum]' is specified or the checksums are incorrect for the Recipes being Built, the Build system produces error for each of the checksums.
14. The good part is the error Message produced by the Build system contains the checksum String corresponding to the fetched sources.
	1) The correct checksums can then be taken from the error Message and defined in the Recipe file for the Build process to continue.
15. If the 'SRC_URI' variable contains the files present locally on the Host Machine, the 'file://' URL is used for the Build system to fetch the files.
	1) If the Absolute paths for the local files is provided, the entire directory is unpacked.
	2) Instead, if the Relative paths are provided, the value of the 'FILESPATH' variable is used to search the directories in a certain order.
	3) The order is: the ${BP} variable ---> the ${BPN} variable ---> the 'files/' directory.
	4) These directories are assumed to be the sub-directories of the directory containing the Recipe file or the Append file.
	---> The local files can be specified in the 'SRC_URI' variable as follows:
		=> SRC_URI = "file://relative/path/file-name.extension"
		=> SRC_URI = "file:///absolute/path/file-name.extension"
