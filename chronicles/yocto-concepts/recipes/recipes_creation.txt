Locate or Automatically Create the Base Recipes:
================================================
1. The Recipes can be written from scratch by manually creating the '.bb' files.
2. However, there are three other ways to quickly get started with the Recipes:
	1) The 'recipetool create' command
	2) The 'devtool add' command
	3) The existing Recipes that are similar in functionality can be located and modified.

Creating Base Recipes using recipetool create:
**********************************************
1. The 'recipetool create' command automates the process to create a Recipe file with a given set of source code files.
2. If the source files can be pointed to or extracted, the command can automatically construct a Recipe and Configure all the pre-Build information in the Recipe file.
3. After the Build Environment script is sourced, the 'recipetool' can be executed in the Build directory.
	=> source oe-init-build-env
	=> recipetool -h
	   NOTE: Starting bitbake server...
	   usage: recipetool [-d] [-q] [--color COLOR] [-h] <subcommand> ...

	   OpenEmbedded recipe tool

	   options:
	     -d, --debug     Enable debug output
	     -q, --quiet     Print only errors
	     --color COLOR   Colorize output (where COLOR is auto, always, never)
	     -h, --help      show this help message and exit

	   subcommands:
	     create          Create a new recipe
	     newappend       Create a bbappend for the specified target in the specified layer
	     setvar          Set a variable within a recipe
	     appendfile      Create/update a bbappend to replace a target file
	     appendsrcfiles  Create/update a bbappend to add or replace source files
	     appendsrcfile   Create/update a bbappend to add or replace a source file
	   Use recipetool <subcommand> --help to get help on a specific command

4. The 'recipetool create -o OUTFILE' command can be used in multiple ways to create the Base Recipe and locate it correctly in the Layer containing the source files.
	=> recipetool create -o OUTFILE source
	---> The above Syntax is used to generate a Recipe based on the source. Once generated, the Recipe file resides in the existing source code Layer.
	=> recipetool create -o OUTFILE -x EXTERNALSRC source
	---> The above Syntax is used to generate a Recipe using the code extracted from the source.
	---> The extracted code is placed in it's own Layer defined by the 'EXTERNALSRC' variable. The Recipe file points to this directory.
	=> recipetool create -d -o OUTFILE source
	---> The above Syntax is used to generate a Recipe based on the source. Once generated, the Recipe file resides in the existing source code Layer.
	---> The '-d' option directs the 'recipetool' to generate the Debug information.

Creating Base Recipes using devtool add:
****************************************
1. The 'devtool add' command uses the same logic as the 'recipetool create'.
2. It also sets up the Environment that makes the process of changing the Recipe file or patching the source code.

Creating Base Recipes using Similar Existing Recipe:
****************************************************
1. It is often useful to locate a similar Recipe file already existing which can be modified to meet the requirements.
2. The Yocto Project and the OpenEmbedded Project communities maintain many Recipes that cover a wide variety of functionalities.
3. The existing Recipes can be used to structure the custom Recipes for a particular usage.
	1) If the functionality of a Recipe file is clear, it can be directly picked up and modified according to the requirements.
	2) However, the risk involved with the above method could be unfamiliarity with the parts that need to be written from scratch in the Recipe file.
4. The existing Recipes space can be used as a skeleton to create the custom Recipes with completely new information.
	1) A general skeleton for the Recipe file is as follows:
		=> DESCRIPTION = ""
		=> HOMEPAGE = ""
		=> LICENSE = ""
		=> SECTION = ""
		=> DEPENDS = ""
		=> LIC_FILES_CHKSUM = ""
		=> SRC_URI = ""

Storing and Naming the Recipes:
===============================
1. Once the Base Recipe file is created, it should be placed in the Layer and named appropriately.
2. It is very important to ensure that the Build system is able to locate the Recipes for them to get processed.
3. The BitBake finds the Recipes using the 'BBFILES' variable in the 'conf/layer.conf' file of the corresponding Layer.
	=> BBFILES += "${LAYERDIR}/recipes-*/*/*.bb \
	               ${LAYERDIR}/recipes-*/*/*.bbappend"
4. Consequently, the Recipe file must be placed at a path which can be located by the Build system.
5. The Recipe file name format is defined as follows:
	=> <recipe-name>_<version>.bb
	1) The 'recipe-name' is the name of the SW or the Package being Built.
	2) The 'version' is the version of the SW or the Package being Built.
6. The 'recipe-name' must contain Lowercase characters and the reserved suffixes (-native, -cross, -initial, or -dev) should not be used casually.
	---> In the 'poky/meta/recipes-core/dropbear/', the Recipe file for the SSH Dropbear is 'dropbear_2025.88.bb'.
