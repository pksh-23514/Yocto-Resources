Installing the Built Files using Recipes:
=========================================
1. During the Build after the sources are Compiled and the Built binaries are generated, they need to copied to a directory structure as it should appear on the Target system.
2. The 'do_install' Task is used to install the Built binaries along with their hierarchy to the locations that would mirror the directory structure on the Target Device.
3. It copies the files from the 'S', 'B', 'WORKDIR' directories to the 'D' directory representing the Target directory structure.
4. The method used to Build the SW affects the way it should be installed on the 'D' directory.
5. It should be made sure to perform the corresponding steps for the SW to be installed correctly.

Autotools or CMake:
*******************
1. If the Recipes are using Autotools or CMake, the OpenEmbedded Build system understands the process to install the SW.
2. Therefore, there is no need to have a 'do_install' Task explicitly as a part of the Recipes.
3. However, it must be ensured that the install job of the Build system is completed successfully.
4. Alternatively, if there are additional files which are not being installed already by 'make install', the 'do_install:append' function can be used for such installations.
5. The 'install' command inside the 'do_install:append' function is used to install the files.

Other Makefile-based Projects:
******************************
1. If the Build system uses 'make install', there is a need to define the 'do_install' Task in the Recipes.
2. The 'oe_runmake install' command inside the 'do_install' function is used to install the files.
3. The method used to pass the destination directory path to 'oe_runmake' command depends on the Makefile's design being executed.
4. The variables used to pass the destination path is:
	1) DESTDIR=${D}
	2) PREFIX=${D}
	3) INSTALLROOT=${D}
5. Since there is no Autotools or CMake available, the installation must be tracked for any issues.
	1) If any issues is diagnosed, it should be fixed until everything is installed correctly.
	2) The default location of 'D' directory i.e. '${WORKDIR}/image' must be reviewed to check if all the files are installed correctly.

Manual Installation:
********************
1. If there is no install Target in the Makefile or it is a script Package or it is a binary-only Package, there is a need to define the 'do_install' Task in the Recipes.
2. This function first use the 'install -d' to create the sub-directories under 'D' directory.
3. Once the sub-directories are existing, the function can use 'install -m' to manually install the Built files into these sub-directories.
4. Since there is no Autotools or CMake available, the installation must be tracked for any issues.
	1) If any issues is diagnosed, it should be fixed until everything is installed correctly.
	2) The default location of 'D' directory i.e. '${WORKDIR}/image' must be reviewed to check if all the files are installed correctly.

Modification of Installed Files:
********************************
1. During the installations, there might be a requirement to modify some of the installed files to suit the Target layout.
2. If these changes are performed in the 'do_install' Task, the modifications must be done on the destination file after copying rather than before copying.
3. If the source files are modified before copying, there is a risk of:
	1) The original sources getting tampered which breaks the reproducibility of the Build.
	2) It causes incorrect re-Builds or Caching behavior as the Build system cannot reliably detect what changes have been made.
4. Therefore, when the modifications are made to the copied files in 'D' directory, the sources and the Build area is clean and reproducible.
5. For example, if there is a need to replace the hard-coded paths in a script with the value of variables provided by the Build system:
	=> do_install () {
	=>	install -d ${D}${sysconfdir}/init-script
	=>	install -m 0644 ${S}/my-app.init ${D}${sysconfdir}/init-script/my-app

	=>	# Modify the hard-coded path '/usr/bin' to be replaced with '${bindir}' in the Installed file.
	=>	sed -i "s|/usr/bin/|${bindir}/|g" ${D}${sysconfdir}/init-script/my-app

Parallel Make Failures:
***********************
1. The 'oe_runmake install' can be run directly or indirectly by the 'autotools*' and the 'cmake' Classes.
2. The 'oe_runmake' is a helper function provided in the 'meta/classes/base.bbclass' file that internally calls 'make' command.
3. Therefore, the 'oe_runmake install' runs 'make install' in the 'do_install' Task. It typically runs in Parallel i.e. using multiple jobs with 'make -j' command.
4. Sometimes, the Makefile can have missing dependencies between the 'do_install' jobs can result in race conditions.
5. These race conditions manifest themselves as intermittent Build failures during the installations and they are tricky to reproduce consistently.
6. The best workaround for these type of errors is to disable the Parallel Makefile installs by adding the statement in the Recipes:
	=> PARALLEL_MAKEINST = ""
