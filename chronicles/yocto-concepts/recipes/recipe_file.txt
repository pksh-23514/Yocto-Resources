Recipes:
========
1. Recipes are a text file containing a set of instructions for building a SW.
2. It is written in the BitBake Syntax. They are read and processed by the BitBake during the Build process.
3. These files have the suffix as '.bb' to distinguish themselves as a Recipe file.
4. They represent the fundamental unit of execution for either to Build a particular SW or to Build the custom Linux Image.
5. Each SW component Built by the OpenEmbedded Build system requires a Recipe file to define the component. A single Recipe contains information about a single piece of SW.
6. It provides the following information to the BitBake:
	1) Location to download the unaltered source code.
	2) Patches to be applied on the source code (if any).
	3) Any special Configuration options to be applied.
	4) Compilation process of the source code.
	5) Installation or Packaging process.
	6) License details.
7. Based on these information provided, the BitBake generates a set of Tasks to be performed in a chronological order.

Recipes File Format:
====================
1. The Recipe file name format is defined as follows:
	=> <recipe-name>_<version>.bb
	1) The 'recipe-name' is the name of the SW or the Package being Built.
	2) The 'version' is the version of the SW or the Package being Built.
	---> In the 'poky/meta/recipes-core/dropbear/', the Recipe file for the SSH Dropbear is 'dropbear_2025.88.bb'.

Proper Versioning of Recipes:
=============================
1. Sometimes the name of the Recipe file can lead to a versioning problem when the Recipe file is upgraded to a final Release.
2. The suffix 'rcx' (like rc1, rc2, rc3 etc) is used for a Release candidate stage Recipe file.
3. The final Release of the Recipe file is without the 'rcx' suffix.
4. Suppose a Recipe file has a Release candidate that needs to be upgraded to the final Release, however the version name could cause the upgrade to fail.
	1) The Release candidate Recipe file version as '0.8.16-rc1' and the final Release Recipe file version as '0.8.16'.
	2) In such cases, the version comparision logic may interpret the final Release as the older one than the Release candidate.
	3) The version change from '0.8.16-rc1' to '0.8.16' is seen as a decrease by the Build system and Package managers.
	4) So the resulting Packages will not correctly trigger an upgrade to the final Release.
5. The '-' is seen as a version that comes after. The '~' is seen as a version that was before.
	1) 0.8.16~rc1 ---> Before the final Release
	2) 0.8.16 ---> The final Release
	3) 0.8.16-rc1 ---> After the final Release (which is incorrect as it is the Release candidate)
6. Therefore, the recommended convention is to use a '~' character in the 'PV' variable for the Release candidate.
	=> PV = 0.8.16~rc1
