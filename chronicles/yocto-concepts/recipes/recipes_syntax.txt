Syntax in Recipes:
==================

Variable Assignments and Manipulations:
***************************************
1. The variable assignments allow to assign the value to a variable.
2. The assignments can be static text or might include the contents of the other variables.
3. The appending and prepending operations are also supported.
4. It can be used in the Recipes as following:
	=> S = "${WORKDIR}/postfix-${PV}"
	=> CFLAGS += "-DNO_ASM"
	=> CFLAGS:append = " --enable-important-feature"

Quote Assignments:
******************
1. The double quotes ("") are must around the values in the variable assignments.
2. It can be used in the Recipes as following:
	=> VARIABLE = "value"
	=> VERSION = "The version is ${PV}"

Variables Expansion:
********************
1. The contents of the variables can be accessed only using '${VARIABLE_NAME}' Syntax.
2. The '=' operator doesn't immediately expand the variable references on the right-hand side.
3. The expansion on the right-hand side is deferred until the variable which is assigned with the reference variable is actually used by the function i.e. expansion is on-demand.
4. This behavior ensures that the values are most appropriate for the context in which they are finally used.
5. The ':=' operator results in an immediate expansion of the variable references on the right-hand side rather than when the variable is actually used.
6. These immediate expansions are needed only on certain rare occasions.
7. It can be used in the Recipes as following:
	=> VAR1 = "${VARIABLE}"		// The expansion is not immediate.
	=> VAR2 := "${VARIABLE}"	// The expansion is immediate.

Conditional Assignments:
************************
1. The conditional assignments are used to assign the value to a variables only if the variables are currently not set anywhere else.
2. The '?=' operator is used to assign a default value for the variable. The Soft assignments are used for the conditional assignments.
3. However, the default value is replaced by the value of the variable if that variable is defined.
4. They are typically used in the 'conf/local.conf' file for the variables that are allowed to come through from the external Environment.
5. If there are multiple '?=' type of assignments to a single variable, the first of all the '?=' assignments is used as the value for the variable.
6. It can be used in the Recipes as following:
	=> VARIABLE ?= "value"		// This 'value' is assigned to the 'VARIABLE' only if it is not defined elsewhere.

Appending and Prepending Operations:
************************************
1. The '+=' operator is used for appending the values to a variable.
2. The operation takes into effect immediately during the parsing by the BitBake.
3. It inserts a space between the current value of the variable and the appended value.
4. It can be used in the Recipes as following:
	=> SRC_URI += "file://fix-makefile.patch"
5. The '=+' operator is used for prepending the values to a variable.
6. The operation takes into effect immediately during the parsing by the BitBake.
7. It inserts a space between the current value of the variable and the prepended value.
8. It can be used in the Recipes as following:
	=> VAR =+ "Starts"

Functions:
**********
1. The functions provide a series of actions to be performed.
2. They are used:
	1) To override the default implementation of a Task function.
	2) To append or prepend an existing function.
3. The standard functions use the Shell Syntax, although access to the OpenEmbedded variables and the internal methods are also available.
4. However, they can also be implemented in Python Syntax rather than Shell Syntax.
5. It is possible to implement some new functions that are called between the existing Tasks as long as those functions are not replacing or complementing the default functions.
6. It can be used in the Recipes as following:
	=> do_install () {
	=>     autotools_do_install
	=>     install -d ${D}${base_bindir}
	=>     mv ${D}${bindir}/sed ${D}${base_bindir}/sed
	=>     rmdir ${D}${bindir}/
	=> }

Keywords:
*********
1. The BitBake Recipes make use of a few keywords only.
2. They are generally used:
	1) To include the common functions using 'inherit'.
	2) To load parts of a Recipe from other files using 'include' and 'require'.
	3) To export the variables into the Environment using 'export'.
3. It can be used in the Recipes as following:
	=> export POSTCONF = "${STAGING_BINDIR}/postconf"
	=> inherit autoconf
	=> require otherfile.inc

Overrides:
**********
1. The Overrides are used for conditional variable assignments typically based on how the Recipes are being Built.
2. They can also be used to provide per-Package Meta-data in the Recipes.
3. The Override Syntax has been modified from '_' to ':' in the modern Yocto Project versions.
4. It can be used in the Recipes as following:
	=> KBRANCH = "standard/base"
	=> KBRANCH:qemuarm = "standard/arm-versatile-926ejs"	// The Kernel branch only for 'qemuarm' Machine is set to a different value.
	=> FILES:${PN} += "/usr/bin/mybinary"
	=> RDEPENDS:${PN}-tools = "bash"

Appending and Prepending Operations using Override Style Syntax:
****************************************************************
1. The Override Syntax (:append) can be used for appending the values to a variable.
2. It does not insert any space between the current value of the variable and the appended value. Therefore, the space controlling shall be done while using this Syntax.
3. The operation takes into effect during the variable expansion only i.e. it is not applied immediately.
4. It can be used in the Recipes as following:
	=> CFLAGS:append = " --enable-important-feature"
	=> CFLAGS:append:sh4 = " --enable-important-sh4-specific-feature"	// It can be used with the other Overrides as well.
5. The Override Syntax (:prepend) can be used for prepending the values to a variable.
6. It does not insert any space between the current value of the variable and the prepended value. Therefore, the space controlling shall be done while using this Syntax.
7. The operation takes into effect during the variable expansion only i.e. it is not applied immediately.
8. It can be used in the Recipes as following:
	=> CFLAGS:prepend = "-I${S}/myincludes "
	=> CFLAGS:prepend:sh4 = "-I${S}/myincludes "		// It can be used with the other Overrides as well.
9. These operators are applied only after all the '+=' and the '=+' operators have been applied and after all the '=' assignments have occurred.
10. If there is ':append' or ':prepend' operations in the Recipes, they can be only be overridden by another higher priority Layer using the special ':remove' operator.
	1) In such cases, it prevents the other lower priority Layers from adding the value back.
	2) Therefore, due to late binding effect of these operations, it is hard to override ':append' or ':prepend' operations unless done explicitly using ':remove' operation.
11. The major advantage of the Override Syntax as compared to '+=' or '=+' operators is that it provides guaranteed operation on the variables.

Comments:
*********
1. Any line in the Recipe file beginning with the '#' character is treated as a comment line by the BitBake.
2. They are ignored during the Recipes Build.
3. It can be used in the Recipes as following:
	=> # This line is a comment

Lines Continuation:
*******************
1. The statement in the Recipe file can be split into multiple lines using the '\' character.
2. If the '\' character is placed at the end of a line, the BitBake understands that the statement is continued on the next line.
3. There should not be any characters (including spaces or tabs) after the '\' character.
4. It can be used in the Recipes as following:
	=> VARIABLE = "The value is too \
	               long"
