Syntax in Recipes:
==================

Variable Assignments and Manipulations:
***************************************
1. The variable assignments allow to assign the value to a variable.
2. The assignments can be static text or might include the contents of the other variables.
3. The appending and prepending operations are also supported.
4. The following ways display the usage on the variables:
	=> S = "${WORKDIR}/postfix-${PV}"
	=> CFLAGS += "-DNO_ASM"
	=> CFLAGS:append = " --enable-important-feature"

Functions:
**********
1. The functions provide a series of actions to be performed.
2. They are used:
	1) To override the default implementation of a Task function.
	2) To append or prepend an existing function.
3. The standard functions use the Shell Syntax, although access to the OpenEmbedded variables and the internal methods are also available.
4. However, they can also be implemented in Python Syntax rather than Shell Syntax.
5. It is possible to implement some new functions that are called between the existing Tasks as long as those functions are not replacing or complementing the default functions.
6. The following is an example function from the 'sed' Recipe:
	=> do_install () {
	=>     autotools_do_install
	=>     install -d ${D}${base_bindir}
	=>     mv ${D}${bindir}/sed ${D}${base_bindir}/sed
	=>     rmdir ${D}${bindir}/
	=> }

Keywords:
*********
1. The BitBake Recipes make use of a few keywords only.
2. They are generally used:
	1) To include the common functions using 'inherit'.
	2) To load parts of a Recipe from other files using 'include' and 'require'.
	3) To export the variables into the Environment using 'export'.
3. The following ways display the usage of the keywords:
	=> export POSTCONF = "${STAGING_BINDIR}/postconf"
	=> inherit autoconf
	=> require otherfile.inc
