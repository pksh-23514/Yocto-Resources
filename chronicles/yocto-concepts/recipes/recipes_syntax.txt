Syntax in Recipes:
==================

Variable Assignments and Manipulations:
***************************************
1. The variable assignments allow to assign the value to a variable.
2. The assignments can be static text or might include the contents of the other variables.
3. The appending and prepending operations are also supported.
4. The following ways display the usage on the variables:
	=> S = "${WORKDIR}/postfix-${PV}"
	=> CFLAGS += "-DNO_ASM"
	=> CFLAGS:append = " --enable-important-feature"

Quote Assignments:
******************
1. The double quotes ("") are must around the values in the variable assignments.
2. It can be used in the Recipes as following:
	=> VARIABLE = "value"
	=> VERSION = "The version is ${PV}"

Variables Expansion:
********************
1. The contents of the variables can be accessed only using '${VARIABLE_NAME}' Syntax.
2. The '=' operator doesn't immediately expand the variable references on the right-hand side.
3. The expansion on the right-hand side is deferred until the variable which is assigned with the reference variable is actually used by the function i.e. expansion is on-demand.
4. This behavior ensures that the values are most appropriate for the context in which they are finally used.
5. The ':=' operator results in an immediate expansion of the variable references on the right-hand side rather than when the variable is actually used.
6. These immediate expansions are needed only on certain rare occasions.
7. It can be used in the Recipes as following:
	=> VAR1 = "${VARIABLE}"		// The expansion is not immediate.
	=> VAR2 := "${VARIABLE}"	// The expansion is immediate.

Functions:
**********
1. The functions provide a series of actions to be performed.
2. They are used:
	1) To override the default implementation of a Task function.
	2) To append or prepend an existing function.
3. The standard functions use the Shell Syntax, although access to the OpenEmbedded variables and the internal methods are also available.
4. However, they can also be implemented in Python Syntax rather than Shell Syntax.
5. It is possible to implement some new functions that are called between the existing Tasks as long as those functions are not replacing or complementing the default functions.
6. The following is an example function from the 'sed' Recipe:
	=> do_install () {
	=>     autotools_do_install
	=>     install -d ${D}${base_bindir}
	=>     mv ${D}${bindir}/sed ${D}${base_bindir}/sed
	=>     rmdir ${D}${bindir}/
	=> }

Keywords:
*********
1. The BitBake Recipes make use of a few keywords only.
2. They are generally used:
	1) To include the common functions using 'inherit'.
	2) To load parts of a Recipe from other files using 'include' and 'require'.
	3) To export the variables into the Environment using 'export'.
3. The following ways display the usage of the keywords:
	=> export POSTCONF = "${STAGING_BINDIR}/postconf"
	=> inherit autoconf
	=> require otherfile.inc

Comments:
*********
1. Any line in the Recipe file beginning with the '#' character is treated as a comment line by the BitBake.
2. They are ignored during the Recipes Build.
3. It can be used in the Recipes as following:
	=> # This line is a comment

Lines Continuation:
*******************
1. The statement in the Recipe file can be split into multiple lines using the '\' character.
2. If the '\' character is placed at the end of a line, the BitBake understands that the statement is continued on the next line.
3. There should not be any characters (including spaces or tabs) after the '\' character.
4. It can be used in the Recipes as following:
	=> VARIABLE = "The value is too \
	               long"
