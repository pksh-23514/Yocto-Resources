Variable Expansion:
===================
1. The variables can reference to the contents of the other variables using the variable expansion Syntax.
	=> VARIABLE_ONE = "value_1"
	=> VARIABLE_TWO = "${VARIABLE_ONE} value_2"
	---> VARIABLE_TWO = "value_1 value_2"
2. The '=' operator doesn't immediately expand the variable references on the right-hand side.
3. The expansion on the right-hand side is deferred until the variable which is assigned with the reference variable is actually used.
4. The result of that variable is then dependent on the current value of the referenced variable.
	=> VAL1 = "DOUBLE"
	=> VAL2 = 'SINGLE'
	=> VAL3 = "${VAL1} ${VAL2}"
	=> VAL1 = "1"
	=> bitbake -e | grep ^VAL3=
	---> VAL3="1 SINGLE"
5. If the variable is assigned with a reference variable that is not defined anywhere, the String is kept as it is.
	=> VAL3 = "${VAL4}"
	=> bitbake -e | grep ^VAL3=
	---> VAL3="\${VAL4}"

Immediate Variable Expansion:
=============================
1. The ':=' operator results in an immediate expansion of the variable references on the right-hand side rather than when the variable is actually used.
2. The variables can reference to the contents of the other variables using the immediate variable expansion Syntax.
	=> VARIABLE_ONE = "value_1"
	=> VARIABLE_TWO := "${VARIABLE_ONE} value_2"
	---> VARIABLE_TWO = "value_1 value_2"
3. Although the expansion happens immediately, the references to undefined variables are preserved.
	=> VAL5 = "1"
	=> VAL6 := "${VAL5} 2"
	=> bitbake -e | grep ^VAL5=
	---> VAL5="1"
	=> bitbake -e | grep ^VAL6=
	---> VAL6="1 2"
	=> VAL5 = "3"
	=> VAL6 := "${VAL5} ${VAL7}"
	=> VAL7 = "4"
	=> VAL7 := "${VAL7} 5"
	=> bitbake -e | grep ^VAL5=
	---> VAL5="3"
	=> bitbake -e | grep ^VAL6=
	---> VAL6="3 4 5"
	=> bitbake -e | grep ^VAL7=
	---> VAL7="4 5"
