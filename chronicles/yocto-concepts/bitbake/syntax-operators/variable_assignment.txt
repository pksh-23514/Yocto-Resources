Variable Assignment:
====================
1. The variables are assigned in the following manner:
	=> VARIABLE = "value"
2. The value assignment occurs as soon as the statement is parsed by the BitBake i.e. the assignment is immediate.
3. This type of variable assignment is known as Hard assignment.
4. If any leading or trailing spaces are a part of the assignment, the spaces are retained while parsing.
	=> VARIABLE = "value "
	=> VARIABLE = " value"
	=> VARIABLE = ""	// Empty String
	=> VARIABLE = " "	// Blank Space
5. The single quotes can be used in place of the double quotes for the assignment of the variables. Both the styles work identically in the variable assignment.
6. However, using the single quotes assignment style allows the use of double quotes in the value.
	=> VARIABLE = 'There is a " in the value'
7. The preferred style of assignment is using the double quotes.
8. If there are multiple '=' type of assignments to a single variable, the last of all the '=' assignments is used as the value for the variable.
	=> VAL3 = "1"
	=> VAL3 = "2"
	=> bitbake -e | grep ^VAL3=
	---> VAL3="2"

Verify the Variable Value:
==========================
1. The BitBake provides a way to verify the value of the variables assigned either in the Configuration files or the Recipes.
2. The command to display the variable values after the Configuration (*.conf) files are parsed by the BitBake is:
	=> bitbake -e | grep VARIABLE_NAME=\"
3. The variables that are exported to the Environment are preceded by the String 'export' in the files.
4. The command to display the variable values after the particular Recipes are parsed by the BitBake is:
	=> bitbake -e recipe_name | grep VARIABLE_NAME=\"
5. The above command checks if the variable actually makes it into the specific Recipe.
6. The 'grep' command can be modified to search the value for the variable starting with the name as follows:
	=> bitbake -e | grep ^VARIABLE_NAME=
	=> bitbake -e recipe_name | grep ^VARIABLE_NAME=

Line Joining:
=============
1. The BitBake joins the line ending with a backslash '\' with the following line before parsing the statements. It indicates that the current line continues on the next line.
2. This behavior is applied only outside of the functions, as a part of the BitBake parser's pre-processing.
3. It is mostly used to split the variable assignment over multiple lines. This can be illustrated by the below variable assignment:
	=> SRC_URI = " \
	       file://patch1.patch \
	       file://patch2.patch \
	       file://patch3.patch \
	   "
4. In the above case, the BitBake joins all the lines ending in '\' into a single logical line before parsing the variable.
	=> SRC_URI = " file://patch1.patch file://patch2.patch file://patch3.patch "
5. While joining the lines, both the backslash '\' and newline '\n' are removed from the assignment.
6. This line joining happens before the BitBake parses the statements into it's internal data model.
7. Inside the Python functions, the standard Python Syntax is used. The BitBake doesn't join the lines with '\' there unless the Python itself requires it.
8. Always remember to leave a space ' ' before the '\' when splitting the Strings to ensure proper token separation.

Default Value Assignment:
=========================
1. The '?=' operator is used to assign a default value for the variable.
2. This type of assignment allows to define a variable value to be used if it remains undefined when the statement is parsed by the BitBake.
3. However, the default value is replaced by the value of the variable if that variable is defined.
4. This type of variable assignment is known as Soft assignment.
5. The variables are assigned in the following manner:
	=> VARIABLE ?= "value"
6. The following example from Poky is defined in this manner:
	=> #MACHINE = "qemux86"
	=> MACHINE ?= "qemuarm"
	=> #MACHINE = "qemuarm64"
7. In the above case, if the 'MACHINE' variable is not set before or after the statement, then by default the Build system uses 'qemuarm' as the Target Machine.
8. The value assignment occurs as soon as the statement is parsed by the BitBake i.e. the assignment is immediate.
9. If there are multiple '?=' type of assignments to a single variable, the first of all the '?=' assignments is used as the value for the variable.
	=> VAL3 ?= "1"
	=> VAL3 ?= "2"
	=> bitbake -e | grep ^VAL3=
	---> VAL3="1"

Weak Default Value Assignment:
==============================
1. The '??=' operator is used to assign a weaker default value for the variable.
2. This type of assignment allows to defina a variable value to be used if there is no value assigned to the variable via any other type of other assignments.
3. However, the weaker default value is replaced by the value of the variable if that variable is defined.
4. The variables are assigned in the following manner:
        => VARIABLE ??= "value"
5. The following example from Poky is defined in this manner:
	=> #MACHINE = "qemuarm"
	=> MACHINE ??= "qemux86"
	=> #MACHINE ?= "qemuarm64"
6. In the above case, if the 'MACHINE' variable is not set anywhere else, then the Build system as a final resort uses 'qemux86' as the Target Machine.
7. The value assignment occurs at the end of the parsing process by the BitBake i.e. the assignment is not immediate.
8. If there are multiple '??=' type of assignments to a single variable, the last of all the '??=' assignments is used as the value for the variable.
	=> VAL3 ??= "1"
	=> VAL3 ??= "2"
	=> bitbake -e | grep ^VAL3=
	---> VAL3="2"

Priority Order of Different Assignment:
=======================================
1. The order is as follows:
	=> Hard assignment > Soft assignment > Weaker assignment
2. This can be illustrated by the below example:
	=> VAL3 ??= "1"
	=> VAL3 ?= "2"
	=> VAL3 = "3"
	=> bitbake -e | grep ^VAL3=
	---> VAL3="3"
