BitBake:
========
1. The BitBake is a core component of the Yocto Project and it is at the heart of the OpenEmbedded Project.
2. It is the tool that parses the Meta-data, generates a list of Tasks from it and then executes these Tasks in an orderly manner.
3. Conceptually, it is similar to the GNU Make but they have significant differences among them.
	1) Both the Make and BitBake control the process of SW Build.
	2) Make achieves this control through Makefiles. BitBake achieves this control through Recipes.
	3) BitBake extends the capabilities of a simple tool like Make by allowing for the definition of much more complex Tasks such as assembling entire Linux Distributions.
4. It is written in Python.
5. The link to the BitBake Git repository is: https://git.openembedded.org/bitbake/
6. It is a Task scheduler that performs the following tasks:
	1) It parses the Recipe (.bb) files and the associated files (.bbclass, .inc and .conf) to understand how to fetch, configure, compile and package the SW.
	2) It resolves the Build-time and Run-time dependencies in the Recipes.
	3) It ensures all the required components are Build in the right order.
	4) It executes all the Tasks defined in the Recipes (like do_fetch, do_unpack, do_patch, do_configure, do_compile, do_install, do_package).
	5) It packages the SW (usually as .ipk, .rpm or .deb files) after the Build is completed.
	6) It tracks the Build State for completion and uses checksums (signatures) to determine if something needs to be Build again.
	7) It Caches the Build to avoid any redundant Builds and speed up the Build process.
7. It automates the complete Build process for the custom Linux Distributions.
8. The link to the BitBake documentation is: https://docs.yoctoproject.org/bitbake/2.12/index.html

bitbake Directory in Poky:
**************************
1. The 'bitbake' directory includes a copy of BitBake in Poky for the ease of use. It usually matches the current Stable Release of the BitBake from the BitBake project.
2. When the Build Environment script is sourced, the directory path for 'poky/scripts' and 'poky/bitbake/bin' are included in the 'PATH' Shell Environment variable.
	=> source oe-init-build-env
	=> echo $PATH
	   /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/scripts:/home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/bitbake/bin:...
3. After the Environment is setup, then the 'bitbake' command is available. Otherwise, it will throw an error as 'bitbake: command not found'.
4. The commands (binaries) used in the 'bitbake' directory are:
	1) bitbake
	2) bitbake-layers
	3) bitbake-selftest
	4) bitbake-getvar
	5) toaster

The BitBake Commands:
=====================

bitbake Command Usage:
**********************
1. The 'bitbake' command is the primary command of the OpenEmbedded Build system to Build the Packages and Images for the Embedded Linux Distributions.
2. It is known as a Meta-data Interpreter which reads the Yocto Project Meta-data and runs the Tasks defined by the Meta-data.
3. Syntax:
	bitbake [options] [recipename/target recipe:do_task ...]
	---> Where the [recipename/target] refers to the Target Recipes for which the specified Task (default is 'build') is executed.
4. The 'options' are as follows:
	1) --version => Show the Program's version and exit.
	2) -h, --help => Show this help Message and exit.
	3) -b BUILDFILE, --buildfile=BUILDFILE => Execute the Tasks from a specific Recipe (.bb) directly. It does not handle any dependencies from the other Recipes.
	4) -k, --continue => Continue the Build as much as possible after an error. However, the Target that failed and anything depending on it cannot be Built.
	5) -c CMD, --cmd=CMD => Specify the Task to execute. The exact 'CMD' options available depend on the Meta-data.
	6) -D, --debug => Increase the Debug level. If '-DD' is used, both bb.debug(1, ...) and bb.debug(2, ...) Messages are printed. It only affects the Output to 'stdout'.
	7) -r PREFILE, --read=PREFILE => Reads the specified file before 'bitbake.conf'.
	8) -R POSTFILE, --postread=POSTFILE => Reads the specified file after bitbake.conf.
	9) -v, --verbose => Enable tracing of the Shell Tasks (with 'set -x'). It also prints bb.note(...) Messages to 'stdout' along with writing them to ${T}/log.do_<task>).
	10) -q, --quiet => Outputs less log Message data to the terminal. It can be specified more than once.
	11) -p, --parse-only => Parses the BB Recipes and exit.
	12) -s, --show-versions => Shows the current and the preferred versions of all the Recipes.
	13) -e, --environment => Shows the global or per-Recipe Environment complete details along with the information about where the variables were set/changed.
	14) --server-only => Run the BitBake without a UI i.e. only starting a Server (Cooker) process.
	15) -B BIND, --bind=BIND => The name/Address for the BitBake 'xmlrpc' Server to bind to.
	16) --no-setscene => Does not run any SetScene Tasks. Sstate will be ignored and everything needed is Built.
	17) --skip-setscene => Skips the SetScene Tasks if they would be executed. Tasks previously restored from Sstate will be kept, unlike in '--no-setscene'.
	18) --setscene-only => Only runs the SetScene Tasks and doesn't run any real Tasks.
	19) --remote-server=REMOTE_SERVER => Connect to the specified Server.
	20) -m, --kill-server => Terminate any running BitBake Server.
	21) --observe-only => Connects to a Server as an observing-only Client.
	22) --status-only => Checks the status of the remote BitBake Server.
	23) --runall=RUNALL => Runs the specified Task for any Recipe in the Task-graph of the specified Target even if it wouldn't otherwise have to be run.
	24) --runonly=RUNONLY => Runs only the specified Task within the Task-graph of the specified Targets and any Task dependencies that those Tasks may have.
5. The common options for the 'CMD' are as follows:
	1) build (default CMD)
	2) clean
	3) cleanall
	4) fetch
	5) unpack
	6) patch
	7) configure
	8) compile
	9) install
	10) package
	11) cleansstate
	12) menuconfig
	13) listtasks
	14) rootfs
6. The 'bitbake' command can be used to list all the Tasks defined for a particular Recipe.
	1) Syntax:
		bitbake -c listtasks [recipename/target]
	2) If the above command is executed for 'busybox' Recipe, the Output will be following:
	=> bitbake -c listtasks busybox
	=> ...
	NOTE: Executing Tasks
	do_build
	do_checkuri
	do_clean
	do_cleanall
	do_cleansstate
	do_compile
	do_configure
	...
	do_fetch
	...
	do_install
	...
	do_package
	...
	do_patch
	...
	do_unpack
