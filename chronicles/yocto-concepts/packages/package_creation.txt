Packages:
=========
1. Packages are the Recipe's packaged Compiled Output produced by the BitBake.
2. They are the binaries that get installed on the Target Image (or RootFS).
3. It is a binary file in the format of '.ipk', '.deb' or '.rpm' which is Compiled from the Recipe's source code.
4. The format of the binaries is defined by the Package manager selected by the Build system using the 'PACKAGE_CLASSES' variable.
5. The Packages can be installed, updated or removed using the respective Package manager based on the Package format.
6. Packaging is the process of taking the Built SW and organizing it into installable units called Packages.
7. The successful Packaging is a combination of the automated processes performed by the OpenEmbedded Build system and some processes that need to be executed manually.
8. The Built SW can include binaries, libraries, scripts, documentation etc.

Splitting Files:
================
1. The 'do_package' Task splits the files generated by the Recipes into logical components.
2. Even the Recipes that produce a single binary might stil have Debug-Symbols, documentation etc that should be split out logically.
3. This split is necessary because not all of these components are used to be installed on the Image.
	1) There is no requirement for the documentation to be installed in a Production Image.
	2) This method improves flexibility of the Build system.
4. There is a lot of constraints on the HW resources running the Embedded Linux. Therefore, the Image should be Memory efficient.
5. The 'do_package' Task ensures that the files are split up and organized correctly.
	1) It uses the 'PACKAGES' and the 'FILES' variables for the splitting process.
	2) The 'PACKAGES' variable lists all the Packages to be produced from the corresponding Recipe.
	3) The default value of the 'PACKAGE' variable is:
		=> PACKAGES = "${PN}-src ${PN}-dbg ${PN}-staticdev ${PN}-dev ${PN}-doc ${PN}-locale ${PACKAGE_BEFORE_PN} ${PN}"
		---> where the 'PN' variable refers to the primary Package name which is the Recipe name.
	4) If the 'PACKAGES' variable is not defined by the Recipe, the BitBake will use the default value automatically.
	5) The 'FILES' variable lists all the files and the directories that are to be included in each Package of the 'PACKAGES' variable.
	6) The usage of 'FILES' variable requires a Package name override to identify the resulting Package. This is followed by a space separated list of files or paths.
		=> FILES:${PN}-package-suffix-name += "${bindir}/my_dir1 ${bindir}/my_dir2/my_file"
	7) The default values of the 'FILES' variable for the default Package list in the 'PACKAGES' variable is defined in the 'meta/conf/bitbake.conf' file.
		=> FILES:${PN} = "${bindir}/* ${sbindir}/* ${libexecdir}/* ...
		=> FILES:${PN}-bin = "${bindir}/* ${sbindir}/*"
		=> FILES:${PN}-doc = "${docdir} ${mandir} ${infodir} ${datadir}/gtk-doc ...
		=> ...
6. During the Packaging process, the 'do_package' Task:
	1) Goes through the 'PACKAGES' variable. If the 'PACKAGES' variable is not defined by the Recipe, the BitBake will use the default value automatically.
	2) Uses the 'FILES' variable corresponding to each Package in the 'PACKAGES' variable to assign the files to that Package.
	3) If a file matches in the 'FILES' variable for more than one Package in the 'PACKAGES' variable, it is assigned to the earliest (leftmost) Package in the list.
7. If none of the patterns in the 'FILES:${PN}-package-suffix-name' variable matches with the files installed by the 'do_install' Task, these Packages are not generated.
	1) By default, the Packages in the 'PACKAGES' variable with no matching file in their respective 'FILES' variable are not generated.
	2) They can be forced to generate by using the 'ALLOW_EMPTY' variable with the respective Package name override.
		=> ALLOW_EMPTY:${PN}-package-suffix-name = "1"
8. While specifying the paths in the 'FILES' variable, it is recommended by the Yocto Project to use the appropriate path variables.
	1) The usage of path variables include:
		=> '${sysconfdir}' in place of '/etc'.
		=> '${bindir}' in place of '/usr/bin'.
	2) The list of all the path variables is defined in the 'meta/conf/bitbake.conf' file.
9. Therefore, the 'PACKAGES' and the 'FILES' variables define how the files installed by the 'do_install' Task are packaged.
	1) The Recipe Building the SW generally installs these files to be packaged into the standard locations as defined in the 'bitbake.conf' Configuration file.
	2) Consequently, there is no need to set these variables explicitly unless the SW getting Built installs these files to be packaged into non-standard locations.
