Packages:
=========
1. Packages are the Recipe's packaged Compiled Output produced by the BitBake.
2. They are the binaries that get installed on the Target Image (or RootFS).
3. It is a binary file in the format of '.ipk', '.deb' or '.rpm' which is Compiled from the Recipe's source code.
4. The format of the binaries is defined by the Package manager selected by the Build system using the 'PACKAGE_CLASSES' variable.
	1) .ipk => The Package manager is 'opkg'. This is used as default for Poky.
	2) .deb => The Package manager is 'dpkg' or 'apt'.
	3) .rpm => The Package manager is 'dnf', 'smart' or 'rpm'.
5. A single Recipe can generate multiple Packages which are then split based on the 'PACKAGES' and the 'FILES' variable.
6. The 'PACKAGES' variable lists all the Packages to be produced from the corresponding Recipe.
7. The default value of the 'PACKAGES' variable is:
	=> PACKAGES = "${PN}-src ${PN}-dbg ${PN}-staticdev ${PN}-dev ${PN}-doc ${PN}-locale ${PACKAGE_BEFORE_PN} ${PN}"
	---> where the 'PN' variable refers to the primary Package name which is the Recipe name.
8. The Package splitting of the Recipe can produce:
	1) ${PN}-src => Contains the source code.
	2) ${PN}-dbg => Contains the binaries with Debug-Symbols.
	3) ${PN}-staticdev => Contains the Static libraries (*.a) for linking statically rather than dynamically.
	4) ${PN}-dev => Contains the development files i.e. the Header files, the Symlinks to Shared libraries (.so) etc required for Compilation.
	5) ${PN}-doc => Contains the documentation files.
	6) ${PN}-locale => Contains the locale and internationalization files used for supporting multiple languages.
	7) ${PACKAGE_BEFORE_PN} => Enables insertion of Packages before the main Package in the list.
	8) ${PN} => The primary (main) Package.
9. If the 'PACKAGES' variable is not defined by the Recipe, the BitBake will use the default value automatically.
10. The 'FILES' variable lists all the files and the directories that are to be included in each Package of the 'PACKAGES' variable.
11. The usage of 'FILES' variable requires a Package name override to identify the resulting Package. This is followed by a space separated list of files or paths.
	=> FILES:${PN}-package-suffix-name += "${bindir}/my_dir1 ${bindir}/my_dir2/my_file"
12. The default values of the 'FILES' variable for the default Package list in the 'PACKAGES' variable is defined in the 'meta/conf/bitbake.conf' file.
	=> FILES:${PN} = "${bindir}/* ${sbindir}/* ${libexecdir}/* ...
	=> FILES:${PN}-bin = "${bindir}/* ${sbindir}/*"
	=> FILES:${PN}-doc = "${docdir} ${mandir} ${infodir} ${datadir}/gtk-doc ...
	=> ...
13. While specifying the paths in the 'FILES' variable, it is recommended by the Yocto Project to use the appropriate path variables.
	1) The usage of path variables include:
		=> '${sysconfdir}' in place of '/etc'.
		=> '${bindir}' in place of '/usr/bin'.
	2) The list of all the path variables is defined in the 'meta/conf/bitbake.conf' file.
14. Any additional logical Package can be defined in the Recipe file. The prefix '${PN}-' is maintained to distinguish it as a Package.
	=> PACKAGES = "${PN}-tools ${PN}-extras ${PN}"
	=> FILES:${PN} = "${bindir}/main-app"
	=> FILES:${PN}-tools = "${bindir}/tools/*"
	=> FILES:${PN}-extras = "${datadir}/extras"
	=> DESCRIPTION:${PN}-tools = "Extra tools"
	=> RDEPENDS:${PN}-tools = "${PN}"
15. Therefore, the 'PACKAGES' and the 'FILES' variables define how the files installed by the 'do_install' Task are packaged.
	1) The Recipe Building the SW generally installs these files to be packaged into the standard locations as defined in the 'bitbake.conf' Configuration file.
	2) Consequently, there is no need to set these variables explicitly unless the SW getting Built installs these files to be packaged into non-standard locations.

.ipk Packages:
**************
1. The '.ipk' stands for the Itsy Package. It was created for the Itsy Linux Project (a precursor to the OpenEmbedded Project).
2. It is designed to be light-weight, fast and with minimal features. It is highly suitable for the Embedded systems with high limitations on the HW resources.
3. It is used by the OpenEmbedded Project, the OpenWRT and the Yocto Project.

.deb Packages:
**************
1. The '.deb' stands for the Debian Package. It was created to support the Debian-style Package management.
2. It contains the Compiled SW along with the Meta-data, scripts and dependency information. It is highly suitable for complex Package management.
3. It is used by the Debian and the Debian based Linux Distributions.

.rpm Packages:
**************
1. The '.rpm' stands for the Red Hat Package Manager. It was created to support the Red Hat Package management.
2. It contains the Compiled SW along with the Meta-data, scripts, dependency information and digital signature. It is highly suitable for powerful Enterprise Linux Environments.
3. It is used by the Red Hat Linux and the Red Hat based Distributions.
