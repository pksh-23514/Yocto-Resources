Board Support Package (BSP):
============================
1. The Board Support Package (BSP) is a collection of information that defines how a particular HW, set of HW Devices or HW platforms can be supported.
2. It includes details about the HW features present on the Device and the Kernel Configurations along with any additional HW Drivers required.
3. It also lists any additional SW components required along with the generic Linux SW stack for platform features.

BSP Layers:
===========
1. In the Yocto Project, a BSP Layer is a collection of:
	1) Meta-data
	2) Configuration files
	3) Recipes for the Kernel and the Bootloader
	4) Device Tree and Firmware
	5) Additional HW Drivers
2. These Layers support the Linux Image Build for a specific HW platform or board.
3. These Layers use the following convention:
	=> meta-bsp-root-name
	---> The 'bsp-root-name' is the Machine or the platform name prepended with the 'meta-' prefix.
4. It is not a strict requirement but a good practice to follow the naming convention.
	1) This practice is well established in the Yocto Project.
	2) A lot of scripts and tools in the development Environment assume this convention.
5. The link to the Layers in the Yocto Project Git repositories is: https://git.yoctoproject.org/
	1) There is a list of repositories under the title 'Yocto Metadata Layers'.
	2) The Layers that are no longer supported as a part of the Yocto Project appear under 'Yocto Metadata Layer Archive'.
6. Each repository is a BSP Layer supported by the Yocto Project like 'meta-raspberrypi', 'meta-intel', 'meta-arago' etc.
7. These Layers can be cloned using the URLs that appear under 'Clone' provided by opening the respective repository link.
	=> git clone git://git.yoctoproject.org/meta-raspberrypi
8. In Poky repository, the 'meta-yocto-bsp' Layer is a BSP Layer. It maintains several reference BSPs for:
	1) ARM based BeagleBone Boards
	2) Generic ARM 64-bit Architecture
	3) Generic Intel 32-bit Architecture
	4) Generic Intel 64-bit Architecture
9. The BSP Layer can be dependent on additional Layers to be functional. These dependencies need to be specified in the documentation for the Layer.

Directory Structure for BSP Layer:
**********************************
1. The BSP Layer directory 'meta-bsp-root-name' is the Root directory of that Layer.
2. This directory is added to the 'BBLAYERS' variable in the 'conf/bblayers.conf' file in the Build directory.
	1) The order in which the Layers are mentioned in the 'BBLAYERS' variable and the 'BBFILE_PRIORITY' variable for the Layer affect the Build.
	2) The Build system picks up the Layers specified in the 'BBLAYERS' variable in a top-down approach.
	3) If multiple Layers (having the same priority) define a particular Configuration, the Build system uses the last Layer searched through the variable.
	4) The Layer with higher priority i.e. a larger value for 'BBFILE_PRIORITY' variable takes precedence over the Layer with lower priority i.e. a smaller value.
3. After the Layer is added, ther Build system is able to recognize the Layer and integrate it into the Build.
4. The typical directory structure is:
	=> meta-my-board/
	   ├── conf/
	   │   ├── bitbake.conf
	   │   ├── layer.conf
	   │   ├── machine/
	   │   │   ├── my-board.conf
	   │   ├── recipes-bsp/
	   │   ├── recipes-kernel/
	   │   ├── recipes-linux/
	   │   ├── recipes-bootloader/
	   ├── meta-layer/
	   │   ├── recipes-core/
	   │   │   ├── images/
	   │   │   │   ├── my-board-image.bb
	   │   ├── recipes-bsp/
	   │   │   ├── uboot/
	   │   │   │   ├── uboot-my-board/
	   │   │   │   │   ├── uboot-my-board_%.bb
	   │   │   │   │   └── defconfig
	   │   ├── recipes-kernel/
	   │   │   ├── linux/
	   │   │   │   ├── kernel-my-board/
	   │   │   │   │   ├── kernel-my-board_%.bb
	   │   │   │  │   └── defconfig
	   │   ├── recipes-bootloader/
	   │   │   ├── uboot/
	   │   │   │   ├── uboot-my-board/
	   │   │   │   │   ├── uboot-my-board_%.bb
	   │   │   │   │   └── defconfig
	   ├── meta-my-board/
	   │   ├── classes/
	   │   │   ├── my-board.bbclass
	   │   ├── files/
	   │   │   ├── uboot/
	   │   │   ├── kernel/
	   │   │   └── other-resources/
	   │   ├── patches/
	   │   │   ├── kernel-patches/
	   │   │   ├── bootloader-patches/
	   │   │   └── other-patches/
	   │   ├── README.md
	   └── scripts/

Container Layers:
*****************
1. There are certain Layers that function as a top Layer to hold the other BSP sub-Layers. These type of top Layers are called as Container Layers.
2. It typically refers to a single Git check-out that contains multiple sub-Layers which can be included independently in the 'conf/bblayers.conf' file.
3. If the individual sub-Layer has to be included in the Build, the names of the actual sub-Layer inside the Container Layer must be listed in the 'BBLAYERS' variable.
4. The top Layer might not be an actual Layer itself. However, the sub-Layers are actual Layers themselves.
	1) In such cases, the top Layer would never be explicitly included in the 'conf/bblayers.conf' file. Only the sub-Layers can be included in the 'conf/bblayers.conf' file.
	2) The OpenEmbedded Build Project provides a Container Layer i.e. the 'meta-openembedded' Layer (which is not an actual Layer) that contains many 'meta-*' sub-Layers.
5. The top Layer as well as the sub-Layers can be actual Layers individually.
	1) In such cases, both the top Layer and the sub-Layers can be explicitly included in the 'conf/bblayers.conf' file.
	2) The OpenEmbedded Build Project provides a Container Layer i.e. the 'meta-security' Layer (which is an actual Layer) that contains many 'meta-*' sub-Layers.
