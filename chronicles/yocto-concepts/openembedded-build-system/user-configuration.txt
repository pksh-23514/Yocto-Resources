User Configuration:
===================
1. The User Configuration provides the Build properties and helps to define the Build.
2. The expanded view of the 'User Configuration' in the 'OpenEmbedded Build Workflow' is as follows:

      Source Directory
---------------------------
|	poky		  |		User Configuration
| bitbake		  |		   |	    ^
| build	------------------|------	   |	    |
| documentation		  |	|	   |	    |
| meta			  |	V	   V	    |
| meta-poky		  |  ----------------------------
| meta-selftest		  |  | 	conf			| -----> bitbake <target>
| meta-skeleton		  |  | 	bblayers.conf		|		|
| meta-yocto-bsp	  |  | 	local.conf		|		|
| scripts		  |  | 	site.conf		|		|
|	oe-setup-builddir |  | 	auto.conf		|		V
|	...		  |  ----------------------------	-----------------
|			  |		^			| BitBake Build |
|			  |		|			-----------------
|			  |	 --------------------
| oe-init-build-env <-----|----> | oe-init-build-env|
---------------------------	 --------------------

3. The sourcing of the 'oe-init-build-env' Build Environment script creates the Build directory 'build/' (if not present already).
4. This 'build' directory is used by the BitBake for all the works related to the Build process.
5. The 'meta-poky' directory contains a 'conf' directory that has the sample Configuration files used by the 'oe-init-build-env' script.
6. These sample files are used as a basis for the actual Configuration files created (if not present already) during the time of 'oe-init-build-env' sourcing.
7. The Configuration files are stored in the 'build/conf' directory. They are used by the BitBake in the Build process.
8. Depending on the location from where the 'oe-init-build-env' script is sourced, some different sub-scripts are called to setup the Build directory.
9. The 'oe-setup-builddir' script setup the Build directory and seeds the directory with the Configuration files appropriate for the Yocto Project development Environment.
10. The '$TEMPLATECONF' Environment variable is used by the 'oe-setup-builddir' script to find the location of the sample Configuration files and copy to the Build directory.

local.conf Configuration:
*************************
1. The 'local.conf' file provides the definition of many basic variables that define the Build Environment.
2. The sample Configuration file of 'local.conf' is present in the 'meta-poky/conf' directory under the name of 'local.conf.sample'.
3. The variables provided are:
	1) Target Machine selection controlled by the 'MACHINE' variable.
	2) Download directory controller by the 'DL_DIR' variable.
	3) Shared-State directory controlled by the 'SSTATE_DIR' variable.
	4) Build Output controlled by the 'TMPDIR' variable.
	5) Distribution Policy controlled by the 'DISTRO' variable.
	6) Package format controlled by the 'PACKAGE_CLASSES' variable.
	7) SDK Target Architecture controlled by the 'SDKMACHINE' variable.
	8) Extra-Image Packages controlled by the 'EXTRA_IMAGE_FEATURES' variable.
4. The Configurations set in the 'local.conf' can also be provided by the 'site.conf' and the 'auto.conf' Configuration files.

bblayers.conf Configuration:
****************************
1. The 'bblayers.conf' file provides the infromation to the BitBake about the Layers to be used in the Build process.
2. The sample Configuration file of 'bblayers.conf' is present in the 'meta-poky/conf' directory under the name of 'bblayers.conf.sample'.
3. By default, the Layers listed in this file include the Layers minimally needed by the Build system.
4. Any custom Layer created or cloned in the Build system must be added to the file to be included in the Build process.
5. The 'BBLAYERS' variable in this file contains the directory path of all the Layers to be used in the Build process.
6. The BitBake parses each 'conf/layer.conf' file of the Layers present in the 'BBLAYERS' variable in a top-down approach of their occurence in the variable.

site.conf Configuration:
************************
1. The 'site.conf' Configuration file is used to set the Environment variables and Build options that are applicable to a particular or multiple Build Environment(s).
2. The sample Configuration file of 'site.conf' is present in the 'meta-poky/conf' directory under the name of 'site.conf.sample'.
3. It is not created while sourcing the 'oe-init-build-env' Build Environment script. It has to be created manually.
4. It allows customizing and overriding the default settings globally without modifying the core Yocto system files.
5. It is very useful to configure the Environment for multiple Build directories.
	1) The shared settings across all the Builds can be centralized by putting them in this file.
	2) A good example can be the Package format that is used across the Build directories (build-x86, build-arm etc.)
		=> # Add the common Configuration options to site.conf.
		=> TMPDIR = "${TOPDIR}/tmp"
		=> DL_DIR ?= "/home/user/yocto/downloads"
		=> SSTATE_DIR ?= "/home/user/yocto/sstate-cache"
		=> PACKAGE_CLASSES ?= "package_ipk"
	3) Link the 'site.conf' into each of the Build directories:
		=> ln -s ~/yocto/configs/site.conf ~/yocto/build-x86/conf/site.conf
		=> ln -s ~/yocto/configs/site.conf ~/yocto/build-arm/conf/site.conf
	4) The above linking step can be even put into the Build Environment script for automatic creation of the 'site.conf' file while sourcing.
6. This file can be used to set or override the variables like directory paths, website features, proxy settings or custom Build options applicable to all the Machine Builds.

auto.conf Configuration:
************************
1. The 'auto.conf' Configuration file is usually created and written by an autobuilder (like Jenkins). It is an optional Configuration file and Layer-specific.
2. It is not created while sourcing the 'oe-init-build-env' Build Environment script.
3. It is very useful in automating the Build or setting up CI/CD pipelines.
4. It allows adding and overriding the default Configuration values present in the 'local.conf' or 'bblayers.conf' files.
5. It is not meant to be edited manually, especially in the automated Build Environment.
6. It can also be used to enforce certain Build settings when a particular Layer is included in the Build process.
