BitBake Tool:
=============
1. The OpenEmbedded Build system uses the BitBake to produce the Images and SDKs.
2. It consists of several functional areas throughout the Build process.
	1) Source fetching
	2) Patching
	3) Configuration, Compilation and Staging
	4) Package splitting
	5) Image generation
	6) SDK generation
	7) Stamp files
	8) SetScene Tasks and Shared-State

Source Fetching:
****************
1. In this stage of the Build, the Recipes are fetched and unpacked.
2. The expanded view of the 'Source Fetching' in the 'OpenEmbedded Build Workflow' is as follows:

     Upstream Project Releases		Local Projects		  SCMs
----------------------------------- ----------------------- ----------------
|  busybox			  | |  Local Source Tree  | |  meta-qt5	   |
|  busybox-1.35.0.tar.bz2	  | |  <directory>	  | |    Git	   |
|				  | |      <file>	  | |		   |
|  <recipe>			  | |      <directory>	  | |  opkg	   |
|  Tarball / ZIP / Archive Files  | |          <file>	  | |  Subversion  |
----------------------------------- ----------------------- ----------------
		|				|		   |
Source		|				|		   |
Materials	|				|		   |
		V				V		   V
---------------------------------------------------------------------------------------------------------------------------
|															  |
| BitBake									Build Directory				  |
|		Source Fetching							----------------------------------------- |
| 		-------------							| tmp <---------------------------------|-|--- TMPDIR
| 		|	    |							|   work				| |
| 		| do_fetch  |							|     ${PACKAGE_ARCH}-poky-${TARGET_OS} | |
|		|	    |-------------------------------------------------->|       ${PN}				| |
|		| do_unpack |							|         ${PV}	<-----------------------|-|--- WORKDIR
|		|	    |							|           sources-unpack <------------|-|--- UNPACKDIR
|		-------------							|           ${BP} <---------------------|-|--- S
|										|     ${MACHINE_ARCH}-poky-${TARGET_OS}	| |
|										|       ${PN}				| |
|										|         ${PV}	<-----------------------|-|--- WORKDIR
|										|           sources-unpack <------------|-|--- UNPACKDIR
|										|           ${BP} <---------------------|-|--- S
|										----------------------------------------- |
---------------------------------------------------------------------------------------------------------------------------

3. The 'do_fetch' and 'do_unpack' Tasks are involved in this stage of the Build.
4. Each Recipe has an area in the Build directory where the unpacked source code resides.
5. The Build directory hierarchy has the following variables:
	1) TMPDIR => It is defined as 'build/tmp' inside the Build directory.
	2) PACKAGE_ARCH => It defines the Architecture of the resulting Package or Packages. The variable value varies based on the eventual destination of the Package.
	3) TARGET_OS => It is the OS of the Target system. A typical value can be 'linux' (like qemux86-poky-linux).
	4) PN => In context to the Inputs, the variable represents the name of the Recipe used to Build the Package.
	5) WORKDIR => It is defined as the directory used to Build the Recipe. It is specific to the Recipe being Built and the system for which the Recipe is getting Built.
	6) PV => It is defined as the version of the Recipe being used to Build the Package.
	7) UNPACKDIR => It is defined as the directory containing the unpacked source files for a Recipe. The default value is 'sources-unpack' and it is an internal variable.
	8) S => It is defined as the directory containing the source code after unpacking and patching. The default value is 'BP'.
	9) BP => It is defined as the base Recipe name and version without any special Recipe name suffix. The default value is '${BPN}-${PV}'.
	10) BPN => It is defined as the name of the Recipe being used to Build the Package. It is a version of the 'PN' variable without the common prefixes or suffixes.
	11) MACHINE_ARCH => If the Recipe's Output Package is Built for a specific Target Machine rather than the Architecture, it is set as the 'PACKAGE_ARCH' variable value.
6. For the local files present in the 'SRC_URI' variable, the Build system takes a checksum of the file for the Recipe and inserts into the signature of the 'do_fetch' Task.
7. If the local file is modified, the 'do_fetch' Task and all the other dependent Tasks are executed again.

Patching:
*********
1. After the source is fetched and unpacked, the Patches are applied to the source files by the BitBake (if any).
2. The expanded view of the 'Patching' in the 'OpenEmbedded Build Workflow' is as follows:

     Upstream Project Releases		Local Projects		  SCMs
----------------------------------- ----------------------- ----------------
|  busybox			  | |  Local Source Tree  | |  meta-qt5	   |
|  busybox-1.35.0.tar.bz2	  | |  <directory>	  | |    Git	   |
|				  | |      <file>	  | |		   |
|  <recipe>			  | |      <directory>	  | |  opkg	   |
|  Tarball / ZIP / Archive Files  | |          <file>	  | |  Subversion  |
----------------------------------- ----------------------- ----------------
		|				|		   |
Source		|				|		   |
Materials	|				|		   |
		V				V		   V
---------------------------------------------------------------------------------------------------------------------------
|															  |
| BitBake									Build Directory				  |
|		Patch Application						----------------------------------------- |
| 		------------							| tmp <---------------------------------|-|--- TMPDIR
| 		|	   |							|   work				| |
| 		| do_patch |							|     ${PACKAGE_ARCH}-poky-${TARGET_OS} | |
|		|	   |--------------------------------------------------->|       ${PN}				| |
|		------------							|         ${PV}	<-----------------------|-|--- WORKDIR
|		     |								|           sources-unpack <------------|-|--- UNPACKDIR
|		     V								|           ${BP} <---------------------|-|--- S
|		-----------------    ---------------				|     ${MACHINE_ARCH}-poky-${TARGET_OS}	| |
|		| Recipes	|    | Patch Files |				|       ${PN}				| |
|		|		|--->|		   |--------------------------->|         ${PV}	<-----------------------|-|--- WORKDIR
|		| SRC_URI = " \	|    | *.patch	   |				|           sources-unpack <------------|-|--- UNPACKDIR
|		|   <patch>"	|    | *.diff      |				|           ${BP} <---------------------|-|--- S
|		-----------------    ---------------				----------------------------------------- |
---------------------------------------------------------------------------------------------------------------------------

3. The 'do_patch' Task utilizes the 'SRC_URI' and 'FILESPATH' variables to locate the applicable Patch files.
4. The default processing for the Patches assume the files have either '.patch' or '.diff' types or even their compressed versions (diff.gz, patch.bz2 etc) as well.
5. The 'FILESPATH' variable defines the default set of directories that the Build system uses to search for the Patch files.
6. The BitBake automatically finds and applies the Patches for each Recipe in the sequential order the Patch files are located in the 'SRC_URI' variable.
	=> SRC_URI += "file://mypatch1.patch \
	               file://mypatch2.patch"
	---> The BitBake applies the Patches in the order: mypatch1.patch -> mypatch2.patch
	---> If the multiple Patches are applied to the same file, the order can affect the final behavior of the Build system.
7. It uses the '-p1' option to apply the Patches i.e. one directory level in the path is stripped off.
8. If there are multiple directory levels to be stripped off, the number of levels using the 'striplevel' option should be specified in the 'SRC_URI' entry for the Patch.
	=> SRC_URI += "file://mypatch1.patch;striplevel=1"
	---> It indicates the number of directory levels to be stripped off i.e. '1' from the file paths inside the Patch.
9. If the Patch needs to be applied in a specific sub-directory that is not specified in the Patch file, the 'patchdir' option must be used in the 'SRC_URI' entry.
	=> SRC_URI += "file://mypatch1.patch;patchdir=subdir/path"
	---> It indicates that the 'mypatch1.patch' is to be applied inside the 'subdir/path' directory of the source tree.
10. Once the Patches are found, they are applied to the Recipe's source files that are located in the directory pointed by the 'S' variable.

Configuration, Compilation and Staging:
***************************************
1. After the source code is Patched, the BitBake executes the Tasks that Configure and Compile the source code. After Compilation, the files are staged for Packaging.
2. The expanded view of the 'Configuration, Compilation and Staging' in the 'OpenEmbedded Build Workflow' is as follows:

     Upstream Project Releases		Local Projects		  SCMs
----------------------------------- ----------------------- ----------------
|  busybox			  | |  Local Source Tree  | |  meta-qt5	   |
|  busybox-1.35.0.tar.bz2	  | |  <directory>	  | |    Git	   |
|				  | |      <file>	  | |		   |
|  <recipe>			  | |      <directory>	  | |  opkg	   |
|  Tarball / ZIP / Archive Files  | |          <file>	  | |  Subversion  |
----------------------------------- ----------------------- ----------------
		|				|		   |
Source		|				|		   |
Materials	|				|		   |
		V				V		   V
---------------------------------------------------------------------------------------------------------------------------
|															  |
| BitBake									Build Directory				  |
|		Configure / Compile						----------------------------------------- |
|		Autoreconf as needed						| tmp <---------------------------------|-|--- TMPDIR
|		--------------------						|   work				| |
|		| ---------------- |			B			|     ${PACKAGE_ARCH}-poky-${TARGET_OS} | |
|	------->| | do_configure | |<-------------------------------------------|       ${PN}				| |
|   	|	| ---------------- |<-----------|				|         ${PV} <-----------------------|-|--- WORKDIR
|	|	|		   |		|	S			|           sources-unpack <------------|-|--- UNPACKDIR
|	|	| ---------------- |		|-------------------------------|           ${BP} <---------------------|-|--- S / B
|	|	| |		 | |		|				|           image <---------------------|-|--- D
|	|	| |  do_compile  | |<-----------|	B			|             ${PN}			| |
|	|	| |		 | |<------------------------------------------>|           recipe-sysroot		| |
|	|	| ---------------- |						|           recipe-sysroot-native	| |
|	|	|		   |						|     ${MACHINE_ARCH}-poky-${TARGET_OS}	| |
|	|	| ---------------- |			B			|       ${PN}				| |
|	|	| |		 | |<-------------------------------------------|         ${PV}	<-----------------------|-|--- WORKDIR
|	|	| |  do_install	 | |			D			|           sources-unpack <------------|-|--- UNPACKDIR
|	|	| |		 | |------------------------------------------->|           ${BP} <---------------------|-|--- S / B
|	|	| ---------------- |						|           image <---------------------|-|--- D
|	|	--------------------						|             ${PN}			| |
|	|									|           recipe-sysroot		| |
|	EXTRA_OECONF = "<extra configure script options>"			|           recipe-sysroot-native	| |
|										----------------------------------------- |
---------------------------------------------------------------------------------------------------------------------------

3. The 'do_prepare_recipe_sysroot' Task sets up 2 'sysroots' in 'WORKDIR'.
	1) During the Packaging phase, the 'sysroots' contain the contents of the 'do_populate_sysroot' Tasks of the Recipes on which the current Recipe depends.
	2) The 'recipe-sysroot' is the Target 'sysroot' of the Recipes.
	3) The 'recipe-sysroot-native' is the Native 'sysroot' of the Recipes.
4. The 'do_configure' Task Configures the sources by enabling or disabling any Build-time and Configuration options for the SW being Built.
	1) The Configurations can come from the Recipes themselves as well as from the inherited Classes.
	2) Additionally, the SW itself might Configure itself depending on the Target for which it is being Built.
	3) The Configurations handled by this Task are specific to the Configurations for the source code being Built by the Recipes.
	4) If the Recipes are usign 'autoclass*' Class, there can be additional Configurations provided by the 'EXTRA_OECONF' or 'PACKAGECONFIG_CONFARGS' variables.
5. The 'do_compile' Task is used to Compile the sources after the 'do_configure' Task has been satisfied.
	1) The Compilation occurs in the directory pointed to by the 'B' variable. By default, it is the same directory as pointed to by the 'S' variable.
6. The 'do_install' Task is executed after the Compilation of the sources completes.
	1) This Task copies the files from the 'B' directory and places them in a holding area pointed to by the 'D' variable.
	2) The Packaging occurs later using the files from this holding directory.

Package Splitting:
******************
1. After the source code is Configured, Compiled and staged in the holding area, the Build system analyzes the resulting Output files and splits them into Packages.
2. The expanded view of the 'Package Splitting' in the 'OpenEmbedded Build Workflow' is as follows:

     Upstream Project Releases		Local Projects		  SCMs
----------------------------------- ----------------------- ----------------	-------------------------
|  busybox			  | |  Local Source Tree  | |  meta-qt5	   |	|			|
|  busybox-1.35.0.tar.bz2	  | |  <directory>	  | |    Git	   |	|			|
|				  | |      <file>	  | |		   |	|     Package Feeds	|
|  <recipe>			  | |      <directory>	  | |  opkg	   |	|			|
|  Tarball / ZIP / Archive Files  | |          <file>	  | |  Subversion  |	|			|
----------------------------------- ----------------------- ----------------	-------------------------
		|				|		   |		^	|
Source		|				|		   |		|	|
Materials	|				|	-----------|-------------	|
		V				V	|	   V			V
---------------------------------------------------------------------------------------------------------------------------
|							|								  |
| BitBake						|			Build Directory				  |
|		-------------------------		|			----------------------------------------- |
|		|---------------------- |		|			| tmp <---------------------------------|-|--- TMPDIR
|		||do_package_write_rpm|	|-------------->|			|   work				| |
|		||		      |	|		|			|     ${PACKAGE_ARCH}-poky-${TARGET_OS} | |
|		||do_package_write_deb|	|-------------->|			|       ${PN}				| |
|		||		      |	|		|			|         ${PV} <-----------------------|-|--- WORKDIR
|		||do_package_write_ipk| |-------------->|			|           sources-unpack <------------|-|--- UNPACKDIR
|		|----------------------	|					|           ${BP} <---------------------|-|--- S / B
|		|			|					|           image <---------------------|-|--- D
|		|		FILES	|					|           package <-------------------|-|--- PKGD
|		|		  |	|					|           pkgdata <-------------------|-|--- PKGDESTWORK
|		|	      PACKAGES	|					|           packages-split <------------|-|--- PKGDEST
|		|		  |	|					|             ${PN}			| |
|		|		  V	|					|           recipe-sysroot		| |
|		| ---------------------	|					|           recipe-sysroot-native	| |
|		| |    do_package     |	|		D			|     ${MACHINE_ARCH}-poky-${TARGET_OS}	| |
|		| |  do_packagedata   |	|<--------------------------------------|       ${PN}				| |
|		| |do_populate_sysroot| |					|         ${PV} <-----------------------|-|--- WORKDIR
|		| |     PKGD --------||-|---|					|           sources-unpack <------------|-|--- UNPACKDIR
|		| |  PKGDESTWORK ----||-|---|					|           ${BP} <---------------------|-|--- S / B
|		| |    PKGDEST ------||-|---|					|           image <---------------------|-|--- D
|		| |  STAGING_DIR ----||-|---|---------------------------------->|           package <-------------------|-|--- PKGD
|		| | STAGING_DIR_HOST ||-|---|					|           pkgdata <-------------------|-|--- PKGDESTWORK
|		| |STAGING_DIR_NATIVE||-|---|					|           packages-split <------------|-|--- PKGDEST
|		| |STAGING_DIR_TARGET||-|---|					|             ${PN}                     | |
|		| --------------------- |					|           recipe-sysroot              | |
|		-------------------------					|           recipe-sysroot-native       | |
|										----------------------------------------- |
---------------------------------------------------------------------------------------------------------------------------

3. The 'do_package' and 'do_packagedata' Tasks are used to analyze the files in the 'D' directory and split them into sets based on the available Packages and files.
4. These Tasks serve the following purposes:
	1) The Packages are split into logical sub-Packages based on the Packaging rules.
	2) The Debug Symbols are split out into separate Packages for the use in development and Debug Environments.
	3) The analysis of Shared library dependencies between the Packages.
	4) To ensure the proper handling of Package relationships.
5. The 'do_packagedata' Task creates the Package Meta-data based on the analysis so that the Build system can generate the final Packages.
6. The 'do_populate_sysroot' Task stages (copies) a set of files installed during the 'do_install' Task into the appropriate 'sysroots'.
7. The Build directory hierarchy uses the following variables:
	1) PKGD => The destination directory for the files to be Packaged before they are split into the individual Packages. The default value is '${WORKDIR}/package'.
	2) PKGDESTWORK => The temporary work directory used by the 'do_package' Task to save the Package Meta-data. The default value is '${WORKDIR}/pkgdata'.
	3) PKGDEST => The parent directory for the files to be Packaged after they are split into the individual Packages. The default value is '${WORKDIR}/packages-split'.
