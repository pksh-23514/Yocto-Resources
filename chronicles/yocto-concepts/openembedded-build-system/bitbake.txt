BitBake Tool:
=============
1. The OpenEmbedded Build system uses the BitBake to produce the Images and SDKs.
2. It consists of several functional areas throughout the Build process.
	1) Source fetching
	2) Patching
	3) Configuration, Compilation and Staging
	4) Package splitting
	5) Image generation
	6) SDK generation
	7) Stamp files
	8) SetScene Tasks and Shared-State

Source Fetching:
****************
1. In this stage of the Build, the Recipes are fetched and unpacked.
2. The expanded view of the 'Source Fetching' in the 'OpenEmbedded Build Workflow' is as follows:

     Upstream Project Releases		Local Projects		  SCMs
----------------------------------- ----------------------- ----------------
|  busybox			  | |  Local Source Tree  | |  meta-qt5	   |
|  busybox-1.35.0.tar.bz2	  | |  <directory>	  | |    Git	   |
|				  | |      <file>	  | |		   |
|  <recipe>			  | |      <directory>	  | |  opkg	   |
|  Tarball / ZIP / Archive Files  | |          <file>	  | |  Subversion  |
----------------------------------- ----------------------- ----------------
		|				|		   |
Source		|				|		   |
Materials	|				|		   |
		V				V		   V
---------------------------------------------------------------------------------------------------------------------------
|															  |
| BitBake									Build Directory				  |
|		Source Fetching							----------------------------------------- |
| 		-------------							| tmp <---------------------------------|-|--- TMPDIR
| 		|	    |							|   work				| |
| 		| do_fetch  |							|     ${PACKAGE_ARCH}-poky-${TARGET_OS} | |
|		|	    |-------------------------------------------------->|       ${PN}				| |
|		| do_unpack |							|         ${PV}	<-----------------------|-|--- WORKDIR
|		|	    |							|           sources-unpack <------------|-|--- UNPACKDIR
|		-------------							|           ${BP} <---------------------|-|--- S
|										|     ${MACHINE_ARCH}-poky-${TARGET_OS}	| |
|										|       ${PN}				| |
|										|         ${PV}	<-----------------------|-|--- WORKDIR
|										|           sources-unpack <------------|-|--- UNPACKDIR
|										|           ${BP} <---------------------|-|--- S
|										----------------------------------------- |
---------------------------------------------------------------------------------------------------------------------------

3. The 'do_fetch' and 'do_unpack' Tasks are involved in this stage of the Build.
4. Each Recipe has an area in the Build directory where the unpacked source code resides.
5. The Build directory hierarchy has the following variables:
	1) TMPDIR => It is defined as 'build/tmp' inside the Build directory.
	2) PACKAGE_ARCH => It defines the Architecture of the resulting Package or Packages. The variable value varies based on the eventual destination of the Package.
	3) TARGET_OS => It is the OS of the Target system. A typical value can be 'linux' (like qemux86-poky-linux).
	4) PN => In context to the Inputs, the variable represents the name of the Recipe used to Build the Package.
	5) WORKDIR => It is defined as the directory used to Build the Recipe. It is specific to the Recipe being Built and the system for which the Recipe is getting Built.
	6) PV => It is defined as the version of the Recipe being used to Build the Package.
	7) UNPACKDIR => It is defined as the directory containing the unpacked source files for a Recipe. The default value is 'sources-unpack' and it is an internal variable.
	8) S => It is defined as the directory containing the source code after unpacking and patching. The default value is 'BP'.
	9) BP => It is defined as the base Recipe name and version without any special Recipe name suffix. The default value is '${BPN}-${PV}'.
	10) BPN => It is defined as the name of the Recipe being used to Build the Package. It is a version of the 'PN' variable without the common prefixes or suffixes.
	11) MACHINE_ARCH => If the Recipe's Output Package is Built for a specific Target Machine rather than the Architecture, it is set as the 'PACKAGE_ARCH' variable value.
6. For the local files present in the 'SRC_URI' variable, the Build system takes a checksum of the file for the Recipe and inserts into the signature of the 'do_fetch' Task.
7. If the local file is modified, the 'do_fetch' Task and all the other dependent Tasks are executed again.

Patching:
*********
1. After the source is fetched and unpacked, the Patches are applied to the source files by the BitBake (if any).
2. The expanded view of the 'Patching' in the 'OpenEmbedded Build Workflow' is as follows:

     Upstream Project Releases		Local Projects		  SCMs
----------------------------------- ----------------------- ----------------
|  busybox			  | |  Local Source Tree  | |  meta-qt5	   |
|  busybox-1.35.0.tar.bz2	  | |  <directory>	  | |    Git	   |
|				  | |      <file>	  | |		   |
|  <recipe>			  | |      <directory>	  | |  opkg	   |
|  Tarball / ZIP / Archive Files  | |          <file>	  | |  Subversion  |
----------------------------------- ----------------------- ----------------
		|				|		   |
Source		|				|		   |
Materials	|				|		   |
		V				V		   V
---------------------------------------------------------------------------------------------------------------------------
|															  |
| BitBake									Build Directory				  |
|		Patch Application						----------------------------------------- |
| 		------------							| tmp <---------------------------------|-|--- TMPDIR
| 		|	   |							|   work				| |
| 		| do_patch |							|     ${PACKAGE_ARCH}-poky-${TARGET_OS} | |
|		|	   |--------------------------------------------------->|       ${PN}				| |
|		------------							|         ${PV}	<-----------------------|-|--- WORKDIR
|		     |								|           sources-unpack <------------|-|--- UNPACKDIR
|		     V								|           ${BP} <---------------------|-|--- S
|		-----------------    ---------------				|     ${MACHINE_ARCH}-poky-${TARGET_OS}	| |
|		| Recipes	|    | Patch Files |				|       ${PN}				| |
|		|		|--->|		   |--------------------------->|         ${PV}	<-----------------------|-|--- WORKDIR
|		| SRC_URI = " \	|    | *.patch	   |				|           sources-unpack <------------|-|--- UNPACKDIR
|		|   <patch>"	|    | *.diff      |				|           ${BP} <---------------------|-|--- S
|		-----------------    ---------------				----------------------------------------- |
---------------------------------------------------------------------------------------------------------------------------

3. The 'do_patch' Task utilizes the 'SRC_URI' and 'FILESPATH' variables to locate the applicable Patch files.
4. The default processing for the Patches assume the files have either '.patch' or '.diff' types or even their compressed versions (diff.gz, patch.bz2 etc) as well.
5. The 'FILESPATH' variable defines the default set of directories that the Build system uses to search for the Patch files.
6. The BitBake automatically finds and applies the Patches for each Recipe in the sequential order the Patch files are located in the 'SRC_URI' variable.
	=> SRC_URI += "file://mypatch1.patch \
	               file://mypatch2.patch"
	---> The BitBake applies the Patches in the order: mypatch1.patch -> mypatch2.patch
	---> If the multiple Patches are applied to the same file, the order can affect the final behavior of the Build system.
7. It uses the '-p1' option to apply the Patches i.e. one directory level in the path is stripped off.
8. If there are multiple directory levels to be stripped off, the number of levels using the 'striplevel' option should be specified in the 'SRC_URI' entry for the Patch.
	=> SRC_URI += "file://mypatch1.patch;striplevel=1"
	---> It indicates the number of directory levels to be stripped off i.e. '1' from the file paths inside the Patch.
9. If the Patch needs to be applied in a specific sub-directory that is not specified in the Patch file, the 'patchdir' option must be used in the 'SRC_URI' entry.
	=> SRC_URI += "file://mypatch1.patch;patchdir=subdir/path"
	---> It indicates that the 'mypatch1.patch' is to be applied inside the 'subdir/path' directory of the source tree.
10. Once the Patches are found, they are applied to the Recipe's source files that are located in the directory pointed by the 'S' variable.

Configuration, Compilation and Staging:
***************************************
1. After the source code is Patched, the BitBake executes the Tasks that Configure and Compile the source code. After Compilation, the files are staged for Packaging.
2. The expanded view of the 'Configuration, Compilation and Staging' in the 'OpenEmbedded Build Workflow' is as follows:

     Upstream Project Releases		Local Projects		  SCMs
----------------------------------- ----------------------- ----------------
|  busybox			  | |  Local Source Tree  | |  meta-qt5	   |
|  busybox-1.35.0.tar.bz2	  | |  <directory>	  | |    Git	   |
|				  | |      <file>	  | |		   |
|  <recipe>			  | |      <directory>	  | |  opkg	   |
|  Tarball / ZIP / Archive Files  | |          <file>	  | |  Subversion  |
----------------------------------- ----------------------- ----------------
		|				|		   |
Source		|				|		   |
Materials	|				|		   |
		V				V		   V
---------------------------------------------------------------------------------------------------------------------------
|															  |
| BitBake									Build Directory				  |
|		Configure / Compile						----------------------------------------- |
|		Autoreconf as needed						| tmp <---------------------------------|-|--- TMPDIR
|		--------------------						|   work				| |
|		| ---------------- |			B			|     ${PACKAGE_ARCH}-poky-${TARGET_OS} | |
|	------->| | do_configure | |<-------------------------------------------|       ${PN}				| |
|   	|	| ---------------- |<-----------|				|         ${PV} <-----------------------|-|--- WORKDIR
|	|	|		   |		|	S			|           sources-unpack <------------|-|--- UNPACKDIR
|	|	| ---------------- |		|-------------------------------|           ${BP} <---------------------|-|--- S / B
|	|	| |		 | |		|				|           image <---------------------|-|--- D
|	|	| |  do_compile  | |<-----------|	B			|             ${PN}			| |
|	|	| |		 | |<------------------------------------------>|           recipe-sysroot		| |
|	|	| ---------------- |						|           recipe-sysroot-native	| |
|	|	|		   |						|     ${MACHINE_ARCH}-poky-${TARGET_OS}	| |
|	|	| ---------------- |			B			|       ${PN}				| |
|	|	| |		 | |<-------------------------------------------|         ${PV}	<-----------------------|-|--- WORKDIR
|	|	| |  do_install	 | |			D			|           sources-unpack <------------|-|--- UNPACKDIR
|	|	| |		 | |------------------------------------------->|           ${BP} <---------------------|-|--- S / B
|	|	| ---------------- |						|           image <---------------------|-|--- D
|	|	--------------------						|             ${PN}			| |
|	|									|           recipe-sysroot		| |
|	EXTRA_OECONF = "<extra configure script options>"			|           recipe-sysroot-native	| |
|										----------------------------------------- |
---------------------------------------------------------------------------------------------------------------------------

3. The 'do_prepare_recipe_sysroot' Task sets up 2 'sysroots' in 'WORKDIR'.
	1) During the Packaging phase, the 'sysroots' contain the contents of the 'do_populate_sysroot' Tasks of the Recipes on which the current Recipe depends.
	2) The 'recipe-sysroot' is the Target 'sysroot' of the Recipes.
	3) The 'recipe-sysroot-native' is the Native 'sysroot' of the Recipes.
4. The 'do_configure' Task Configures the sources by enabling or disabling any Build-time and Configuration options for the SW being Built.
	1) The Configurations can come from the Recipes themselves as well as from the inherited Classes.
	2) Additionally, the SW itself might Configure itself depending on the Target for which it is being Built.
	3) The Configurations handled by this Task are specific to the Configurations for the source code being Built by the Recipes.
	4) If the Recipes are usign 'autoclass*' Class, there can be additional Configurations provided by the 'EXTRA_OECONF' or 'PACKAGECONFIG_CONFARGS' variables.
5. The 'do_compile' Task is used to Compile the sources after the 'do_configure' Task has been satisfied.
	1) The Compilation occurs in the directory pointed to by the 'B' variable. By default, it is the same directory as pointed to by the 'S' variable.
6. The 'do_install' Task is executed after the Compilation of the sources completes.
	1) This Task copies the files from the 'B' directory and places them in a holding area pointed to by the 'D' variable.
	2) The Packaging occurs later using the files from this holding directory.

Package Splitting:
******************
1. After the source code is Configured, Compiled and staged in the holding area, the Build system analyzes the resulting Output files and splits them into Packages.
2. The expanded view of the 'Package Splitting' in the 'OpenEmbedded Build Workflow' is as follows:

     Upstream Project Releases		Local Projects		  SCMs
----------------------------------- ----------------------- ----------------	-------------------------
|  busybox			  | |  Local Source Tree  | |  meta-qt5	   |	|			|
|  busybox-1.35.0.tar.bz2	  | |  <directory>	  | |    Git	   |	|			|
|				  | |      <file>	  | |		   |	|     Package Feeds	|
|  <recipe>			  | |      <directory>	  | |  opkg	   |	|			|
|  Tarball / ZIP / Archive Files  | |          <file>	  | |  Subversion  |	|			|
----------------------------------- ----------------------- ----------------	-------------------------
		|				|		   |		^	|
Source		|				|		   |		|	|
Materials	|				|	-----------|-------------	|
		V				V	|	   V			V
---------------------------------------------------------------------------------------------------------------------------
|							|								  |
| BitBake						|			Build Directory				  |
|		-------------------------		|			----------------------------------------- |
|		|---------------------- |		|			| tmp <---------------------------------|-|--- TMPDIR
|		||do_package_write_rpm|	|-------------->|			|   work				| |
|		||		      |	|		|			|     ${PACKAGE_ARCH}-poky-${TARGET_OS} | |
|		||do_package_write_deb|	|-------------->|			|       ${PN}				| |
|		||		      |	|		|			|         ${PV} <-----------------------|-|--- WORKDIR
|		||do_package_write_ipk| |-------------->|			|           sources-unpack <------------|-|--- UNPACKDIR
|		|----------------------	|					|           ${BP} <---------------------|-|--- S / B
|		|			|					|           image <---------------------|-|--- D
|		|		FILES	|					|           package <-------------------|-|--- PKGD
|		|		  |	|					|           pkgdata <-------------------|-|--- PKGDESTWORK
|		|	      PACKAGES	|					|           packages-split <------------|-|--- PKGDEST
|		|		  |	|					|             ${PN}			| |
|		|		  V	|					|           recipe-sysroot		| |
|		| ---------------------	|					|           recipe-sysroot-native	| |
|		| |    do_package     |	|		D			|     ${MACHINE_ARCH}-poky-${TARGET_OS}	| |
|		| |  do_packagedata   |	|<--------------------------------------|       ${PN}				| |
|		| |do_populate_sysroot| |					|         ${PV} <-----------------------|-|--- WORKDIR
|		| |     PKGD --------||-|---|					|           sources-unpack <------------|-|--- UNPACKDIR
|		| |  PKGDESTWORK ----||-|---|					|           ${BP} <---------------------|-|--- S / B
|		| |    PKGDEST ------||-|---|					|           image <---------------------|-|--- D
|		| |  STAGING_DIR ----||-|---|---------------------------------->|           package <-------------------|-|--- PKGD
|		| | STAGING_DIR_HOST ||-|---|					|           pkgdata <-------------------|-|--- PKGDESTWORK
|		| |STAGING_DIR_NATIVE||-|---|					|           packages-split <------------|-|--- PKGDEST
|		| |STAGING_DIR_TARGET||-|---|					|             ${PN}                     | |
|		| --------------------- |					|           recipe-sysroot              | |
|		-------------------------					|           recipe-sysroot-native       | |
|										----------------------------------------- |
---------------------------------------------------------------------------------------------------------------------------

3. The 'do_package' and 'do_packagedata' Tasks are used to analyze the files in the 'D' directory and split them into sets based on the available Packages and files.
4. These Tasks serve the following purposes:
	1) The Packages are split into logical sub-Packages based on the Packaging rules.
	2) The Debug Symbols are split out into separate Packages for the use in development and Debug Environments.
	3) The analysis of Shared library dependencies between the Packages.
	4) To ensure the proper handling of Package relationships.
5. The 'do_packagedata' Task creates the Package Meta-data based on the analysis so that the Build system can generate the final Packages.
6. The 'do_populate_sysroot' Task stages (copies) a set of files installed during the 'do_install' Task into the appropriate 'sysroots'.
7. The Build directory hierarchy uses the following variables:
	1) PKGD => The destination directory for the files to be Packaged before they are split into the individual Packages. The default value is '${WORKDIR}/package'.
	2) PKGDESTWORK => The temporary work directory used by the 'do_package' Task to save the Package Meta-data. The default value is '${WORKDIR}/pkgdata'.
	3) PKGDEST => The parent directory for the files to be Packaged after they are split into the individual Packages. The default value is '${WORKDIR}/packages-split'.
	4) PKGDATA_DIR => The Shared global-state directory holds the the Package Meta-data generated during the Packaging process.
		---> During the Packaging process for the Recipes, the Meta-data is copied from the 'PKGDESTWORK' to the 'PKGDATA_DIR' area where it becomes available globally.
		---> The default value is '${STAGING_DIR_HOST}/pkgdata'. It is used during the 'do_packagedata' Task.
	5) STAGING_DIR_HOST =>
	6) STAGING_DIR_NATIVE =>
	7) STAGING_DIR_TARGET =>
8. The Packages for the Recipes are listed in the 'PACKAGES' variable. The default value of the variable is defined in the 'meta/conf/bitbake.conf' file.
	=> PACKAGES = "${PN}-src ${PN}-dbg ${PN}-staticdev ${PN}-dev ${PN}-doc ${PN}-locale ${PACKAGE_BEFORE_PN} ${PN}"
9. Each of these Packages contains a default list of files listed in the 'FILES' variable. The default value of the variable is defined in the 'meta/conf/bitbake.conf' file.
	=> FILES:${PN} = "${bindir}/* ${sbindir}/* ${libexecdir}/* ${libdir}/lib*${SOLIBS} \
	               ${sysconfdir} ${sharedstatedir} ${localstatedir} \
	               ${base_bindir}/* ${base_sbindir}/* \
	               ${base_libdir}/*${SOLIBS} \
	               ${base_prefix}/lib/udev ${prefix}/lib/udev \
	               ${base_libdir}/udev ${libdir}/udev \
	               ${datadir}/${BPN} ${libdir}/${BPN}/* \
	               ${datadir}/pixmaps ${datadir}/applications \
	               ${datadir}/idl ${datadir}/omf ${datadir}/sounds \
	               ${libdir}/bonobo/servers"
	=> FILES:${PN}-bin = "${bindir}/* ${sbindir}/*"
	=> FILES:${PN}-doc = "${docdir} ${mandir} ${infodir} ${datadir}/gtk-doc \
	               ${datadir}/gnome/help"
	=> FILES:${PN}-dev = "${includedir} ${FILES_SOLIBSDEV} ${libdir}/*.la \
	                   ${libdir}/*.o ${libdir}/pkgconfig ${datadir}/pkgconfig \
	                   ${datadir}/aclocal ${base_libdir}/*.o \
	                   ${libdir}/${BPN}/*.la ${base_libdir}/*.la \
	                   ${libdir}/cmake ${datadir}/cmake"
	=> FILES:${PN}-staticdev = "${libdir}/*.a ${base_libdir}/*.a ${libdir}/${BPN}/*.a"
	=> FILES:${PN}-dbg = "/usr/lib/debug /usr/lib/debug-static /usr/src/debug"
	=> FILES:${PN}-src = ""
	=> FILES:${PN}-locale = "${datadir}/locale"
10. The above mentioned paths in the variables are Absolute paths from the point of view of the RootFS on the Target.
	1) They must not make any reference to the 'D' variable or any 'WORKDIR' related variable.
11. A given file can only ever be in one Package.
	1) By iterating from the leftmost to the rightmost Package in the 'PACKAGES' variable, each file in the 'FILES' variable matching a particular Package is included in it.
	2) The 'oe-pkgdata-util' command utility is used to find the Package that installs a particular file.
12. The custom Package variant of the '${PN}' Recipe can be added in the following ways:
	1) It can be appended to the 'PACKAGE_BEFORE_PN' variable.
		=> PACKAGE_BEFORE_PN += "${PN}-extra"
	2) It can be prepended to the 'PACKAGES' variable directly.
		=> PACKAGES =+ "${PN}-extra"
13. Based on the type of Packages being created (RPM, DEB or IPK), the corresponding 'do_package_write_*' Task creates the actual Packages and places them in the Package Feeds.
	1) The directory for the Package Feeds area is '${TMPDIR}/deploy'.

Image Generation:
*****************
1. After the Packages are split and stored in the Package Feeds area, the Build system uses the BitBake to generate the RootFS Image.
2. The expanded view of the 'Image Generation' in the 'OpenEmbedded Build Workflow' is as follows:

---------------------- -------------------- ----------
   Upstream Project       Local Projects       SCMs
---------------------- -------------------- ----------
Source Mirrors
------------------------------------------------------
		|
		V		-----------------------------------------------------------------
-------------------------	|								|
|			|	|			  Package Feeds				|
|	BitBake		|	|								|
|			|	-----------------------------------------------------------------
|			|		|
|			---------------------------------------------------------------------------------
|					|								|
|					|			Image Generation			|
|					|			---------------------------------	|
|					|-IMAGE_INSTALL	--------|---->----------------		|	|
|					|-IMAGE_FEATURES -------|---->|		     |		|	|
|					|-PACKAGE_CLASSES ------|---->|	   Package   |----------|---	|
|					|-IMAGE_LINGUAS	--------|---->| Installation |		|  |	|
|					|-PACKAGE_EXCLUDE ------|---->|		     |		|  |	|
|								|     ----------------		|  V	|
|								|				| PACKAGE_INSTALL
|								|     ----------------		|  |	|
|								|     |		     |		|  |	|
|					  IMAGE_ROOTFS ---------|---->| File System  |<---------|---	|
|								|     |   Creation   |		|	|
|								|     |		     |		|	|
|								|     ----------------		|	|
|								|				|	|
|								|     ----------------		|	|
|			ROOTFS_POSTPROCESS_COMMAND -------------|->|  |	    Post     |		|	|
|								|  |  |  Processing  |		|	|
|					  IMAGE_MANIFEST -------|->|  |	------------ |		|	|
|								|  |->| Optimization |		|	|
|								|  |  |		     |		|	|
|								|  |->|   Manifest   |		|	|
|								|     |  Generation  |		|	|
|								|     ----------------		|	|
|								|     ----------------		|	|
|				IMAGE_PREPROCESS_COMMAND -------|---->|   do_image   |		|	|
|								|     ----------------		|	|
|								|     ----------------		|	|
|								|     |  do_image_*  |		|	|
|					  IMAGE_FSTYPES --------|---->|		     |		|	|
|								|     |  Compression |		|	|
|								|     ----------------		|	|
|								|     -------------------	|	|
|				IMAGE_POSTPROCESS_COMMAND ------|---->|do_image_complete|	|	|
|								|     -------------------	|	|
|								---------------------------------	|
|										|			|
---------------------------------------------------------------------------------------------------------
										|
										V
								------------------------------------------
								|		Images			 |
								|tmp/deploy/images/${PACKAGE_ARCH}/images|
								------------------------------------------

3. The 'do_rootfs' Task is used to create the RootFS (the files and the directory structures) for an Image.
4. The Build directory hierarchy uses the following variables:
	1) IMAGE_INSTALL => It is used by the Recipes to specify the Packages to be installed into the Image from the Package Feeds using the 'image' Class file.
	2) PACKAGES_EXCLUDE => It is used to specify the Packages that should not be installed into the Image.
	3) IMAGE_FEATURES => It specifies the primary list of features to be included into the Image. These features are mostly mapped to the Packages to be installed.
	4) PACKAGE_CLASSES => It specifies the Package manager to be used for the Packaging. It helps to determine the location of the Packages within the Package Feeds.
	5) IMAGE_LINGUAS => It provides the list of locales for which additional Packages are to be installed into the Image.
	6) PACKAGE_INSTALL => It provides the final list of Packages passed to the Package manager for the installation into the Image.
	7) IMAGE_ROOTFS => It points to the directory of the RootFS under construction during the 'do_rootfs' Task. It is not configurable and should not be changed.
5. With the 'IMAGE_ROOTFS' variable pointing to the RootFS location and the 'PACKAGE_INSTALL' variable providing the final list of Packages, the RootFS is generated.
6. The Package installation is under the control of the Package manager regardless of whether or not the Package management is enabled for the Target.
	1) .ipk => The Package manager is 'opkg'. This is used as default for Poky.
	2) .deb => The Package manager is 'dpkg' or 'apt'.
	3) .rpm => The Package manager is 'dnf', 'smart' or 'rpm'.
7. If the Package management is enabled for the Target, after the RootFS is generated, the Package manager's data files are retained into the RootFS.
8. If the Package management is disabled for the Target, after the RootFS is generated, the Package manager's data files are deleted from the RootFS.
9. As a part of the final stage of the Package installation on the Target, many Packages include post-install scripts.
	1) The post-install scripts run immediately after the Package installation on the Target or during the Image creation when the Package is included in the Image.
	2) If these scripts can be run during the Image Build, they are executed on the Host Machine immediately.
	3) If these scripts require some Run-time dependencies and fail to run on the Build Host, their execution are deferred until the first Boot of the Target.
	4) If the RootFS on the Target is Read-only, then all these scripts execution must succeed on the Build Host during the Package installation i.e Image creation.
10. The final stage of the 'do_rootfs' Task handles the post-processing that includes the creation of a 'manifest' file for the Image and performing certain optimizations.
	1) The 'manifest' file has an extension of '.manifest' and it resides in the same directory as the RootFS Image.
	2) The 'manifest' file is used to list out all the installed Packages, line-by-line.
	3) The 'manifest' file is useful for the 'testimage' Class to determine if there is a requirement for specific tests.
	4) The optimization process that runs across the Image is aimed at optimizing the final Image.
	5) The optimization process includes 'mklibs' to reduce the size of the libraries by removing the unused Symbols. It is pretty helpful for Images with size restrictions.
	6) The optimization process includes certain other post-processing commands defined by the 'ROOTFS_POSTPROCESS_COMMAND' variable for additional tweaking in the Image.
11. After the RootFS is Built, the 'do_image' Task begins the processing on the Image.
	1) The Build system runs the pre-processing commands as defined by the 'IMAGE_PREPROCESS_COMMAND' variable.
	2) This variable lists the functions to be called by the Build system before creating the final Image Output files.
12. The Build system dynamically creates the 'do_image_*' Tasks as required based on the Image type as specified in the 'IMAGE_FSTYPES' variable.
	1) The process transforms everything into an Image file or a set of Image files.
	2) It can compress the RootFS Image to reduce the overall size of the Image.
	3) The formats used for the RootFS depends on the 'IMAGE_FSTYPES' variable value. The compression depends on whether the chosen format supports compression or not.
	4) Therefore, the Task created dynamically for the Image 'type' specified in the 'IMAGE_FSTYPES' variable is:
		---> do_image_type
13. The final Task involved in the Image creation is the 'do_image_complete' Task.
	1) The Build system runs the post-processing commands as defined by the 'IMAGE_POSTPROCESS_COMMAND' variable.
	2) This variable lists the functions to be called by the Build system after creating the final Image Output files.
14. The entire Image generation process is run under Pseudo.
	1) It is a tool that is used during the Build process to simulate Root privileges.
	2) It allows the Build system to assign the correct file ownerships and permissions in the RootFS Image without needing the actual Root access on the Host Machine.
