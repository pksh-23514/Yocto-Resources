Customizing Images using local.conf:
====================================
1. The easiest way to customize the Image is to update the 'build/conf/local.conf' file.
2. The Package can be added using the 'IMAGE_INSTALL' variable with the ':append' operation.
	=> IMAGE_INSTALL:append = " package-name"
3. The ':append' operation is guaranteed. Therefore, it is preferred to use it over the '+=' operator to avoid ordering issues.
4. The limitations of using this method are:
	1) It is a local change and not as flexible as creating the custom Image Recipe.
	2) The changes made in the 'local.conf' file would affect all the Image Builds which is not suitable.
5. It is mostly used for testing purposes only as the changes are temporary and local.

Customizing Images using IMAGE_FEATURES and EXTRA_IMAGE_FEATURES:
=================================================================
1. The use of the 'IMAGE_FEATURES' and 'EXTRA_IMAGE_FEATURES' variables can be used to customize the Image.
2. The 'meta/classes/image.bbclass' file lists the available values in 'IMAGE_FEATURES' variable. The variable mostly maps to the Package groups or the Configurations.
3. The Build system uses the 'IMAGE_FEATURES' variable to automatically add the Packages or Configurations to the 'IMAGE_INSTALL' variable.
4. The 'EXTRA_IMAGE_FEATURES' variable is added to the 'IMAGE_FEATURES' variable within the 'meta/conf/bitbake.conf' file.
5. The use of a separate 'EXTRA_IMAGE_FEATURES' variable avoids the overwriting of the features in the Image Recipe.
6. The best practice is to use the 'IMAGE_FEATURES' variable in a Recipe file and the 'EXTRA_IMAGE_FEATURES' variable in the 'build/conf/local.conf' file.

Customizing Images using Custom Image Recipes:
==============================================
1. The custom Image Recipe file can either be written from scratch or using the base Recipe of an existing Image and appending the additional Packages.

Writing Custom Image Recipes from Scratch:
******************************************
1. The 'inherit' statement can be used to include the 'meta/classes/core-image.bbclass' file. This Class file contains the basic functions required for all the Images.
	=> inherit core-image
	---> The 'meta/classes/core-image.bbclass' file internally inherits the 'image.bbclass' file.
2. The Packages to be included in the Image are specified using the 'IMAGE_INSTALL' variable.
	=> IMAGE_INSTALL = "package-name ..."
3. The Package names used must be the OpenEmbedded Package names and not the Debian Package names.
	=> IMAGE_INSTALL = "glibc-dev" (instead of 'libc6-dev')
4. It is a best practice to include a summary, License and any other necessary descriptions for the custom Image Recipe.

Writing Custom Image Recipes by Extending the Base Recipe of Existing Image:
****************************************************************************
1. If there is an existing Image Recipe file which fits the requirements with certain adjustments, it could be used directly in the custom Image Recipe file.
2. The 'require' statement can be used to include the existing Image. This method is convinient to use and maintain the Image.
	=> require path/image-name.bb
3. The path is a Relative directory path to the current Layer or the Recipe file unless an Absolute directory path is used.
4. The Packages to be included in the Image are appended to the 'IMAGE_INSTALL' variable as it already has some Packages in the existing Image Recipe file.
	=> IMAGE_INSTALL:append = " package-name ..."
5. It is necessary to ensure the Package getting added to the Recipe is actually available in the Layers.
6. It can be done using the 'bitbake -s' command or 'oe-pkgdata-util list-pkgs' command.
	=> prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -s | grep strace
	   strace                                               :5.16-r0
	   strace-native                                        :5.16-r0
	---> It confirms the 'strace' Recipe exists but the exact name to include this Package is not confirmed.
	=> prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ oe-pkgdata-util list-pkgs | grep strace
	   strace
	   strace-dbg
	   strace-dev
	   strace-doc
	   strace-ptest
	   strace-src
	---> There are multiple Package names as one Recipe can create multiple Packages. These exact Package names can be installed using the 'IMAGE_INSTALL' variable.

Customizing Images using Custom Package Groups:
===============================================
1. For the complex custom Image Builds, the best way to customize the Images is to create custom Package group Recipe files.
2. The 'meta/classes/packagegroup.bbclass' file is always included in the Package group Recipe file.
3. The appropriate default values and complementary Packages for each specified Package are added in the Recipe file using the 'inherit' statement.
	=> vi packagegroup-custom.bb
	=> inherit packagegroup
	---> This statement should be present certainly before the 'PACKAGES' variable.
4. The 'PACKAGES' variable in the Recipe file lists the Package group Packages to be produced as Output.
5. For each Package specified in the 'PACKAGES' variable, the dependencies and the recommended Packages can be specified using the 'RDEPENDS' and 'RRECOMMENDS' entries.
	=> PACKAGES = " \
	       ${PN}-package-suffix-name
		   ..."
	=> RDEPENDS:${PN}-package-suffix-name = " \
	        package-name
			..."
	=> RRECOMMENDS:${PN}-package-suffix-name = " \
	        package-name
			..."
	---> The 'packagegroup-custom-package-suffix-name' is created with their dependencies and their recommended Package dependencies as listed.
6. The Package group Recipe must be listed in the 'IMAGE_INSTALL' variable to be used in the Build.
	=> IMAGE_INSTALL += "packagegroup-custom"
