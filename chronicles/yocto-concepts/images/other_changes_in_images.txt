IMAGE_LINGUAS:
==============
1. The 'IMAGE_LINGUAS' variable specifies the locales to be installed on the Image during the RootFS generation process.
2. It ensures that any locale Packages that correspond to the Packages already selected for installation into the Image are installed.
	=> IMAGE_LINGUAS = "pt-br de-de"
	---> The Build system ensures any Brazilian Portuguese and German locale files that correspond to the Packages in the Image are installed.
	---> This includes all the locale Packages i.e. '*-locale-pt-br' and '*-locale-de-de' as well as '*-locale-pt' and '*-locale-de'.
3. The locales available in the Image can be verified by executing the following command on the Target HW:
	=> locale -a

IMAGE_FSTYPES:
==============
1. The 'IMAGE_FSTYPES' variable specifies the format used during the Build for generating the RootFS.
2. If more than one format is specified in the variable, the Build would generate one Image per format specified.
	=> IMAGE_FSTYPES = "ext3 tar.bz2"
	---> The Build system generates the RootFS in each of the above formats listed in the variable:
	---> core-image-minimal-qemuarm-<buildhash>.rootfs.ext4
	---> core-image-minimal-qemuarm-<buildhash>.rootfs.tar.bz2
3. The complete list of supported Image formats are listed in the 'IMAGE_TYPES' variable.
	=> bitbake -e core-image-minimal | grep ^IMAGE_TYPES=
	   IMAGE_TYPES="     jffs2 jffs2.sum     cramfs     ext2 ext2.gz ext2.bz2 ext2.lzma     ext3 ext3.gz     ext4 ext4.gz     btrfs
		squashfs squashfs-xz squashfs-lzo squashfs-lz4 squashfs-zst     ubi ubifs multiubi     tar tar.gz tar.bz2 tar.xz tar.lz4 tar.zst
		cpio cpio.gz cpio.xz cpio.lzma cpio.lz4 cpio.zst     wic wic.gz wic.bz2 wic.lzma wic.zst     container     f2fs     erofs erofs-lz4 erofs-lz4hc "
4. The Image format instructions are handled by the 'meta/classes/image_types*.bbclass' files.
5. If an Image recipe uses the 'inherit image' statement and the 'IMAGE_FSTYPES' variable is also set inside the Recipe, the variable must be set prior to the statement.
6. This variable cannot be updated using ':append' or ':prepend' operations.
7. The Build system processes this variable in a way that the '+=' operator must be used to add one or more options to the 'IMAGE_FSTYPES' variable.

IMAGE_NAME:
===========
1. The 'IMAGE_NAME' variable specifies the name for the Output Image binaries (minus the extension for the file).
2. The default value for the variable is:
	=> IMAGE_NAME ?= "${IMAGE_LINK_NAME}${IMAGE_VERSION_SUFFIX}"
	=> IMAGE_LINK_NAME ?= "${IMAGE_BASENAME}${IMAGE_MACHINE_SUFFIX}"
	=> IMAGE_MACHINE_SUFFIX ??= "-${MACHINE}"
	=> IMAGE_VERSION_SUFFIX ?= "-${DATETIME}"
3. A custom Image name can be provided by assigning the value to this variable.
	=> IMAGE_NAME = "custom_image"
	---> After the Build is successful with the custom Image name, the Output binaries are as follows:
	---> custom_image.rootfs.ext4
	---> custom_image.rootfs.tar.bz2

IMAGE_MANIFEST:
===============
1. The 'IMAGE_MANIFEST' variable specifies the 'manifest' file for the Image.
2. This file lists all the installed Packages on the Image.
3. The 'rootfs-postcommands' Class file defines the 'manifest' file. The default value for the variable is:
	=> IMAGE_MANIFEST ="${IMGDEPLOYDIR}/${IMAGE_NAME}${IMAGE_NAME_SUFFIX}.manifest"
	---> It is present at the 'tmp/deploy/images/qemuarm/' directory path for the Image based on ARM Architecture.
	---> core-image-minimal-qemuarm-<buildhash>.rootfs.manifest
4. The file contains the Package information as follows:
	=> packagename		packagearch		version
