Embedded Linux:
===============
1. The Embedded Linux is a customized version of the Linux OS optimized to run on an Embedded system.
2. The Embedded systems are Devices with certain specific functionalities and have resource constraints.
3. The major elements of Embedded Linux are:
	1) Toolchain
	2) Bootloader
	3) Linux Kernel
	4) Root Filesystem (RootFS)
	5) Embedded Applications specific to the system

Toolchain:
**********
1. It consists of the Cross-Compilation tools for building the binaries for a Target Architecture.
2. They provide the necessary Compilers, Assemblers, Linkers, Debuggers and other utilities for the Cross-Compilation.

Bootloader:
***********
1. It initializes the HW, loads the Kernel into the Memory and passes the control to the Kernel.
2. It provides a basic Shell, Environment variables and has the ability to load the Kernel and the Device Tree from the Flash Memory or Network.
3. The most popular Bootloader is the u-Boot.

Kernel:
*******
1. It is the core of the OS that manages the system resources and provides and interface to interact with the HW.
2. The Linux Kernel is customized for the Embedded systems with the features included on-demand.

RootFS:
*******
1. It consits of the essential virtual Filesystems (/proc, /sys) and directories (/bin, /sbin, /lib, /etc, /dev, /usr).
2. The programs and libraries are available once the Kernel is up in the Memory.
3. The RootFS can be made Read-only for security purposes.

Basic Terminologies of the Embedded Linux:
==========================================

Host Machine:
*************
1. It refers to the development PC that contains the Toolchain for development of the Embedded Linux.
2. It is used for development, compilation, translation, linking, testing, debugging and optimization of the SW to be executed on the Target Embedded system.

Target System:
**************
1. It refers to the actual Embedded HW that will execute the SW developed on the Host Machine.
2. After the development, the code is Cross-Compiled and Cross-Assembled and Linked to the Target Processor Instruction Set.
3. All the other elements of the Embedded Linux except the Toolchain are present on the Target system.

Cross-Compiler:
***************
1. It is a Compiler that runs on the Host system and generates the executable code for the Target system having a different Architecture.
2. Since there is a constraint on the Embedded systems resources, all the Cross-Compilation is performed on the Host Machine.
3. The example of a Cross-Compiler for a Target Architecture is:
	=> ARM (32-bit) with hard-float (ARM Cortex-A7 with Vector Floating Point) ---> arm-linux-gnueabihf-gcc
4. The usage of a Cross-Compiler on the Host Machine is:
	=> arm-linux-gnueabihf-gcc -o hello_world hello_world.c

Cross-Assembler:
****************
1. It is an Assembler that runs on the Host system and generates the machine code for the Target system having a different Architecture.
2. They are very useful in scenarios where precise timing and instruction flow (like the Bootloader or Start-up code) is required.
3. The example of a Cross-Assembler for a Target Architecture is:
	=> ARM (32-bit) with hard-float (ARM Cortex-A7 with Vector Floating Point) ---> arm-linux-gnueabihf-as
4. The usage of a Cross-Assembler on the Host Machine is:
	=> arm-linux-gnueabihf-as -o startup.o startup.s

Linker:
*******
1. It is used to transform Object files (the Compiled code) into a final executable like a Kernel, Bootloader or an Application binary.
2. It performs the following functions:
	1) Resolves the Symbol references between the Object files.
	2) Arranges the code into various Sections like '.text', '.data', '.bss' etc.
	3) Places these Sections into their respective Memory Address according to the Linker script (.ld).
	4) Produces a final binary such as an ELF or a raw Bin file.
3. The example of a Linker for a Target Architecture is:
	=> ARM (32-bit) with hard-float (ARM Cortex-A7 with Vector Floating Point) ---> arm-linux-gnueabihf-ld
4. The usage of a Linker on the Host Machine is:
	=> arm-linux-gnueabihf-ld -T linker.ld -o output.elf startup.o hello_world.o
