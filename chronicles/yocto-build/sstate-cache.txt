build/sstate-cache:
===================
1. In the Build Environment, the 'sstate-cache' directory is used to store the Shared-State Cache that are a critical part of the Yocto’s Build performance.
2. The Shared-State Cache is a system that Caches the results of the Build Tasks so that they can be reused in the future Builds.
3. Each Task in the Yocto Project (like do_compile, do_install etc.) have Inputs (like Meta-data, Configurations etc.) to the BitBake.
4. If the Inputs haven't changed since the last Build, the Outputs of these Inputs should remain the same as well. This logic is used by the Shared-State Cache.
5. The Shared-State Cache stores the Outputs of the Build Tasks as 'Sstate Object files' so that they can be restored directly instead of recomputing.
6. Instead of again Compiling or processing every task, the Build checks this directory for a previously completed version of the Task with matching Inputs exists or not.
7. These Cached Outputs are stored as 'tar.gz' or '.tar.zst' file.
8. It dramatically reduces the Build time by avoiding the Build of the unchanged Tasks. It also prevents the repeated downloads and processing of the same sources again.
9. It supports the reproducibility (Build consistency across Environments) and the Build Distribution across Machines/Users.

Shared-State Cache Workflow:
****************************
1. Hash generation => For each Task, the BitBake generates a hash based on all the Inputs that affect the Task Output.
2. Cache check => Before executing a Task, the BitBake checks if a matching Sstate Object exists using the hash value for the Task.
3. Restore or Run => If the hash is found, the Task is restored from the Cache. Otherwise, the Task is executed and it's Output is stored in the 'sstate-cache' directory for use.
4. Storage format => Each Cached Output is stored in the 'sstate-cache' directory as '.tar*' Archive file for usage in the future Builds.

Cached Output Details:
**********************
1. The Output of the 'do_compile' Tasks.
2. The Output of the 'do_configure' Tasks.
3. The Output of the 'do_install' and 'do_populate_sysroot' Tasks.
4. The Output of the 'do_package' and 'do_package_write_*' Tasks.
5. The Output of the 'do_populate_sdk', 'do_rootfs' and 'do_image' Tasks. However, they can be Cached only if properly configured although some are less portable.
6. The Output of the 'do_fetch' and 'do_patch' Tasks are either not Cached or partially Cached.
7. Each Build Task that can be reused safely is eligible to be Cached.

Organizing the Cached Outputs:
******************************
1. Each Cached Output is stored as '.tar*' Archive file. It contains the files needed to restore the results of a specific Task.
2. Each Archive file is uniquely identified and organized in a specific way.
3. Internally the file names are often very complex. However, the naming convention of the Archive files is generally as follows:
	=> <...>:<hash>:<task>.tar.*
	---> 'hash' is based on the Task Inputs (Recipe name, version, Meta-data, Environment, Configurations etc.)
	---> 'task' is the Task name (do_compile, do_install, do_configure etc.)
	---> An example name can be as: b9f235bc8b292c5d30dcf418da5128ed:do_compile.tgz
4. This ensures that if anything changes on the Inputs that affects the Output, the hash changes and a new Sstate Object is generated.
5. To avoid putting all the Cache files into a single directory, the Build splits them into sub-directories by the starting 2-character hash prefixes.
	=> b9/
	   ├── f2/
	   │   └── b9f235bc8b292c5d30dcf418da5128ed:do_compile.tgz
6. This structure allows efficient file access and scalability for large Projects.

Cleaning or Managing Shared-State Cache:
****************************************
1. The Sstate Object for a particular Recipe can be removed by the following command:
	=> bitbake -c cleansstate <recipe>
2. The complete 'sstate-cache' directory can be removed manually by the following command:
	=> rm -rf sstate-cache/*

Signature Information:
**********************
1. The '.siginfo' file stores the signature hash and Meta-data about how the hash was computed.
2. It contains the information used by the BitBake to compare the current Task signature with the previously Cached signature.
3. It helps to determine whether a Cached Task Output in 'sstate-cache' directory is valid and reusable.

Cached Outputs Restoration:
***************************
1. When the subsequent Build is executed after a successful Build, the Sstate Cached files are used by the BitBake.
2. The BitBake computes the expected hash for each Task.
3. The computed hash is looked in the 'sstate-cache' directory path.
4. If the hash is found, it extracts the Tarball and restores the Task Output instead of Compiling and processing it again.
