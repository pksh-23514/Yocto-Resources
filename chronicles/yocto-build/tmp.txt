build/tmp:
==========
1. In the Build Environment, the 'tmp' directory is used as the main working and Output directory by the BitBake.
2. This is the location to store all the Build artifacts, the intermediate files and the final Image binaries during the Build process.
3. It is important for incremental Builds by speeding up the Build process. If a part of the Project changes, the Build system only Builds the specific changes in the Recipes.
4. The Build process ensures the integrity of the source by separation of the original Inputs (Recipes) and the generated Output files by keeping them in this directory.
5. This makes the version control simpler without the need of messy '.gitignore' files.
6. Most of the Disk space usage in a Yocto Build comes from this directory.

tmp/buildstats:
***************
1. The 'tmp/buildstats' directory is used to store the Build statistics as generated by the 'buildstats' Class.
2. The 'buildstats' Class records the performance statistics about each Task executed during the Build.
3. It helps with:
	1) The analysis of the Build time per Task.
	2) The analysis of the HW resources used during the Build.
	3) The analysis of the performance bottlenecks in the Build.
4. The collection of the Build statistics is enabled by default through the 'USER_CLASSES' variable set in the 'conf/local/conf' file.
	=> USER_CLASSES ?= "buildstats"
5. However, this can also be enabled for the Build in the 'conf/local.conf' file.
	=> INHERIT += "buildstats"
6. The organization of the Build statistics in the directory is as follows:
	=> buildstats/
	   ├── 20250613083329/
	   │   ├── automake-native-1.16.5-r0/
	   │   ├── busybox-1.35.0-r0/
	   │   │   ├── do_configure
	   │   │   ├── do_compile
	   │   │   ├── do_install
	   │   │   └── ...
	   │   ├── linux-yocto-5.15.184+gitAUTONIC+9c/
	   │   ├── core-image-minimal-1.0-r0/
	   │   └── build_stats
	   │   ...
	---> The '20250613083329' value is time-stamped sub-directory per Build.
	---> Inside each time-stamped directory are the sub-directories containing the performance of the Tasks executed per Recipe.

tmp/cache:
**********
1. When the BitBake parses the Meta-data for a Build, it caches the results in the 'tmp/cache' directory to speed up the future Builds.
2. These results are stored on a per 'MACHINE' basis in this directory.
3. The general parsing of all the Meta-data files can be very time consuming. Therefore, the BitBake caches the parsed Meta-data.
4. During the subsequent Builds, the BitBake checks each file to see if there is any modification present for the file.
5. This file changes can be detected by:
	1) The file modification time (mtime).
	2) The hashing of the file contents.
	3) The changes in dependencies for the file.
6. The caching allows the BitBake to skip the parsing of the files that are unchanged as compared to the previous Builds.
7. The BitBake simply uses the parsed result stored in this directory.
8. Only if there is any changes detected for the file, it is parsed again during the Build. Thus, the Build performance is improved drastically.
9. However, the caching has a certain implication as well.
	1) If some Recipes are being modified but the BitBake is not seeming to notice the changes during the Build.
	2) Then removing the 'tmp/cache' directory can help restoring the normal workflow of the BitBake.
	3) Although, it will slow down the Build as all the files are now needed to be parsed by the BitBake.

tmp/deploy:
***********
1. The 'tmp/deploy' directory contains the final Output produced by the OpenEmbedded Build process.
2. This is the location where the Output files are placed after they are successfully Built and Packaged.
3. It is essential for the deployment, flashing or further sharing of the Build Output.
4. The 'DEPLOY_DIR' variable points to this directory in the Build.

tmp/work:
*********

tmp/work-shared:
****************
