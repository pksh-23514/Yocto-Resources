tmp/deploy:
===========
1. The 'tmp/deploy' directory contains the final Output produced by the OpenEmbedded Build process.
2. It is essential for the deployment, flashing or further sharing of the Build Output.
3. The 'DEPLOY_DIR' variable controls the directory path.
4. The following sub-directories are present in this directory:
	1) deb
	2) images
	3) ipk
	4) licenses
	5) rpm

deploy/deb:
***********
1. The 'deploy/deb' directory is used to contain all the '.deb' (Debian) Packages produced during the Build process.
2. These Packages are organized into the sub-directories that categorize these Packages based on the various Architectures.
3. This method of Package organization makes it easy to locate and deploy the relevant Packages.
4. The directory structure is as follows:
	=> deb/
	   ├── all/
	   │   └── <noarch-packages>.deb
	   ├── armv7at2hf-neon/
	   │   └── <armv7at2hf-packages>.deb
	   ├── beaglebone/
	   │   └── <beaglebone-packages>.deb
	   ├── <other-archs>/
	   │   └── <arch-specific-packages>.deb
	   └── qemuarm/
	       └── <qemuarm-packages>.deb
	---> all => Architecture-independent Debian Packages.
	---> armv7at2hf => Architecture-specific Debian Packages.
	---> beaglebone => Machine-specific Debian Packages.
	---> qemuarm => QEMU Target-specific Debian Packages.

deploy/images:
**************
1. The 'deploy/images' directory is used to contain the Output files i.e. generated artifacts of the Build process for a specific Machine.
2. These Output files are critical while preparing to deploy or flash the Built Image on the HW.
3. The type of files that are stored here are:
	1) Bootloader binaries (u-boot.img, MLO, SPL, u-boot-spl.bin etc.)
	2) Kernel Images (zImage, uImage, Image, vmlinux etc.)
	3) Device Tree Blobs (.dtb)
	4) RootFS (core-image-minimal-<machine>-<buildhash>.rootfs.ext4, core-image-minimal-<machine>-<buildhash>.rootfs.tar.bz2 etc.)
	5) Complete Flashable Images (.sdimg, .wic, .img etc.)
	6) Symlinks (core-image-minimal-<machine>.ext4 -> core-image-minimal-<machine>-<buildhash>.rootfs.ext4)
4. It is important to be careful while deleting the files in this directory.
	1) The old or unused full Images or temporary artifacts can be deleted safely.
	2) However, the Bootloader, Kernel or Device Tree files must be deleted with caution.
	3) The reason being these files could be pre-Built or copied manually and not generated automatically during the Build.
5. If these files can be re-Built, it can be done through the 'bitbake' command.
	=> bitbake -c clean virtual/kernel
	=> bitbake virtual/kernel
6. The directory structure is as follows:
	=> images/
	   ├── beaglebone/
	   │   └── ...
	   ├── qemuarm/
	   │   └── ...
	   ├── <other-machines>/
	   │   └── ...
	   └── qemux86-64/
	       └── ...

deploy/ipk:
***********
1. The 'deploy/ipk' directory is used to contain all the '.ipk' (Itsy) Packages produced during the Build process.
2. These Packages are organized into the sub-directories that categorize these Packages based on the various Architectures.
3. This method of Package organization makes it easy to locate and deploy the relevant Packages.
4. The directory structure is as follows:
	=> ipk/
	   ├── all/
	   │   └── <noarch-packages>.ipk
	   ├── armv7at2hf-neon/
	   │   └── <armv7at2hf-packages>.ipk
	   ├── beaglebone/
	   │   └── <beaglebone-packages>.ipk
	   ├── <other-archs>/
	   │   └── <arch-specific-packages>.ipk
	   └── qemuarm/
	       └── <qemuarm-packages>.ipk
	---> all => Architecture-independent Itsy Packages.
	---> armv7at2hf => Architecture-specific Itsy Packages.
	---> beaglebone => Machine-specific Itsy Packages.
	---> qemuarm => QEMU Target-specific Itsy Packages.

deploy/licenses:
****************
1. The 'deploy/licenses' directory is used to contain all the License information on per Package basis.
2. It organizes and preserves the License compliance information for all the Built Packages.
3. Each of the sub-directory corresponds to a Package containing the following files:
	1) 'COPYING', 'LICENSE' or similarly named License files.
	2) The files containing a prefix 'generic_' containing the similar License details as the received License file from the sources used to Build the Package.
	3) A file with the name 'recipeinfo' containing the Meta-data about the origin of the License file for the Package.
4. The directory structure is as follows:
	=> licenses/
	   ├── bash/
	   │   └── ...
	   ├── dropbear/
	   │   └── ...
	   ├── <other-packages>/
	   │   └── ...
	   └── xz/
	       └── ...

deploy/rpm:
***********
1. The 'deploy/rpm' directory is used to contain all the '.rpm' (Red Hat Package Manager) Packages produced during the Build process.
2. These Packages are organized into the sub-directories that categorize these Packages based on the various Architectures.
3. This method of Package organization makes it easy to locate and deploy the relevant Packages.
4. The directory structure is as follows:
	=> rpm/
	   ├── armv7at2hf-neon/
	   │   └── <armv7at2hf-packages>.rpm
	   ├── beaglebone/
	   │   └── <beaglebone-packages>.rpm
	   ├── noarch/
	   │   └── <noarch-packages>.rpm
	   ├── <other-archs>/
	   │   └── <arch-specific-packages>.rpm
	   └── qemuarm/
	       └── <qemuarm-packages>.rpm
	---> armv7at2hf => Architecture-specific RPM Packages.
	---> beaglebone => Machine-specific RPM Packages.
	---> noarch => Architecture-independent RPM Packages.
	---> qemuarm => QEMU Target-specific RPM Packages.
