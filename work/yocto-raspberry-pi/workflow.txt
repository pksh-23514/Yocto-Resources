Official Raspberry Pi BSP Layer Integration with Poky:
======================================================
1. The 'meta-raspberrypi' is an official Board Support Package (BSP) Layer for the Raspberry Pi Boards.
2. It provides the support for a broad range of Peripherals for the Raspberry Pi HW.
3. The link to clone the 'meta-raspberrypi' is: git://git.yoctoproject.org/meta-raspberrypi
4. It can be cloned into the same path as the Poky repository or anywhere convinient.
5. It is dependent on the 'meta' and the 'meta-oe' Layers. The dependencies shall be fulfilled before using it in the Build system.
6. The link to clone the 'meta-oe' Layer is: git://git.openembedded.org/meta-openembedded
7. Once all the dependencies are fulfilled for the Layers, the Build process can be started.
8. The most important point is to maintain the same branch names (i.e. Poky codenames) in all the Layers used for the Yocto Build to maintain compatibility.

Selecting the Target Raspberry Pi Board:
========================================
1. The 'meta-raspberrypi' Layer provides the support for a variety of the Raspberry Pi Boards.
2. The Raspberry Pi-4 Board needs to be selected as the Target Machine for the Build.
3. There can be 2 variants of the Board i.e. 32-bit and 64-bit.
4. The 'raspberrypi4-64.conf' file contains the configuration for the Raspberry Pi-4 Board with 64-bit Target Machine.

Selecting the Target Image for the Raspberry Pi Board:
======================================================
1. The 'meta-raspberrypi' Layer provides a specific 'rpi-test-image' Image for the Raspberry Pi Board.
2. It is present at the path 'meta-raspberrypi/recipes-core/images'.
3. It is based on the 'core-image-base' Image at the path 'meta/recipes-core/images/' bundled with the 'packagegroup-rpi-test'.
4. This is a Console-only Linux Image coupled with some Packages for the Raspberry Pi Board.

Raspberry Pi Yocto Image Build:
===============================
1. After the 'meta-raspberrypi' Layer is included in the Build Environment, the Build process can be initiated.
2. The 'bitbake' command execution starts the Image Build.
3. Once the Build is completed, the Image binaries are stored in the Build directory (under 'tmp/deploy' sub-directory).

.wic Image for Raspberry Pi:
============================
1. The '.wic' Image can be used to create complex Disk Images with multiple partitions for the Boot Images and the RootFS.
2. It can be written on the SD card directly. Since, the partitions are already present, there is no additional requirement to create the partitions on the SD card.
3. The 'wic.bz2' file is generated and placed along with the Image binaries at the directory path 'deploy/images/raspberrypi4-64'.
4. The 'wic.bz2' file should be uncompressed before writing it on the SD card.
5. The 'wic' command utility can be used for performing various operations on such uncompressed '.wic' files.
