Official Raspberry Pi BSP Layer Integration with Poky:
======================================================
1. The 'meta-raspberrypi' is an official Board Support Package (BSP) Layer for the Raspberry Pi Boards.
2. It provides the support for a broad range of Peripherals for the Raspberry Pi HW.
3. The link to clone the 'meta-raspberrypi' is: git://git.yoctoproject.org/meta-raspberrypi
4. It can be cloned into the same path as the Poky repository or anywhere convinient.
5. It is dependent on the 'meta' and the 'meta-oe' Layers. The dependencies shall be fulfilled before using it in the Build system.
6. The link to clone the 'meta-oe' Layer is: git://git.openembedded.org/meta-openembedded
7. Once all the dependencies are fulfilled for the Layers, the Build process can be started.
8. The most important point is to maintain the same branch names (i.e. Poky codenames) in all the Layers used for the Yocto Build to maintain compatibility.

Dynamic Layers:
***************
1. In the 'meta-raspberrypi' Layer, there are certain Layers that are conditionally included or added based on certain Configuration parameters during the Build process.
2. These Layers are called as Dynamic Layers. They are used to provide:
	1) Flexibility => It allows the 'meta-raspberrypi' Layer to support multiple Raspberry Pi models and features without duplicating the Recipes.
	2) Optimization => It avoids the unnecessary components that are not relevant to the Target Raspberry Pi model to be included in the Build.
	3) Maintainability => It is easier to update and manage the support for multiple Devices in the 'meta-raspberrypi' Layer.
3. They are not included by default. They are dynamically included based on the Machine, Distro or Configuration parameters.
4. The 'BBFILES_DYNAMIC' variable is used to register these Layers in the 'conf/layer.conf' file.
	=> BBFILES_DYNAMIC += " \
	       openembedded-layer:${LAYERDIR}/dynamic-layers/openembedded-layer/*/*/*.bb \
	       openembedded-layer:${LAYERDIR}/dynamic-layers/openembedded-layer/*/*/*.bbappend \
	   "
5. The variable informs the BitBake to dynamically add the Recipes from the sub-directories under the Dynamic Layers if relevant to the Target HW.
6. The directory structure for the Dynamic Layer is:
	=> meta-raspberrypi/
	   ├── dynamic-layers/
	   │   ├── sub-meta-layer/
	   │   │   └── recipes/
		       ├── files/
                       ├── *.bb or *.bbappend
7. These sub-directories Layers are often mirror sub-directory Layers of the 'meta-openembedded' Layer like 'meta-python', 'meta-networking' etc.

Selecting the Target Raspberry Pi Board:
========================================
1. The 'meta-raspberrypi' Layer provides the support for a variety of the Raspberry Pi Boards.
2. The Raspberry Pi-4 Board needs to be selected as the Target Machine for the Build.
3. There can be 2 variants of the Board i.e. 32-bit and 64-bit.
4. The 'raspberrypi4-64.conf' file contains the configuration for the Raspberry Pi-4 Board with 64-bit Target Machine.

Selecting the Target Image for the Raspberry Pi Board:
======================================================
1. The 'meta-raspberrypi' Layer provides a specific 'rpi-test-image' Image for the Raspberry Pi Board.
2. It is present at the path 'meta-raspberrypi/recipes-core/images'.
3. It is based on the 'core-image-base' Image at the path 'meta/recipes-core/images/' bundled with the 'packagegroup-rpi-test'.
4. This is a Console-only Linux Image coupled with some Packages for the Raspberry Pi Board.

Raspberry Pi Yocto Image Build:
===============================
1. After the 'meta-raspberrypi' Layer is included in the Build Environment, the Build process can be initiated.
2. The 'bitbake' command execution starts the Image Build.
3. Once the Build is completed, the Image binaries are stored in the Build directory (under 'tmp/deploy' sub-directory).

UART Enable Verification:
*************************
1. In the 'meta-raspberrypi' Layer, the Image for the Raspberry Pi-4 Board has UART for serial Console disabled by default.
2. If the Image is Built without enabling the UART, the following observations can be made:
	1) In the 'deploy/images/raspberrypi4-64/bootfiles/config.txt' file, there is no entry for 'enable_uart'.
	2) In the 'deploy/images/raspberrypi4-64/bootfiles/cmdline.txt' file, there is no command for 'console=...".
	3) In the Minicom window, there are no Boot logs displayed.
3. The way to enable the UART is pretty simple in the Image. In the 'local.conf' file, append the following:
	=> ENABLE_UART = "1"
4. After the Image is Built with the updated Configuration, the following observations can be made:
	1) In the 'deploy/images/raspberrypi4-64/bootfiles/config.txt' file, there is an entry for UART:
		=> enable_uart=1
	2) In the 'deploy/images/raspberrypi4-64/bootfiles/cmdline.txt' file, there is a command for the serial Console:
		=> dwc_otg.lpm_enable=0 console=serial0,115200 root=/dev/mmcblk0p2 rootfstype=ext4 rootwait
	3) In the Minicom window, the Boot logs are displayed.

.wic Image for Raspberry Pi:
============================
1. The '.wic' Image can be used to create complex Disk Images with multiple partitions for the Boot Images and the RootFS.
2. It can be written on the SD card directly. Since, the partitions are already present, there is no additional requirement to create the partitions on the SD card.
3. The 'wic.bz2' file is generated and placed along with the Image binaries at the directory path 'deploy/images/raspberrypi4-64'.
4. The 'wic.bz2' file should be uncompressed before writing it on the SD card.
5. The 'wic' command utility can be used for performing various operations on such uncompressed '.wic' files.

Preparing SD card for Booting:
==============================
1. Connect the SD card to the Host using a card reader.
2. The other way to create the partitions on the SD card is using the GParted application.
3. Launch the GParted application and authenticate using the PC password.
4. Select the correct Device (/dev/sdx) by checking the Device details from "/dev".
5. The SD card initially could already have a particular file system formatting such as FAT32.
6. Right click on the Device and 'Delete' all the partitions so that the complete storage is available for allocation.
7. After deleting the existing partitions, the Device partiton displays as "unallocated". The GParted application can be closed.
8. The 'lsblk' command can be executed to verify if the SD card partitions have been deleted or not.

Raspberry Pi Serial Setup:
==========================
1. The UART connection has to be established between the Host and the Target by connecting a USB to TTL Serial cable (Prolific PL2303).
2. This Serial connection is a cross-connection with the Tx pin of the cable going to the Rx pin on the Target and vice-versa.
3. The Serial pins (J8) on the Raspberry Pi are connected to the cable in the following manner:
	1) J8 (pin-6)  => GND
	2) J8 (pin-8)  => RX
	3) J8 (pin-10) => TX

SD card Booting Process:
========================
1. After the flashing on the SD card is successful, it can be inserted into the Raspberry Pi-4 Board.
2. After the UART connection is established successfully, the Minicom can should be configured on the Host Machine.
	=> sudo minicom -s
	=> The 'Serial port setup' is done with the below configurations and saved:
		1) Hardware Flow Control : No
		2) Software Flow Control : No
3. The USB (/dev/ttyUSBx) where the Serial connection is established can be verified and opened.
	=> sudo minicom -D /dev/ttyUSBx
4. The Board can be powered up by connecting a 5V power adapter to the Target.

Adding Support for SSH Connection:
==================================
1. The Dropbear is a small SSH 2 Server and Client functionality designed for the Embedded systems.
2. It is very useful in cases where lower Memory and CPU footprint constraints are present.
3. To include Dropbear in the Build, the Image Recipe can be updated as follows:
	=> IMAGE_FEATURES:append = " ssh-server-dropbear"
4. The 'bitbake' command can be executed to Build the Image with the updated Recipe.
5. After the Image is Built successfully, it can be flashed on the SD card and the SD card can be inserted into the Raspberry Pi-4 Board.
6. The Board can be powered up and the Booting process shall begin.
7. Connect the Ethernet cable between the Host and the Raspberry Pi-4 Board.
8. The simplest way to verify the SSH connection is to execute the 'ping' test between the Host and the Raspberry Pi-4 Board.

Adding Extra Free Space to Root FS:
===================================
1. The 'IMAGE_ROOTFS_EXTRA_SPACE' variable is used to add extra space to the RootFS of the Image. The variable specifies the value in kB.
2. By default for the 'rpi-test-image' Image, the 'IMAGE_ROOTFS_EXTRA_SPACE' variable is set to 0.
	=> bitbake -e rpi-test-image | grep ^IMAGE_ROOTFS_EXTRA_SPACE=
	=> IMAGE_ROOTFS_EXTRA_SPACE="0"
3. Therefore, there is not much free space available on the RootFS of the Image Built for usage.
4. This can be verified by executing the below command on the Raspberry Pi-4 Board:
	=> df -h
	=> Filesystem      Size   Used  Available  Use%   Mounted on
	=> /dev/root      81.2M  62.8M      14.0M   82%   /
5. The size of the RootFS of the Image and the size of the SD card has no relation. And most of the space in the SD card is empty after flashing the '.wic' Image.
6. To utilize a larger space on the SD card and have sufficient free space on the RootFS of the Image, the Image must be customized.
7. The 'local.conf' file can be updated to increase the free space of the RootFS by 4GB as follows:
	=> IMAGE_ROOTFS_EXTRA_SPACE = "4194304"
8. The 'bitbake' command can be executed to Build the Image with the updated variable value.
9. After the Image is Built successfully, it can be flashed on the SD card and the SD card can be inserted into the Raspberry Pi-4 Board.
10. The Board can be powered up and the Booting process shall begin. After the Login stage, verify the space available by executing the below command:
	=> df -h
	=> Filesystem      Size   Used  Available  Use%   Mounted on
	=> /dev/root       3.8G  74.0M       3.5G    2%   /
