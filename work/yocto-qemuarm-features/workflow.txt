Image Build using the Correct Poky Branch:
==========================================
1. In the working directory, clone the complete Poky repository.
	=> git clone git://git.yoctoproject.org/poky
	---> Once the cloning is completed, the 'master' branch is checked-out by default.
2. Based on the selected codename for Poky, switch to that branch of the cloned repository.
	=> cd poky
	=> git checkout -t origin/kirkstone -b my-kirkstone
	---> The branch 'my-kirkstone' is created to track the remote branch 'kirkstone' from 'origin'.
3. The script 'oe-init-build-env' is used to setup the OpenEmbedded Build Environment.
	=> cd poky
	=> source oe-init-build-env [build_dir]
	---> The argument 'build_dir' is optional. It is used to provide the Absolute/Relative directory path to setup the Build directory. The default is './build'
4. It adds the BitBake utility to the 'PATH' variable of the Host Machine.
5. It moves the control to the Build directory with the 'conf' directory containing the necessary Configuration files.
6. In the 'conf' directory, the Target Machine is selected by default as 'qemuarm'.
	=> MACHINE ?= "qemuarm"
7. The final step to Build the Image is by selecting the Target Image and passing it to the BitBake.
	=> bitbake core-image-minimal
8. After the Build is successful, the Target Image binaries are present under the 'build' directory.

Customize the Yocto Image for SSH Connection:
=============================================
1. Initially, there is no SSH connectivity on the Image enabled by default.
2. The Image Recipe file should be updated to include the Dropbear as a feature in the Image.
	=> IMAGE_FEATURES:append = " ssh-server-dropbear"
3. The Image features should be verified before starting the Build process.
4. Execute the 'bitbake' command to Build an Image with the new feature.
5. After the Build is successful, the Target Image binaries are present under the 'build' directory.

Running the Yocto Image on QEMU:
================================
1. For testing the Built Yocto Image on the Host, QEMU is used to execute the Image on an Emulator mimicking the Target HW.
2. Poky repository provides a script 'runqemu' which allows to start the QEMU for running the Yocto Image.
3. The 'runqemu' script can be executed anywhere in the Build directory after setting up the Build Environment.
	=> runqemu qemuarm core-image-minimal nographic
4. After the Boot is successful, the Dropbear SSH Server starting is visible in the logs.
5. Once the Root Login stage is done, it should be verified whether the Dropbear is running or not.
	=> ps | grep dropbear
6. Execute the 'ping' test between the Host Machine and the Target.
7. The QEMU can be closed by powering OFF the virtual HW.
	=> poweroff
