Host Machine Requirements:
==========================
1. 1. At least 90 GB of free Disk space.
2. At least 8 GB of RAM and as many CPU Cores as possible.
3. A supported Linux Distribution i.e. recent Releases of Fedora, openSUSE, CentOS, Debian or Ubuntu.
4. The Yocto Project version => 4.0
5. The codename of Poky with the Yocto Project version => Kirkstone

Preparing the Build Host Machine:
=================================
1. For the below commands, it is assumed that the Host Machine has Ubuntu installed on it.
2. The essential Packages that must be installed are:
	=> sudo apt install build-essential chrpath cpio debianutils diffstat file gawk gcc git iputils-ping libacl1 liblz4-tool locales \
		python3 python3-git python3-jinja2 python3-pexpect python3-pip python3-subunit socat texinfo unzip wget xz-utils zstd
2. Ensure that the following utilities have these minimum version numbers:
	1) Git 1.8.3.1 or greater
	2) tar 1.28 or greater
	3) Python 3.6.0 or greater
	4) gcc 7.5 or greater
	5) GNU make 4.0 or greater
3. Ensure that the 'en_US.UTF-8' locale is enabled on the Host:
	=> locale --all-locales | grep en_US.utf8
	1) If the locale is not present, it has to be configured in the 'locales' Package:
		=> sudo dpkg-reconfigure locales
		---> The above command requires an interactive Shell i.e GUI on the Host Machine.
4. If required, the Packages needed to Build the Project manuals:
	=> sudo apt install git inkscape locales make python3-saneyaml python3-sphinx-rtd-theme sphinx texlive-latex-extra

Accessing the Source Repository:
================================
1. Check for the Release Page to choose the Yocto Project version and codename for Poky required.
	1) The link to the Poky Releases information is: https://wiki.yoctoproject.org/wiki/Releases
	2) Remember to choose the codename corresponding to either the latest Stable Release or the Long Term Support Release.

Cloning and Check-out the Correct Poky Branch:
==============================================
1. In the working directory, clone the complete Poky repository.
	=> git clone git://git.yoctoproject.org/poky
	---> Once the cloning is completed, the 'master' branch is checked-out by default.
2. Based on the selected codename for Poky, switch to that branch of the cloned repository.
	=> cd poky
	=> git checkout -t origin/kirkstone -b my-kirkstone
	---> The branch 'my-kirkstone' is created to track the remote branch 'kirkstone' from 'origin'.
3. The local branch must be kept in sync with the remote branch periodically.
	=> git pull

Initializing the Build Environment:
===================================
1. The script 'oe-init-build-env' is used to setup the OpenEmbedded Build Environment.
	=> cd poky
	=> source oe-init-build-env [build_dir]
	---> The argument 'build_dir' is optional. It is used to provide the Absolute/Relative directory path to setup the Build directory. The default is './build'
2. It adds the BitBake utility to the 'PATH' variable of the Host Machine.
3. It moves the control to the Build directory with the 'conf' directory containing the necessary Configuration files.

Image Build using the BitBake:
==============================
1. The final step to Build the Image is by selecting the Target Image and passing it to the BitBake.
	=> bitbake core-image-minimal
2. In the 'conf' directory, the Target Machine is selected by default as 'qemux86-64'. This can be updated to others by updating the 'local.conf' file.

Image Simulation using the QEMU:
================================
1. For testing the Built Yocto Image on the Host, QEMU is used to execute the Image on an Emulator mimicking the Target HW.
2. QEMU (Quick Emulator) is a free and Open-Source SW package that performs the Hardware virtualization.
3. It allows test and development without the need of a real Hardware. Currently, it supports the following Target architectures:
	1) ARM / AArch64 (32-bit and 64-bit ARM Architecture)
	2) MIPS / MIPS64 (Including little-Endian and big-Endian variants)
	3) RISC-V (rv32 and rv64 Architecture)
	4) PowerPC / PowerPC64
	5) x86 / x86-64
4. Poky repository provides a script 'runqemu' which allows to start the QEMU for running the Yocto Image.
	1) The 'scripts' directory in the cloned repository contains the 'runqemu' script.
5. The 'runqemu' script can be executed anywhere in the Build directory after setting up the Build Environment.
	=> runqemu qemux86-64 core-image-minimal
	---> A video Console will appear on the Standard Output displaying the Booting process.
	---> The QEMU can be run without the video console using the 'nographic' option in the command. In terms of visiual clarity, this method is preferred.
6. The QEMU can be closed by powering OFF the virtual HW.
	=> poweroff

Image Build for the ARM Architecture:
=====================================
1. Instead of Intel Architecture (x86), the Image for ARM Architecture can be Built using the same Build directory.
2. The changes shall be made to the 'local.conf' file in the 'build/conf' directory.
	=> MACHINE = qemuarm
3. The rest of the steps to Build the Image remains same.
4. For testing the Image on the Host, again QEMU can be executed.
	=> runqemu qemuarm core-image-minimal
