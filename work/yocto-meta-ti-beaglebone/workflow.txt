Official TI BSP Layer Integration with Poky:
============================================
1. The 'meta-ti' Layer provides more advance features than the 'meta-yocto-bsp' Layer for the BeagleBone Boards.
2. It also provides the support for a broad range of Peripherals for the TI HW and TI-specific tools.
3. The link to clone the 'meta-ti' Layer is: git://git.yoctoproject.org/meta-ti
4. It can be cloned into the same path as the Poky repository or anywhere convinient.
5. It is dependent on the 'meta' and the 'meta-arm' Layers. The dependencies shall be fulfilled before using it in the Build system.
6. The link to clone the 'meta-arm' Layer is: git://git.yoctoproject.org/meta-arm
7. Once all the dependencies are fulfilled for the Layers, the Build process can be started.
8. The most important point is to maintain the same branch names (i.e. Poky codenames) in all the Layers used for the Yocto Build to maintain compatibility.

BeagleBone Black Yocto Image Build:
===================================
1. After the 'meta-ti' Layer is included in the Build Environment, the Build process can be initiated.
2. The 'bitbake' command execution starts the Image Build.
3. Once the Build is completed, the Image binaries are stored in the Build directory (under 'deploy_ti' sub-directory).
4. The Image binaries include the MLO, u-Boot, Kernel Image, Device Tree (.dtb and .dtbo) files and the RootFS.

Device Tree Blob Overlay:
*************************
1. The '.dtbo' file represents a Device Tree Blob Overlay which is a compiled version of a Device Tree Overlay ('.dts' file written as an Overlay).
2. It modifies the base Device Tree Blob i.e. '.dtb' file at the Run-time.
3. It allows the dynamic Configuration of HW that is especially useful for enabling the additional Peripherals (like GPIO, I2C, eMMC etc).
4. It provides the flexibility in HW customization as they can be loaded dynamically without recompiling the entire Device Tree.
5. The common '.dtbo' files for the BeagleBone Black Image are:
	1) BB-ADC-00A0.dtbo
	2) BB-BONE-eMMC1-01-00A0.dtbo
	3) BB-SPIDEV0-00A0.dtbo
	4) BB-SPIDEV1-00A0.dtbo
	5) BB-UART1-00A0.dtbo
	6) BB-UART2-00A0.dtbo
6. As a part of the Yocto Build, they are placed along with the Image binaries at the directory path 'deploy_ti/images/beaglebone/'.

.wic Image for BeagleBone Black:
================================
1. The '.wic' Image can be used to create complex Disk Images with multiple partitions for the Boot Images and the RootFS.
2. It can be written on the SD card directly. Since, the partitions are already present, there is no additional requirement to create the partitions on the SD card.
3. The '.wic.xz' file is generated and placed along with the Image binaries at the directory path 'deploy_ti/images/beaglebone/'.
	=> IMAGE_FSTYPES = "wic.xz"
4. This '.wic.xz' file should be uncompressed before writing it on the SD card.
5. The 'wic' command utility can be used for performing various operations on such uncompressed '.wic' files.

Preparing SD card for Booting:
==============================
1. Connect the SD card to the Host using a card reader.
2. The other way to create the partitions on the SD card is using the GParted application.
3. Launch the GParted application and authenticate using the PC password.
4. Select the correct Device (/dev/sdx) by checking the Device details from "/dev".
5. The SD card initially could already have a particular file system formatting such as FAT32.
6. Right click on the Device and 'Delete' all the partitions so that the complete storage is available for allocation.
7. After deleting the existing partitions, the Device partiton displays as "unallocated". The GParted application can be closed.
8. The 'lsblk' command can be executed to verify if the SD card partitions have been deleted or not.

BeagleBone Black Serial Setup:
==============================
1. The UART connection has to be established between the Host and the Target by connecting a USB to TTL Serial cable (Prolific PL2303).
2. This Serial connection is a cross-connection with the Tx pin of the cable going to the Rx pin on the Target and vice-versa.
3. The Serial pins (J1) on the BeagleBone Black are connected to the cable in the following manner:
	1) J1 (pin-1) => GND
	2) J1 (pin-4) => RX
	3) J1 (pin-5) => TX

SD card Booting Process:
========================
1. After the flashing on the SD card is successful, it can be inserted into the BeagleBone Black Board.
2. After the UART connection is established successfully, the Minicom can should be configured on the Host Machine.
	=> sudo minicom -s
	=> The 'Serial port setup' is done with the below Configurations and saved:
		1) Hardware Flow Control : No
		2) Software Flow Control : No
3. The USB (/dev/ttyUSBx) where the Serial connection is established can be verified and opened.
	=> sudo minicom -D /dev/ttyUSBx
4. The Board can be powered up by connecting a USB cable Type-B from the Host to the USB mini-port on the Target.
5. The Board Boots up by using the pre-existing Images from the eMMC. But this is not desirable as the Image is flashed on the SD card.
6. Therefore, before powering up the Board, the Boot button (S2) is to be pressed and held for changing the Boot sequence.
7. After 2-5 seconds, the Boot button can be released. This causes the Board to boot from the SD card instead of the eMMC.
8. The Board is now booted-up successfully from the SD card if it reaches the Login stage.
9. This is a tedious process to Boot the Board by pressing the Boot button everytime.
