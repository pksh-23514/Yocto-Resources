Modifying the Sources in Recipe Work Directory for Recipe Build:
================================================================
1. The Yocto Project always uses everything from the sources to Build the Recipe.
2. The most simple way to make changes in the sources for it to get Built is:
	1) In the 'WORKDIR' directory of the Recipe, all the work done during the Build is stored.
	2) Depending on the way the sources are fetched during the Build, they are either stored in the 'WORKDIR' directory or a sub-directory of the 'WORKDIR' directory.
	3) In the sources, apply the modifications required to be Build.
3. After the sources are modified, if the Build command is executed for the Recipe, it is observed that there is no Task executed for the Recipe Build.
	1) Since, the sources are modified directly in the 'WORKDIR' directory, the BitBake is not aware that the sources have been modified.
	2) Therefore, the BitBake understands there is no change to the Build and it finishes the Recipe Build instantly without executing any Tasks.
4. To include these modifications in the Recipe Build, the BitBake has to be forced to execute the necessary Tasks.
	=> bitbake -c CMD -f [recipe-name]
	---> The '-c CMD' option specifies the Task to be executed. Generally, the 'CMD' should be 'compile' to execute the 'do_compile' Task on the modifications.
	---> The '-f' option is used to force the BitBake to execute the Task.
5. After the execution of the Build command with the above options, the modifications are picked up by the BitBake during the Recipe Build.
6. However, this way to implement the modifications to the sources is problematic.
	1) The major disadvantage is the modifications can be lost if the Recipe Build is cleaned using the 'bitbake -c cleanall' command.
	2) The second issue with this method is the BitBake has to be forced to execute the Tasks as it is not aware about the changes done to the sources.

Modifying non-Git Sources using 'devtool' Command for Recipe Build:
===================================================================
1. The recommended way by the Yocto Project to implement the changes in the sources is by using the 'devtool' CLI tool.
	1) The 'devtool' command is provided alongside with the 'bitbake' command.
	2) It is a key part of the Extensible SDK (eSDK).
2. To modify an existing Recipe, it has to be included in the 'workspace' Layer by executing the 'devtool modify' command in the Build directory.
	1) This command fetches the sources for the Recipe, unpacks them into the 'workspace/sources/<recipe-name>' directory and initializes it as a Git repository.
	2) Even if the sources are not fetched from the Git or GitHub i.e. the non-Git sources, it still sets up the fetched sources as a Git repository.
	3) The default development Git branch used for this Recipe sources in the 'workspace' Layer is 'devtool'.
	4) This command also includes the 'workspace' directory path into the 'conf/bblayers.conf' file.
3. The 'workspace/sources' directory can be checked for the files and directories generated after the command execution.
	1) Although the sources for this Recipe are not from a Git repository, they are still unpacked and initialized as a Git repository.
4. The modifications can be made to the source code present in this directory.
5. However, since these sources are not from a Git repository, these changes are not tracked by the Git.
6. After the sources are modified, these changes can be tested by performing a Recipe Build by executing the 'devtool build' command in the Build directory.
	1) The Build system would automatically detect the changes to the sources and perform the necessary Tasks for the Recipe Build.
	2) This command generates the 'symlinks' for 'WORKDIR' and log directories of the Recipe Build in the workspace/sources/<recipe-name>' directory.
	3) The final Cross-Compiled C file binary is also kept in the workspace/sources/<recipe-name>' directory.
	4) This generated binary is tracked by the Git as an untracked file.
7. The 'WORKDIR' directory used by the 'devtool' command is same as the 'WORKDIR' directory used for the Recipe Build.
	1) It can be checked for the files and directories generated during the Build.
	2) It is observed that the directories generated by the 'devtool build' are different than generated by the BitBake during the Recipe Build.
	3) The C file can be checked to verify if all the changes have been incorporated.
8. Once the changes are tested and finalized, these changes from the 'workspace' Layer can be applied to the Recipe sources in the corresponding Meta-Layer.
	1) Since, there are no changes being tracked by the Git for this Recipe sources, there is no need to commit anything in the 'workspace/sources/<recipe-name>' directory.
9. The implementation of these changes to the sources can be done by executing the 'devtool update-recipe' command in the either of the following ways:
	1) To update the original Recipe Sources in the corresponding Meta-Layer, the command to be executed in the Build directory is:
		=> devtool update-recipe <recipe-name>
	2) The Recipe folder in the corresponding Meta-Layer can be verified if the original sources are modified after running this command.
	3) To update the changes in the form of an Append file to be applied by any Meta-Layer, the command to be executed in the Build directory is:
		=> devtool update-recipe -a <layer-path> <recipe-name>
	4) The Recipe folder in the command-specified Meta-Layer can be verified for the directory containing the updated sources and the Recipe's Append file.
10. After the Recipe sources are modified, the Recipe can be removed from the 'workspace' Layer by executing the 'devtool reset' command in the Build directory.
	1) This command simply deletes the Recipe and it's Configuration files from the 'workspace' Layer.
	2) It does not physically moves the changes back to the Recipe sources from the 'workspace' Layer.
	3) Therefore, it is to be ensured that all the changes are implemented in the Recipe sources before executing this command.
11. There is another way to finish the modifications made to the Recipe sources in the 'workspace' Layer by executing the 'devtool finish' command in the Build directory.
	1) This command pushes any committed changes to the Recipe sources in the corresponding Meta-Layer and then removes the Recipe from the 'workspace' Layer.
	2) It is roughly equivalent to executing the 'devtool update-recipe' command followed by the 'devtool reset' command in the Build directory.
	3) If there is any changes that are not committed, this command shall throw an error. However, it can be forced to execute using the '-f' option in the command.
12. The 'devtool reset' and the 'devtool finish' commands do not remove the 'workspace' Layer or the path to the 'workspace' Layer from the 'conf/bblayers.conf' file.
	1) If the 'workspace' Layer is not required any further, it has to be deleted manually.
	2) The path to the 'workspace' Layer must be deleted manually from the 'conf/bblayers.conf' file.
13. Once the Recipe file is completed, the Build command can be executed for the Recipe.
14. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.

Modifying Git Sources using 'devtool' Command for Recipe Build:
===============================================================
1. The recommended way by the Yocto Project to implement the changes in the sources is by using the 'devtool' CLI tool.
	1) The 'devtool' command is provided alongside with the 'bitbake' command.
	2) It is a key part of the Extensible SDK (eSDK).
2. To modify an existing Recipe, it has to be included in the 'workspace' Layer by executing the 'devtool modify' command in the Build directory.
	1) This command fetches the sources for the Recipe, unpacks them into the 'workspace/sources/<recipe-name>' directory and initializes it as a Git repository.
	2) Even if the sources are not fetched from the Git or GitHub i.e. the non-Git sources, it still sets up the fetched sources as a Git repository.
	3) The default development Git branch used for this Recipe sources in the 'workspace' Layer is 'devtool'.
	4) This command also includes the 'workspace' directory path into the 'conf/bblayers.conf' file.
3. The 'workspace/sources' directory can be checked for the files and directories generated after the command execution.
	1) Since, the sources for this Recipe are from a Git repository, they are unpacked and initialized as a Git repository.
4. The modifications can be made to the source code present in this directory.
5. Since, these sources are from a Git repository, these changes are tracked by the Git.
6. After the sources are modified, these changes can be tested by performing a Recipe Build by executing the 'devtool build' command in the Build directory.
	1) The Build system would automatically detect the changes to the sources and perform the necessary Tasks for the Recipe Build.
	2) This command generates the 'symlinks' for 'WORKDIR' and log directories of the Recipe Build in the workspace/sources/<recipe-name>' directory.
	3) The final Cross-Compiled C file binary is also kept in the workspace/sources/<recipe-name>' directory.
	4) This generated binary is tracked by the Git as an untracked file.
7. The 'WORKDIR' directory used by the 'devtool' command is same as the 'WORKDIR' directory used for the Recipe Build.
	1) It can be checked for the files and directories generated during the Build.
	2) It is observed that the directories generated by the 'devtool build' are different than generated by the BitBake during the Recipe Build.
8. Once the changes are tested and finalized, these changes from the 'workspace' Layer can be applied to the Recipe sources in the corresponding Meta-Layer.
	1) Since, these changes are being tracked by the Git for this Recipe sources, they must be committed to the 'workspace/sources/<recipe-name>' directory.
9. The implementation of these changes to the sources can be done by executing the 'devtool update-recipe' command in the following way:
	1) To update the original Recipe Sources in the corresponding Meta-Layer, the command to be executed in the Build directory is:
		=> devtool update-recipe <recipe-name>
	2) The Recipe folder in the corresponding Meta-Layer can be verified if the original sources are modified after running this command.
10. The way to finish the modifications made to the Recipe sources in the 'workspace' Layer is by executing the 'devtool finish' command in the Build directory.
	1) This command pushes the committed changes to the Recipe sources in the corresponding Meta-Layer and then removes the Recipe from the 'workspace' Layer.
	2) It is roughly equivalent to executing the 'devtool update-recipe' command followed by the 'devtool reset' command in the Build directory.
	3) If there is any changes that are not committed, this command shall throw an error. However, it can be forced to execute using the '-f' option in the command.
11. The 'devtool reset' and the 'devtool finish' commands do not remove the 'workspace' Layer or the path to the 'workspace' Layer from the 'conf/bblayers.conf' file.
	1) If the 'workspace' Layer is not required any further, it has to be deleted manually.
	2) The path to the 'workspace' Layer must be deleted manually from the 'conf/bblayers.conf' file.
12. Once the Recipe file is completed, the Build command can be executed for the Recipe.
13. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.

Patching the Sources from Local Git Repository using 'git format-patch' Command for Recipe Build:
=================================================================================================
1. The Patch file can be easily generated and applied to the sources during the Recipe Build.
	1) When the sources are from Open-Source, this is the easiest solution to modify the sources as per the requirements.
	2) The BitBake performs the 'do_patch' Task during the Recipe Build to patch the sources for the corresponding Recipe.
2. The existing Recipe's 'WORKDIR' directory has to be fetched for the purpose of modifying the sources.
3. In the 'WORKDIR/git' directory, the modifications can be made to the source code present in this directory.
	1) Since, these sources are cloned from a local Git repository, these changes are tracked by the Git.
4. After the sources are modified, they must be committed to the 'WORKDIR/git' directory. This will allow Git to understand that the branch has been updated.
5. The Patch file can be generated by using the 'git format-patch' command.
	1) It prepares each non-Merge commit with it's changes in form a Patch file.
	2) By default, each Patch file is numbered sequentially from '1' and uses the first line of the commit message as the Patch file name.
	3) All the changes that are committed to the 'WORKDIR/git' directory are made into a distinct Patch file.
6. Once the Patch files are generated, they have to be moved manually to the Recipe folder in the corresponding Meta-Layer.
	1) The Patch files are moved under a sub-directory (generally named as 'files') in the Recipe folder for the BitBake to be able to pick them during the Recipe Build.
	2) The Patch files can then be removed along with all the other new files present in the 'WORKDIR/git' directory. This is not mandatory.
7. The Patch files have to be specified in the 'SRC_URI' variable in the Recipe file for the BitBake to include them during the Recipe Build.
8. Before the Recipe is Built along with the Patch files, the earlier Build must be cleaned. This is recommended by the Yocto Project.
9. Once the Recipe Build is cleaned, the Build command can be executed for the Recipe.
10. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) To ensure that the sources are patched correctly, the 'temp/log.do_patch' file can be checked.
	2) It contains the 'do_patch' Task execution log which verifies the Patch files are applied successfully.
11. The Recipe must be added to the Image Recipe file for it to be included in the Image Build.
	1) This can be done by appending the 'IMAGE_INSTALL' variable in the Image Recipe file.
		=> IMAGE_INSTALL:append = " package-name"
		---> The 'package-name' is normally extracted from the Recipe file name.
12. Once the Image Recipe file is updated, the Image Build command can be executed.
13. After the Image Build is successful, the Image can be tested on the QEMU Target for verifying the Recipe addition.
	1) The 'runqemu' script can be executed anywhere in the Build directory after setting up the Build Environment.
		=> runqemu qemuarm core-image-minimal nographic
14. After the Root Login stage is done, it should be verified whether the Cross-Compiled C file binary is present at the correctly installed location.
	1) If the C binary is present, execute the binary to verify if the expected Output is displayed.
	2) The changes in the Patch files must be visible in the Output of the binary execution.
15. The QEMU can be closed by powering OFF the virtual HW.
	=> poweroff

Patching the Sources from Remote Git Repository using 'git diff --no-index' and 'diff' Commands for Recipe Build:
=================================================================================================================
1. The Patch file can be easily generated and applied to the sources during the Recipe Build.
	1) When the sources are from Open-Source, this is the easiest solution to modify the sources as per the requirements.
	2) The BitBake performs the 'do_patch' Task during the Recipe Build to patch the sources for the corresponding Recipe.
2. The existing Recipe's 'WORKDIR' directory has to be fetched for the purpose of modifying the sources.
3. In the 'WORKDIR/git' directory, the modifications can be made to the source code present in this directory.
	1) Although, these sources are cloned from a remote Git repository, the Git tracking is not being used for the changes made to the sources.
	2) For the modifications to an existing file, prepare an original copy of the existing file before making changes to that file.
	3) For any new file i.e. non-existing file, it can be created and modified normally.
4. The Patch file to an existing file can be generated using the 'git diff --no-index' command.
	1) The original copy of the existing file is compared to the modified file and the Patch file is generated.
	2) It works on the files that are not part of a Git repository as well.
5. However, the generated Patch file cannot be directly used by the Recipe for patching the sources.
	1) The BitBake expects such Patch files to be a part of the Git repository i.e. the directory path where the Patch file shall be applied must be a Git repository path.
	2) The Patch file requires certain manual changes so that the BitBake can apply them to the correct source file in their respective directory structure.
	3) The first thing to make sure in the Patch file is that the file name must be same in both the directory paths.
	4) The next thing is that the directory path where the Patch file shall be applied must be represented as a proper Git repository path.
	5) Irrespective of where the file is present, the complete path must be mentioned in such a way that the top directory must be initialized as a Git repository.
		=> The variables 'a' and 'b' in the directory paths of the Patch file must be a Git repository.
		---> If the Device Tree has to be patched, the complete Kernel repository path as 'a/arch/arm/boot/dts/*.dts' must be provided in the Patch file.
	6) The before i.e. 'a' and after i.e. 'b' versions of the file's directory paths must be same for the Patch file to be applied successfully.
	7) After these changes are updated manually in the Patch file, it is compatible with the BitBake patching mechanism.
6. The Patch file to add a new file i.e. a non-existing file in the sources can be generated using the 'diff -Nau' command.
	1) Since, there is no existing file for the 'diff' command to compare the original file with the modified file, the new file must be compared against "/dev/null".
	2) It comes handy to generate a one-time Patch file mostly for non-Git sources.
7. However, the generated Patch file cannot be directly used by the Recipe for patching the sources.
	1) The BitBake expects such Patch files to be a part of the Git repository i.e. the directory path where the Patch file shall be applied must be a Git repository path.
	2) The Patch file requires certain manual changes so that the BitBake can apply them to the correct source file in their respective directory structure.
	3) The first thing to make sure in the Patch file is that the directory paths mentioned are simply the file names and not the file paths.
	4) The BitBake would not understand these file names (like "/dev/null") as paths and the patching would throw an error.
	5) The directory path where the Patch file shall be applied must be represented as a proper Git repository path.
	6) Irrespective of where the file is present, the complete path must be mentioned in such a way that the top directory must be initialized as a Git repository.
		=> The variables 'a' and 'b' in the directory paths of the Patch file must be a Git repository.
		---> If the Device Tree has to be patched, the complete Kernel repository path as 'a/arch/arm/boot/dts/*.dts' must be provided in the Patch file.
	7) The before i.e. 'a' and after i.e. 'b' versions of the file's directory paths must be same for the Patch file to be applied successfully.
	8) After these changes are updated manually in the Patch file, it is compatible with the BitBake patching mechanism.
8. Once the Patch files are generated, they have to be moved manually to the Recipe folder in the corresponding Meta-Layer.
	1) The Patch files are moved under a sub-directory (generally named as 'files') in the Recipe folder for the BitBake to be able to pick them during the Recipe Build.
	2) The Patch files can then be removed along with all the other new files present in the 'WORKDIR/git' directory. This is not mandatory.
9. The Patch files have to be specified in the 'SRC_URI' variable in the Recipe file for the BitBake to include them during the Recipe Build.
10. Before the Recipe is Built along with the Patch files, the earlier Build must be cleaned. This is recommended by the Yocto Project.
11. Once the Recipe Build is cleaned, the Build command can be executed for the Recipe.
12. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) To ensure that the sources are patched correctly, the 'temp/log.do_patch' file can be checked.
	2) It contains the 'do_patch' Task execution log which verifies the Patch files are applied successfully.
13. The Recipe must be added to the Image Recipe file for it to be included in the Image Build.
	1) This can be done by appending the 'IMAGE_INSTALL' variable in the Image Recipe file.
		=> IMAGE_INSTALL:append = " package-name"
		---> The 'package-name' is normally extracted from the Recipe file name.
14. Once the Image Recipe file is updated, the Image Build command can be executed.
15. After the Image Build is successful, the Image can be tested on the QEMU Target for verifying the Recipe addition.
	1) The 'runqemu' script can be executed anywhere in the Build directory after setting up the Build Environment.
		=> runqemu qemuarm core-image-minimal nographic
16. After the Root Login stage is done, it should be verified whether the Cross-Compiled C file binary is present at the correctly installed location.
	1) If the C binary is present, execute the binary to verify if the expected Output is displayed.
	2) The changes in the Patch files must be visible in the Output of the binary execution.
17. The QEMU can be closed by powering OFF the virtual HW.
	=> poweroff
