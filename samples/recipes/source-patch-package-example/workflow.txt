Modifying the Sources in Recipe Work Directory for Recipe Build:
================================================================
1. The Yocto Project always uses everything from the sources to Build the Recipe.
2. The most simple way to make changes in the sources for it to get Built is:
	1) In the 'WORKDIR' directory of the Recipe, all the work done during the Build is stored.
	2) Depending on the way the sources are fetched during the Build, they are either stored in the 'WORKDIR' directory or a sub-directory of the 'WORKDIR' directory.
	3) In the sources, apply the modifications required to be Build.
3. After the sources are modified, if the Build command is executed for the Recipe, it is observed that there is no Task executed for the Recipe Build.
	1) Since, the sources are modified directly in the 'WORKDIR' directory, the BitBake is not aware that the sources have been modified.
	2) Therefore, the BitBake understands there is no change to the Build and it finishes the Recipe Build instantly without executing any Tasks.
4. To include these modifications in the Recipe Build, the BitBake has to be forced to execute the necessary Tasks.
	=> bitbake -c CMD -f [recipe-name]
	---> The '-c CMD' option specifies the Task to be executed. Generally, the 'CMD' should be 'compile' to execute the 'do_compile' Task on the modifications.
	---> The '-f' option is used to force the BitBake to execute the Task.
5. After the execution of the Build command with the above options, the modifications are picked up by the BitBake during the Recipe Build.
6. However, this way to implement the modifications to the sources is problematic.
	1) The major disadvantage is the modifications can be lost if the Recipe Build is cleaned using the 'bitbake -c cleanall' command.
	2) The second issue with this method is the BitBake has to be forced to execute the Tasks as it is not aware about the changes done to the sources.

Modifying non-Git Sources using 'devtool' Command for Recipe Build:
===================================================================
1. The recommended way by the Yocto Project to implement the changes in the sources is by using the 'devtool' CLI tool.
	1) The 'devtool' command is provided alongside with the 'bitbake' command.
	2) It is a key part of the Extensible SDK (eSDK).
2. To modify an existing Recipe, it has to be included in the 'workspace' Layer by executing the 'devtool modify' command in the Build directory.
	1) This command fetches the sources for the Recipe, unpacks them into the 'workspace/sources/<recipe-name>' directory and initializes it as a Git repository.
	2) Even if the sources are not fetched from the Git or GitHub i.e. the non-Git sources, it still sets up the fetched sources as a Git repository.
	3) The default development Git branch used for this Recipe sources in the 'workspace' Layer is 'devtool'.
	4) This command also includes the 'workspace' directory path into the 'conf/bblayers.conf' file.
3. The 'workspace/sources' directory can be checked for the files and directories generated after the command execution.
	1) Although the sources for this Recipe are not from a Git repository, they are still unpacked and initialized as a Git repository.
4. The modifications can be made to the source code present in this directory.
5. However, since these sources are not from a Git repository, these changes are not tracked by the Git.
6. After the sources are modified, these changes can be tested by performing a Recipe Build by executing the 'devtool build' command in the Build directory.
	1) The Build system would automatically detect the changes to the sources and perform the necessary Tasks for the Recipe Build.
	2) This command generates the 'symlinks' for 'WORKDIR' and log directories of the Recipe Build in the workspace/sources/<recipe-name>' directory.
	3) The final Cross-Compiled C file binary is also kept in the workspace/sources/<recipe-name>' directory.
	4) This generated binary is tracked by the Git as an untracked file.
7. The 'WORKDIR' directory used by the 'devtool' command is same as the 'WORKDIR' directory used for the Recipe Build.
	1) It can be checked for the files and directories generated during the Build.
	2) It is observed that the directories generated by the 'devtool build' are different than generated by the BitBake during the Recipe Build.
	3) The C file can be checked to verify if all the changes have been incorporated.
8. Once the changes are tested and finalized, these changes from the 'workspace' Layer can be applied to the Recipe sources in the corresponding Meta-Layer.
	1) Since, there are no changes being tracked by the Git for this Recipe sources, there is no need to commit anything in the 'workspace/sources/<recipe-name>' directory.
9. The implementation of these changes to the sources can be done by executing the 'devtool update-recipe' command in the either of the following ways:
	1) To update the original Recipe Sources in the corresponding Meta-Layer, the command to be executed in the Build directory is:
		=> devtool update-recipe <recipe-name>
	2) The Recipe folder in the corresponding Meta-Layer can be verified if the original sources are modified after running this command.
	3) To update the changes in the form of an Append file to be applied by any Meta-Layer, the command to be executed in the Build directory is:
		=> devtool update-recipe -a <layer-path> <recipe-name>
	4) The Recipe folder in the command-specified Meta-Layer can be verified for the directory containing the updated sources and the Recipe's Append file.
10. After the Recipe sources are modified, the Recipe can be removed from the 'workspace' Layer by executing the 'devtool reset' command in the Build directory.
	1) This command simply deletes the Recipe and it's Configuration files from the 'workspace' Layer.
	2) It does not physically moves the changes back to the Recipe sources from the 'workspace' Layer.
	3) Therefore, it is to be ensured that all the changes are implemented in the Recipe sources before executing this command.
11. There is another way to finish the modifications made to the Recipe sources in the 'workspace' Layer by executing the 'devtool finish' command in the Build directory.
	1) This command pushes any committed changes to the Recipe sources in the corresponding Meta-Layer and then removes the Recipe from the 'workspace' Layer.
	2) It is roughly equivalent to executing the 'devtool update-recipe' command followed by the 'devtool reset' command in the Build directory.
	3) If there is any changes that are not committed, this command shall throw an error. However, it can be forced to execute using the '-f' option in the command.
12. The 'devtool reset' and the 'devtool finish' commands do not remove the 'workspace' Layer or the path to the 'workspace' Layer from the 'conf/bblayers.conf' file.
	1) If the 'workspace' Layer is not required any further, it has to be deleted manually.
	2) The path to the 'workspace' Layer must be deleted manually from the 'conf/bblayers.conf' file.
13. Once the Recipe file is completed, the Build command can be executed for the Recipe.
14. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
