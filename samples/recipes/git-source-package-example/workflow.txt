Recipe Build for C file Using Makefile in Remote Git Repository:
================================================================
1. The Yocto Project supports the ability to pull the source code from the remote GitHub repositories as a part of the Build process.
2. This sample Recipe is used to Build a C file using Makefile present in an online Git repository and include it into the RootFS.
3. Since, the source code is not a part of the Recipe directory structure, the Recipe folder would only contain a Recipe file.
4. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
5. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
6. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
7. The contents of the Recipe file must provide:
	1) The 'SRC_URI' variable must point to the GitHub repository link along with the various options like 'protocol', 'branch', 'rev', 'tag' etc.
	2) The 'git://' Fetcher fetches the code from the GitHub and clones it into the directory controlled by the 'GITDIR' variable.
		=> GITDIR = "${TOPDIR}/downloads/git2"
	3) This local clone from the 'GITDIR' directory is then cloned into the Recipe 'WORKDIR' during the 'do_unpack' Task when a specific Tree is checked-out.
	4) The 'SRCREV' variable is mandatory to be provided in the Recipe file. Otherwise, the Build would throw an error of Fetcher failure.
	5) The BitBake uses this variable to determine the specific revision of the source to be used in the Build.
		=> SRCREV = "${AUTOREV}" or "<Full-Git-Commit-SHA-hash-value>"
		---> The 'AUTOREV' variable specifies to use the latest revision of the source in the repository.
		---> The '<Full-Git-Commit-SHA-hash-value>' specifies to use a particular revision of the source in the repository.
	6) The 'S' variable must be set to the '${WORKDIR}/git' value.
	7) The 'do_compile' Task is optional as by default the BitBake starts the 'make' command to Compile the SW.
	8) If there is any additional 'make' options, they can be stored in 'EXTRA_OEMAKE' or 'PACKAGECONFIG_CONFARGS' variables.
	9) The BitBake passes these options into the GNU 'make' invocation.
	10) The 'do_install' Task is still required in the Recipe file.
8. Once the Recipe file is completed, the Build command can be executed for the Recipe.
	1) The GitHub repository must be 'public' or else the Build would throw an error.
9. The list of Tasks to be performed during the Build of this Recipe can be checked using the 'bitbake -c listtasks' command.
10. The various OpenEmbedded Build system variable values can be checked in the BitBake Environment using the 'bitbake -e' command.
11. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) In the 'S' variable controlled directory, the contents of the GitHub repository are checked-out at the latest commit SHA hash value.
	2) The final binary produced by the Recipe Build is also present in this directory.
12. In the 'GITDIR' directory, the local clone of the GitHub repository is present.
