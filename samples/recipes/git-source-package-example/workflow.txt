Recipe Build for C file Using Makefile in Remote Git Repository:
================================================================
1. The Yocto Project supports the ability to pull the source code from the remote GitHub repositories as a part of the Build process.
2. This sample Recipe is used to Build a C file using Makefile present in an online Git repository and include it into the RootFS.
3. Since, the source code is not a part of the Recipe directory structure, the Recipe folder would only contain a Recipe file.
4. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
5. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
6. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
7. The contents of the Recipe file must provide:
	1) The 'SRC_URI' variable must point to the GitHub repository link along with the various options like 'protocol', 'branch', 'rev', 'tag' etc.
	2) The 'git://' Fetcher fetches the code from the GitHub and clones it into the directory controlled by the 'GITDIR' variable.
		=> GITDIR = "${TOPDIR}/downloads/git2"
	3) This local clone from the 'GITDIR' directory is then cloned into the Recipe 'WORKDIR' during the 'do_unpack' Task when a specific Tree is checked-out.
	4) The 'SRCREV' variable is mandatory to be provided in the Recipe file. Otherwise, the Build would throw an error of Fetcher failure.
	5) The BitBake uses this variable to determine the specific revision of the source to be used in the Build.
		=> SRCREV = "${AUTOREV}" or "<Full-Git-Commit-SHA-hash-value>"
		---> The 'AUTOREV' variable specifies to use the latest revision of the source in the repository.
		---> The '<Full-Git-Commit-SHA-hash-value>' specifies to use a particular revision of the source in the repository.
	6) The 'S' variable must be set to the '${WORKDIR}/git' value.
	7) The 'do_compile' Task is optional as by default the BitBake starts the 'make' command to Compile the SW.
	8) If there is any additional 'make' options, they can be stored in 'EXTRA_OEMAKE' or 'PACKAGECONFIG_CONFARGS' variables.
	9) The BitBake passes these options into the GNU 'make' invocation.
	10) The 'do_install' Task is still required in the Recipe file.
8. Once the Recipe file is completed, the Build command can be executed for the Recipe.
	1) The GitHub repository must be 'public' or else the Build would throw an error.
9. The list of Tasks to be performed during the Build of this Recipe can be checked using the 'bitbake -c listtasks' command.
10. The various OpenEmbedded Build system variable values can be checked in the BitBake Environment using the 'bitbake -e' command.
11. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) In the 'S' variable controlled directory, the contents of the GitHub repository are checked-out at the latest commit SHA hash value.
	2) The final binary produced by the Recipe Build is also present in this directory.
12. In the 'GITDIR' directory, the local clone of the GitHub repository is present.

Details of WORKDIR Variable:
****************************
1. The path of the work directory being used to Build a Recipe is specified by the 'WORKDIR' variable. It is located within the 'TMPDIR' directory.
2. It is specific to the Recipe being Built and the system for which the Recipe is getting Built.
3. The default value of the 'WORKDIR' variable is:
	=> ${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR}
	---> The 'TMPDIR' variable is used to specify the top-level Build Output directory.
	---> The 'MULTIMACH_TARGET_SYS' variable is used to specify the type of the Target system for which the Recipe is being Built.
	---> The 'PN' variable is used to specify the Package name. The name is normally extracted from the Recipe file name.
	---> The 'EXTENDPE' variable is used to specify the prefix for a Recipe's version based on the Epoch of the Recipe. In most cases, it is left blank.
	---> The 'PV' variable is used to specify the Recipe version. The value is normally extracted from the Recipe file name.
	---> The 'PR' variable is used to specify the Recipe revision. The default value is 'r0' and subsequent revisions are 'r1', 'r2' etc.

Including the Recipe into the Image:
====================================
1. Even if the Recipe Build is successful, it would not automatically be included as a part of the Image.
2. The Recipe must be added to the Image Recipe file for it to be included in the Image Build.
3. This can be done by appending the 'IMAGE_INSTALL' variable in the Image Recipe file.
	=> IMAGE_INSTALL:append = " package-name"
	---> The 'package-name' is normally extracted from the Recipe file name.
4. Once the Image Recipe file is updated, the Image Build command can be executed.
5. After the Image Build is successful, the Image can be tested on the Target Device for verifying the Recipe addition.

Running the Added Recipe Yocto Image on QEMU:
=============================================
1. For testing the Built Yocto Image on the Host, QEMU is used to execute the Image on an Emulator mimicking the Target HW.
2. Poky repository provides a script 'runqemu' which allows to start the QEMU for running the Yocto Image.
3. The 'runqemu' script can be executed anywhere in the Build directory after setting up the Build Environment.
	=> runqemu qemuarm core-image-minimal nographic
4. After the Root Login stage is done, it should be verified whether the Cross-Compiled C file binary is present at the correctly installed location.
5. If the C binary is present, execute the binary to verify if the expected Output is displayed.
6. The QEMU can be closed by powering OFF the virtual HW.
	=> poweroff
