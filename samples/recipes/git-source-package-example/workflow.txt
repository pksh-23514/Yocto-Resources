Recipe Build for C file Using Makefile in Remote Git Repository:
================================================================
1. The Yocto Project supports the ability to pull the source code from the remote GitHub repositories as a part of the Build process.
2. This sample Recipe is used to Build a C file using Makefile present in an online Git repository and include it into the RootFS.
3. Since, the source code is not a part of the Recipe directory structure, the Recipe folder would only contain a Recipe file.
4. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
5. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
6. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
7. The contents of the Recipe file must provide:
	1) The 'SRC_URI' variable must point to the GitHub repository link along with the various options like 'protocol', 'branch', 'rev', 'tag' etc.
	2) The 'git://' Fetcher fetches the code from the GitHub and clones it into the directory controlled by the 'GITDIR' variable.
		=> GITDIR = "${TOPDIR}/downloads/git2"
	3) This local clone from the 'GITDIR' directory is then cloned into the Recipe 'WORKDIR' during the 'do_unpack' Task when a specific Tree is checked-out.
	4) The 'SRCREV' variable is mandatory to be provided in the Recipe file. Otherwise, the Build would throw an error of Fetcher failure.
	5) The BitBake uses this variable to determine the specific revision of the source to be used in the Build.
		=> SRCREV = "${AUTOREV}" or "<Full-Git-Commit-SHA-hash-value>"
		---> The 'AUTOREV' variable specifies to use the latest revision of the source in the repository.
		---> The '<Full-Git-Commit-SHA-hash-value>' specifies to use a particular revision of the source in the repository.
	6) The 'S' variable must be set to the '${WORKDIR}/git' value.
	7) The 'do_compile' Task is optional as by default the BitBake starts the 'make' command to Compile the SW.
	8) If there is any additional 'make' options, they can be stored in 'EXTRA_OEMAKE' or 'PACKAGECONFIG_CONFARGS' variables.
	9) The BitBake passes these options into the GNU 'make' invocation.
	10) The 'do_install' Task is still required in the Recipe file.
8. Once the Recipe file is completed, the Build command can be executed for the Recipe.
	1) The GitHub repository must be 'public' or else the Build would throw an error.
9. The list of Tasks to be performed during the Build of this Recipe can be checked using the 'bitbake -c listtasks' command.
10. The various OpenEmbedded Build system variable values can be checked in the BitBake Environment using the 'bitbake -e' command.
11. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) In the 'S' variable controlled directory, the contents of the GitHub repository are checked-out at the latest commit SHA hash value.
	2) The final binary produced by the Recipe Build is also present in this directory.
12. In the 'GITDIR' directory, the local clone of the GitHub repository is present.

Details of WORKDIR Variable:
****************************
1. The path of the work directory being used to Build a Recipe is specified by the 'WORKDIR' variable. It is located within the 'TMPDIR' directory.
2. It is specific to the Recipe being Built and the system for which the Recipe is getting Built.
3. The default value of the 'WORKDIR' variable is:
	=> ${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR}
	---> The 'TMPDIR' variable is used to specify the top-level Build Output directory.
	---> The 'MULTIMACH_TARGET_SYS' variable is used to specify the type of the Target system for which the Recipe is being Built.
	---> The 'PN' variable is used to specify the Package name. The name is normally extracted from the Recipe file name.
	---> The 'EXTENDPE' variable is used to specify the prefix for a Recipe's version based on the Epoch of the Recipe. In most cases, it is left blank.
	---> The 'PV' variable is used to specify the Recipe version. The value is normally extracted from the Recipe file name.
	---> The 'PR' variable is used to specify the Recipe revision. The default value is 'r0' and subsequent revisions are 'r1', 'r2' etc.

Including the Recipe Build for Remote Git Repository into the Image:
====================================================================
1. Even if the Recipe Build is successful, it would not automatically be included as a part of the Image.
2. The Recipe must be added to the Image Recipe file for it to be included in the Image Build.
3. This can be done by appending the 'IMAGE_INSTALL' variable in the Image Recipe file.
	=> IMAGE_INSTALL:append = " package-name"
	---> The 'package-name' is normally extracted from the Recipe file name.
4. Once the Image Recipe file is updated, the Image Build command can be executed.
5. After the Image Build is successful, the Image can be tested on the Target Device for verifying the Recipe addition.

Running the Added Recipe Build for Remote Git Repository Yocto Image on QEMU:
=============================================================================
1. For testing the Built Yocto Image on the Host, QEMU is used to execute the Image on an Emulator mimicking the Target HW.
2. Poky repository provides a script 'runqemu' which allows to start the QEMU for running the Yocto Image.
3. The 'runqemu' script can be executed anywhere in the Build directory after setting up the Build Environment.
	=> runqemu qemuarm core-image-minimal nographic
4. After the Root Login stage is done, it should be verified whether the Cross-Compiled C file binary is present at the correctly installed location.
5. If the C binary is present, execute the binary to verify if the expected Output is displayed.
6. The QEMU can be closed by powering OFF the virtual HW.
	=> poweroff

Recipe Build for C file Using Makefile in Remote Git Repository with Custom Git Commit SHA Hash Value:
======================================================================================================
1. The particular revision of the source can be used in the Build by providing the full commit SHA hash value in the 'SRCREV' variable.
2. This avoids the BitBake to perform a query to the remote GitHub repository each time the Recipe is Built.
3. There is no change to the Recipe file or folder apart from updating the 'SRCREV' variable in the Recipe file.
4. Once the Recipe file is completed, the Build command can be executed for the Recipe.
5. After the Build is completed, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) In the 'S' variable controlled directory, the contents of the GitHub repository are checked-out at the latest commit SHA hash value.
	2) The source code has been changed to the particular revision specified in the 'SRCREV' variable.
	3) In the 'branch' specified in the 'SRC_URI' variable, the specified full commit SHA hash value is validated against this 'branch'.
6. In the 'GITDIR' directory, the local clone of the GitHub repository is present.

Recipe Build for C file Using Makefile in Remote Git Repository without Git Branch Value:
=========================================================================================
1. Using the same Recipe file having the custom commit SHA hash value, the 'branch' option is removed in the 'SRC_URI' variable.
2. The BitBake would fetch the 'master' branch of the GitHub repository as a default if there is no 'branch' option specified in the 'SRC_URI' variable.
3. There is no change to the Recipe file or folder apart from updating the 'SRC_URI' variable in the Recipe file.
4. Once the Recipe file is completed, the Build command can be executed for the Recipe.
5. There is no change in the Build behavior as compared to the earlier Build as the same 'master' branch was used in the earlier Build as well.
6. However, a warning is displayed on the account that no 'branch' option is specified in the 'SRC_URI' variable.
7. As there is no 'branch' specified in the 'SRC_URI' variable, the specified full commit SHA hash value is validated against the 'master' branch by default.
8. If this commit SHA hash value specified in the 'SRCREV' variable is not present in the 'master' branch, the Build error of Fetcher failure is observed.
9. Even with the 'branch' option specified in the 'SRC_URI' variable, the correct commit SHA hash value must be provided for the successful validation of the source to be cloned.
10. Therefore, it is always recommended to specify:
	1) The correct 'branch' option in the 'SRC_URI' variable.
	2) The corresponding full commit SHA hash value of the specified 'branch' in the 'SRCREV' variable.

Recipe Build for C file Using Makefile in Local Git Repository:
===============================================================
1. The Yocto Project supports the ability to pull the source code from the local Git repositories as a part of the Build process.
2. This sample Recipe is used to Build a C file using Makefile present in the local Git repository on the Host Machine and include it into the RootFS.
3. On the Host Machine, a directory is initialized as a local Git repository to contain the sources to be Build using the Recipe.
4. Since, the source code is not a part of the Recipe directory structure, the Recipe folder would only contain a Recipe file.
5. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
6. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
7. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
8. The contents of the Recipe file must provide:
	1) The 'SRC_URI' variable must point to the local Git repository along with the various options like 'protocol', 'branch', 'rev', 'tag' etc.
	2) Although there is no actual link involved for the local Git repository, the 'git://' Fetcher is used in the 'SRC_URI' variable.
	3) In the 'git://' Fetcher, the Absolute path of the local Git repository must be specified in place of the GitHub repository link.
	4) The 'protocol' option must be specified as 'file' in place of 'https' as the sources are on the Host Machine.
	5) The 'git://' Fetcher fetches the code from the local Git repository and clones it into the directory controlled by the 'GITDIR' variable.
		=> GITDIR = "${TOPDIR}/downloads/git2"
	6) This local clone from the 'GITDIR' directory is then cloned into the Recipe 'WORKDIR' during the 'do_unpack' Task when a specific Tree is checked-out.
	7) The 'SRCREV' variable is mandatory to be provided in the Recipe file. Otherwise, the Build would throw an error of Fetcher failure.
	8) The BitBake uses this variable to determine the specific revision of the source to be used in the Build.
		=> SRCREV = "${AUTOREV}" or "<Full-Git-Commit-SHA-hash-value>"
		---> The 'AUTOREV' variable specifies to use the latest revision of the source in the repository.
		---> The '<Full-Git-Commit-SHA-hash-value>' specifies to use a particular revision of the source in the repository.
	9) The 'S' variable must be set to the '${WORKDIR}/git' value.
	10) The 'do_compile' Task is optional as by default the BitBake starts the 'make' command to Compile the SW.
	11) If there is any additional 'make' options, they can be stored in 'EXTRA_OEMAKE' or 'PACKAGECONFIG_CONFARGS' variables.
	12) The BitBake passes these options into the GNU 'make' invocation.
	13) The 'do_install' Task is still required in the Recipe file.
9. Once the Recipe file is completed, the Build command can be executed for the Recipe.
10. The list of Tasks to be performed during the Build of this Recipe can be checked using the 'bitbake -c listtasks' command.
11. The various OpenEmbedded Build system variable values can be checked in the BitBake Environment using the 'bitbake -e' command.
12. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) In the 'S' variable controlled directory, the contents of the local Git repository are checked-out at the latest commit SHA hash value.
	2) The final binary produced by the Recipe Build is also present in this directory.
13. In the 'GITDIR' directory, the local clone of the GitHub repository is present.
14. This method can be really helpful to verify the Build is successful with the modifications done to the Recipes before finally pushing them into the remote GitHub repository.

Including the Recipe Build for Local Git Repository into the Image:
===================================================================
1. Even if the Recipe Build is successful, it would not automatically be included as a part of the Image.
2. The Recipe must be added to the Image Recipe file for it to be included in the Image Build.
3. This can be done by appending the 'IMAGE_INSTALL' variable in the Image Recipe file.
	=> IMAGE_INSTALL:append = " package-name"
	---> The 'package-name' is normally extracted from the Recipe file name.
4. Once the Image Recipe file is updated, the Image Build command can be executed.
5. After the Image Build is successful, the Image can be tested on the Target Device for verifying the Recipe addition.

Running the Added Recipe Build for Local Git Repository Yocto Image on QEMU:
============================================================================
1. For testing the Built Yocto Image on the Host, QEMU is used to execute the Image on an Emulator mimicking the Target HW.
2. Poky repository provides a script 'runqemu' which allows to start the QEMU for running the Yocto Image.
3. The 'runqemu' script can be executed anywhere in the Build directory after setting up the Build Environment.
	=> runqemu qemuarm core-image-minimal nographic
4. After the Root Login stage is done, it should be verified whether the Cross-Compiled C file binary is present at the correctly installed location.
5. If the C binary is present, execute the binary to verify if the expected Output is displayed.
6. The QEMU can be closed by powering OFF the virtual HW.
	=> poweroff

Recipe Build for C file Using Makefile in Remote Private Git Repository:
========================================================================
1. The Yocto Project supports the ability to pull the source code from the remote 'private' GitHub repositories as a part of the Build process.
2. This sample Recipe is used to Build a C file using Makefile present in an online 'private' Git repository and include it into the RootFS.
3. Since, the source code is not a part of the Recipe directory structure, the Recipe folder would only contain a Recipe file.
4. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
5. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
6. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
7. On the Host Machine, the SSH key pair must be generated and the 'public' SSH key must be added to the GitHub account. This is mandatory for using the SSH cloning option.
8. The contents of the Recipe file must provide:
	1) The 'SRC_URI' variable must point to the 'private' GitHub repository along with the various options like 'protocol', 'branch', 'rev', 'tag' etc.
	2) In the 'git://' Fetcher, the SSH link of the 'private' GitHub repository must be specified in place of the URL of the GitHub repository.
	3) The 'protocol' option must be specified as 'ssh' in place of 'https' as the sources are on the 'private' remote GitHub repository.
	4) The 'git://' Fetcher fetches the code from the GitHub and clones it into the directory controlled by the 'GITDIR' variable.
		=> GITDIR = "${TOPDIR}/downloads/git2"
	5) This local clone from the 'GITDIR' directory is then cloned into the Recipe 'WORKDIR' during the 'do_unpack' Task when a specific Tree is checked-out.
	6) The 'SRCREV' variable is mandatory to be provided in the Recipe file. Otherwise, the Build would throw an error of Fetcher failure.
	7) The BitBake uses this variable to determine the specific revision of the source to be used in the Build.
		=> SRCREV = "${AUTOREV}" or "<Full-Git-Commit-SHA-hash-value>"
		---> The 'AUTOREV' variable specifies to use the latest revision of the source in the repository.
		---> The '<Full-Git-Commit-SHA-hash-value>' specifies to use a particular revision of the source in the repository.
	8) The 'S' variable must be set to the '${WORKDIR}/git' value.
	9) The 'do_compile' Task is optional as by default the BitBake starts the 'make' command to Compile the SW.
	10) If there is any additional 'make' options, they can be stored in 'EXTRA_OEMAKE' or 'PACKAGECONFIG_CONFARGS' variables.
	11) The BitBake passes these options into the GNU 'make' invocation.
	12) The 'do_install' Task is still required in the Recipe file.
9. Once the Recipe file is completed, the Build command can be executed for the Recipe.
10. The list of Tasks to be performed during the Build of this Recipe can be checked using the 'bitbake -c listtasks' command.
11. The various OpenEmbedded Build system variable values can be checked in the BitBake Environment using the 'bitbake -e' command.
12. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) In the 'S' variable controlled directory, the contents of the 'private' GitHub repository are checked-out at the latest commit SHA hash value.
	2) The final binary produced by the Recipe Build is also present in this directory.
13. In the 'GITDIR' directory, the local clone of the GitHub repository is present.

Including the Recipe Build for Remote Private Git Repository into the Image:
============================================================================
1. Even if the Recipe Build is successful, it would not automatically be included as a part of the Image.
2. The Recipe must be added to the Image Recipe file for it to be included in the Image Build.
3. This can be done by appending the 'IMAGE_INSTALL' variable in the Image Recipe file.
	=> IMAGE_INSTALL:append = " package-name"
	---> The 'package-name' is normally extracted from the Recipe file name.
4. Once the Image Recipe file is updated, the Image Build command can be executed.
5. After the Image Build is successful, the Image can be tested on the Target Device for verifying the Recipe addition.

Running the Added Recipe Build for Remote Private Git Repository Yocto Image on QEMU:
=====================================================================================
1. For testing the Built Yocto Image on the Host, QEMU is used to execute the Image on an Emulator mimicking the Target HW.
2. Poky repository provides a script 'runqemu' which allows to start the QEMU for running the Yocto Image.
3. The 'runqemu' script can be executed anywhere in the Build directory after setting up the Build Environment.
	=> runqemu qemuarm core-image-minimal nographic
4. After the Root Login stage is done, it should be verified whether the Cross-Compiled C file binary is present at the correctly installed location.
5. If the C binary is present, execute the binary to verify if the expected Output is displayed.
6. The QEMU can be closed by powering OFF the virtual HW.
	=> poweroff

Recipe Build for C file Using Makefile in Remote Git Repository with Git Release Tag Value:
===========================================================================================
1. The Tag is a reference to a specific point in the history of a Git repository (local or remote). They are commonly used to mark the Release versions of the repository.
2. There are 2 types of Tags:
	1) Lightweight Tag => It is just a name pointing to a particular commit. It is just like an immovable branch.
	2) Annotated Tag => It contains the information like Tagger name, Tag date and Tag message. It is stored as a full Git Object. It is the recommended method.
3. The BitBake would fetch the 'master' branch of the GitHub repository as a default.
	1) However, the Tags have complete Release information including the full commit SHA hash value and the branch name.
	2) Therefore, it is not logical to provide the 'branch' option in the 'SRC_URI' variable.
4. There is no change to the Recipe file or folder apart from updating the 'SRC_URI' variable in the Recipe file.
	1) For observational purpose, the 'SRCREV' variable is updated to the full commit SHA hash value pointed by the Tag.
5. Once the Recipe file is completed, the Build command can be executed for the Recipe.
	1) The Recipe Build throws the BitBake Fetcher error during the 'do_fetch' Task of the Recipe:
		=> FetchError('Conflicting revisions (edb0eb4ab1f2eb685ea18b6d14413afcff598891 from SRCREV and v1.0.0 from the url) found, please specify one valid value', None)
	2) The error of conflicting revisions provided in the form of Tag and from the 'SRCREV' variable.
	3) Although, the revisions provided by the Tag and the 'SRCREV' variable is same, still the BitBake is treating them as different revisions causing the conflict.
6. The Recipe file must be updated by commenting the 'SRCREV' variable in the Recipe file in order to resolve the Build error of conflicting revisions.
