Verifying the OpenEmbedded Build Variables and Tasks for Recipe Build with Remote Public Git Source:
====================================================================================================

1. The Recipe Build Environment can be used to fetch the various variables related to the Recipe using the 'bitbake -e' command.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-remote-git | grep ^PN=
PN="hello-remote-git"
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-remote-git | grep ^PV=
PV="0.1"
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-remote-git | grep ^PR=
PR="r0"
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-remote-git | grep ^BP=
BP="hello-remote-git-0.1"
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-remote-git | grep ^BPN=
BPN="hello-remote-git"
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-remote-git | grep ^WORKDIR=
WORKDIR="/home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-remote-git/0.1-r0"
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-remote-git | grep ^S=
S="/home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-remote-git/0.1-r0/git"
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-remote-git | grep ^D=
D="/home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-remote-git/0.1-r0/image"

2. The list of Tasks to be performed by the BitBake during the Build of the particular Recipe can be checked using the 'bitbake -c listtasks' command.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -c listtasks hello-remote-git
Loading cache: 100% |##############################################################################################################################################| Time: 0:00:00
Loaded 1777 entries from dependency cache.
Parsing recipes: 100% |############################################################################################################################################| Time: 0:00:03
Parsing of 986 .bb files complete (982 cached, 4 parsed). 1781 targets, 159 skipped, 0 masked, 0 errors.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = "2.0.0"
BUILD_SYS            = "x86_64-linux"
NATIVELSBSTRING      = "universal"
TARGET_SYS           = "arm-poky-linux-gnueabi"
MACHINE              = "qemuarm"
DISTRO               = "poky"
DISTRO_VERSION       = "4.0.27"
TUNE_FEATURES        = "arm vfp cortexa15 neon thumb callconvention-hard"
TARGET_FPU           = "hard"
meta
meta-poky
meta-yocto-bsp
meta-layer           = "my-kirkstone:81e0dc80d72d66b7f15a34c0da7a0a8c58809056"
meta-ti-bsp          = "kirkstone:52018a8d730b2977d7163bf56c398905ef9115ac"
meta-arm
meta-arm-toolchain   = "kirkstone:10c27f061b22af78e17a23cf540b69501afc7160"

Initialising tasks: 100% |#########################################################################################################################################| Time: 0:00:00
Sstate summary: Wanted 0 Local 0 Mirrors 0 Missed 0 Current 0 (0% match, 0% complete)
NOTE: No setscene tasks
NOTE: Executing Tasks
do_build                               Default task for a recipe - depends on all other normal tasks required to 'build' a recipe
do_checkuri                            Validates the SRC_URI value
do_clean                               Removes all output files for a target
do_cleanall                            Removes all output files, shared state cache, and downloaded source files for a target
do_cleansstate                         Removes all output files and shared state cache for a target
do_compile                             Compiles the source in the compilation directory
do_configure                           Configures the source by enabling and disabling any build-time and configuration options for the software being built
do_deploy_source_date_epoch
do_deploy_source_date_epoch_setscene   (setscene version)
do_devshell                            Starts a shell with the environment set up for development/debugging
do_fetch                               Fetches the source code
do_install                             Copies files from the compilation directory to a holding area
do_listtasks                           Lists all defined tasks for a target
do_package                             Analyzes the content of the holding area and splits it into subsets based on available packages and files
do_package_qa                          Runs QA checks on packaged files
do_package_qa_setscene                 Runs QA checks on packaged files (setscene version)
do_package_setscene                    Analyzes the content of the holding area and splits it into subsets based on available packages and files (setscene version)
do_package_write_deb                   Creates the actual DEB packages and places them in the Package Feed area
do_package_write_deb_setscene          Creates the actual DEB packages and places them in the Package Feed area (setscene version)
do_package_write_ipk                   Creates the actual IPK packages and places them in the Package Feed area
do_package_write_ipk_setscene          Creates the actual IPK packages and places them in the Package Feed area (setscene version)
do_package_write_rpm                   Creates the actual RPM packages and places them in the Package Feed area
do_package_write_rpm_setscene          Creates the actual RPM packages and places them in the Package Feed area (setscene version)
do_packagedata                         Creates package metadata used by the build system to generate the final packages
do_packagedata_setscene                Creates package metadata used by the build system to generate the final packages (setscene version)
do_patch                               Locates patch files and applies them to the source code
do_populate_lic                        Writes license information for the recipe that is collected later when the image is constructed
do_populate_lic_setscene               Writes license information for the recipe that is collected later when the image is constructed (setscene version)
do_populate_sysroot                    Copies a subset of files installed by do_install into the sysroot in order to make them available to other recipes
do_populate_sysroot_setscene           Copies a subset of files installed by do_install into the sysroot in order to make them available to other recipes (setscene version)
do_prepare_recipe_sysroot
do_pydevshell                          Starts an interactive Python shell for development/debugging
do_unpack                              Unpacks the source code into a working directory
NOTE: Tasks Summary: Attempted 1 tasks of which 0 didn't need to be rerun and all succeeded.
NOTE: Writing buildhistory
NOTE: Writing buildhistory took: 33 seconds
