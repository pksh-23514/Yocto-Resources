Recipe Build for C File with Shell Logging Mechanisms:
======================================================
1. This sample Recipe is used to Build a single C file and include it into the RootFS.
2. The C file must be written with the contents to Build.
3. The next step is to place this C file in a directory structure for the BitBake to pick it up during the Build.
	1) The BitBake finds the Recipes using the 'BBFILES' variable in the 'conf/layer.conf' file of the corresponding Layer.
		=> BBFILES += "${LAYERDIR}/recipes-*/*/*.bb \
		               ${LAYERDIR}/recipes-*/*/*.bbappend"
	2) Consequently, the Recipe file must be placed at this path in the Layer such that it can be located by the Build system.
4. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
	2) The C file and the particular Recipe file to Build this C file shall be placed in this 'recipes-*' directory.
5. In the Build directory, the 'conf/bblayers.conf' file can be verified if the Layer is added to the 'BBLAYERS' variable. Otherwise, it would be excluded from the Build.
6. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
	=> meta/recipes-core/busybox ---> busybox_1.37.0.bb
	---> The name of 'busybox_1.37.0.bb' without the versions or revisions or any other suffixes is 'busybox'.
7. There should be a sub-directory created inside the Recipe folder named as 'files' to contain the C file for the Build.
8. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
9. The Build Meta-data must be filled in the Recipe file:
	1) The path to the sources.
	2) The Recipe file description.
	3) The Recipe file License information.
	4) The Tasks function to be executed by the BitBake.
	5) The Shell logging functions to be executed by the BitBake in the particular Shell Task functions.
10. Once the Recipe file is completed, the Build command can be executed for the Recipe.
11. In the Build log displayed on the Console, the following can be observed:
	1) The 'bbnote' message is not displayed in the Build log as expected.
	2) The 'bbdebug' messages are not displayed in the Build log as the Debug-level is not passed with the 'bitbake' call.
	3) The color codes for the Output logs displayed on the Console is as expected.
		=> Plain Message  <--- *White Font*
		=> WARNING: example-0.1-r0 do_compile: Warning Message  <--- *Yellow Font*
		=> ERROR: example-0.1-r0 do_compile: Error Message  <--- *Red Font*
12. The various OpenEmbedded Build system variable values can be checked in the BitBake Environment using the 'bitbake -e' command.
13. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
14. The Build for a Recipe can be cleaned using the 'bitbake -c cleanall' command.
