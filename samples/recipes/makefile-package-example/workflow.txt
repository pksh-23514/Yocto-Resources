Recipe Build for C Files Using Makefile:
========================================
1. This sample Recipe is used to Build the C files using Makefile and include it into the RootFS.
2. The C file must be written with the contents to Build. The Makefile must be written with the contents about the Build process.
3. The next step is to place this C file and Makefile in a directory structure for the BitBake to pick it up during the Build.
4. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
	2) The C file, the Makefile and the particular Recipe file to Build this C file shall be placed in this 'recipes-*' directory.
5. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
6. There should be a sub-directory created inside the Recipe folder named as 'files' to contain the C file and the Makefile for the Build.
7. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
	1) The GNU 'make' requires a Recipe file that has the sources listed in the 'SRC_URI' variable.
	2) The 'do_compile' Task is optional as by default the BitBake starts the 'make' command to Compile the SW.
	3) If there is any additional 'make' options, they can be stored in 'EXTRA_OEMAKE' or 'PACKAGECONFIG_CONFARGS' variables.
	4) The BitBake passes these options into the GNU 'make' invocation.
	5) However, the 'do_install' Task is still required in the Recipe file.
	6) The extra flags that need to be passed to the Compiler can be provided using the 'CFLAGS' variable.
8. Once the Recipe file is completed, the Build command can be executed for the Recipe.
9. The list of Tasks to be performed during the Build of this Recipe can be checked using the 'bitbake -c listtasks' command.
10. The various OpenEmbedded Build system variable values can be checked in the BitBake Environment using the 'bitbake -e' command.
11. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) If the 'do_compile' Task is provided explicitly in the Recipe file, it would suppress the default 'do_compile' call from the BitBake.
	2) This can be verified by checking the contents of the 'temp/run.do_compile' log file.
12. The Build for a Recipe can be cleaned using the 'bitbake -c cleanall' command.

Recipe Build for C Files Using Makefile Without do_compile Task:
================================================================
1. In the Recipe file, the 'do_compile' Task is removed. This will affect the Build behavior as the default 'do_compile' Task would be called by the BitBake.
2. The 'WORKDIR' directory for the Recipe Build must be cleaned using the 'bitbake -c cleanall' command before trying the Build with these modifications.
3. The Build command can then be executed for the Recipe.
4. It is observed that the 'do_compile' Task for the Recipe is successfully executed. Although, there is no such 'do_compile' Task definition in the Recipe file.
5. The Compilation steps can be verified by checking the 'temp/run.do_compile' log file that points to the latest Compilation stage log.
	1) The 'do_compile' Task is called as default by the BitBake.
	2) The 'do_compile' Task calls the 'base_do_compile' function which verifies if there is a 'Makefile' or 'makefile' or 'GNUmakefile' available.
	3) The 'base_do_compile' function then calls the 'oe_runmake' function which then calls the 'oe_runmake_call' function.
	4) The 'oe_runmake_call' function invokes the 'make' command for Building the C files using the available Makefile.
6. The 'WORKDIR' directory can be checked for the files and directories generated during the Build.
7. The Outputs are exactly the same as obtained during the previous Build with the 'do_compile' Task defined explicitly.

Details of WORKDIR Variable:
****************************
1. The path of the work directory being used to Build a Recipe is specified by the 'WORKDIR' variable. It is located within the 'TMPDIR' directory.
2. It is specific to the Recipe being Built and the system for which the Recipe is getting Built.
3. The default value of the 'WORKDIR' variable is:
	=> ${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR}
	---> The 'TMPDIR' variable is used to specify the top-level Build Output directory.
	---> The 'MULTIMACH_TARGET_SYS' variable is used to specify the type of the Target system for which the Recipe is being Built.
	---> The 'PN' variable is used to specify the Package name. The name is normally extracted from the Recipe file name.
	---> The 'EXTENDPE' variable is used to specify the prefix for a Recipe's version based on the Epoch of the Recipe. In most cases, it is left blank.
	---> The 'PV' variable is used to specify the Recipe version. The value is normally extracted from the Recipe file name.
	---> The 'PR' variable is used to specify the Recipe revision. The default value is 'r0' and subsequent revisions are 'r1', 'r2' etc.
