Recipe Build for C Files Using Makefile:
========================================
1. This sample Recipe is used to Build the C files using Makefile and include it into the RootFS.
2. The C file and the Makefile must be written with the contents to Build.
3. The next step is to place this C file and Makefile in a directory structure for the BitBake to pick it up during the Build.
4. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
	2) The C file, the Makefile and the particular Recipe file to Build this C file shall be placed in this 'recipes-*' directory.
5. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
6. There should be a sub-directory created inside the Recipe folder named as 'files' to contain the C file and the Makefile for the Build.
7. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
	1) The GNU 'make' requires a Recipe file that has the sources listed in the 'SRC_URI' variable.
	2) The 'do_compile' Task is optional as by default the BitBake starts the 'make' command to Compile the SW.
	3) If there is any additional 'make' options, they can be stored in 'EXTRA_OEMAKE' or 'PACKAGECONFIG_CONFARGS' variables.
	4) The BitBake passes these options into the GNU 'make' invocation.
	5) However, the 'do_install' Task is still required in the Recipe file.
	6) The extra flags that need to be passed to the Compiler can be done using the 'CFLAGS' variable.
8. Once the Recipe file is completed, the Build command can be executed for the Recipe.
9. The list of Tasks to be performed during the Build of this Recipe can be checked using the 'bitbake -c listtasks' command.
10. The various OpenEmbedded Build system variable values can be checked in the BitBake Environment using the 'bitbake -e' command.
11. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
12. The Build for a Recipe can be cleaned using the 'bitbake -c cleanall' command.
