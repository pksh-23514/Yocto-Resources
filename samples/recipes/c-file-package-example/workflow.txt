Recipe Build for C File:
========================
1. This sample Recipe is used to Build a single C file and include it into the RootFS.
2. The C file must be written with the contents to Build.
3. The next step is to place this C file in a directory structure for the BitBake to pick it up during the Build.
	1) The BitBake finds the Recipes using the 'BBFILES' variable in the 'conf/layer.conf' file of the corresponding Layer.
		=> BBFILES += "${LAYERDIR}/recipes-*/*/*.bb \
		               ${LAYERDIR}/recipes-*/*/*.bbappend"
	2) Consequently, the Recipe file must be placed at this path in the Layer such that it can be located by the Build system.
4. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
	2) The C file and the particular Recipe file to Build this C file shall be placed in this 'recipes-*' directory.
6. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
	=> meta/recipes-core/busybox ---> busybox_1.37.0.bb
	---> The name of 'busybox_1.37.0.bb' without the versions or revisions or any other suffixes is 'busybox'.
7. There should be a sub-directory created inside the Recipe folder named as 'files' to contain the C file for the Build.
8. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
9. The Build Meta-data must be filled in the Recipe file:
	1) The path to the sources.
	2) The Recipe file description.
	3) The Recipe file License information.
	4) The Tasks function to be executed by the BitBake.
10. Once the Recipe file is completed, the Build command can be executed for the Recipe.
11. The list of Tasks to be performed during the Build of this Recipe can be checked using the 'bitbake -c listtasks' command.
12. The various OpenEmbedded Build system variable values can be checked in the BitBake Environment using the 'bitbake -e' command.
13. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) The original C file is present in this directory.
	2) The Cross-Compiled binary file of the source C file is present in this directory.
	3) The 'image' directory contains the Output of the 'do_install' Task. It is specified by the 'D' variable in the Task.
	4) The 'package' directory contains the Output of the 'do_package' Task before the Output files are split into the individual Packages.
	5) The 'packages-split' directory contains the Output of the 'do_package' Task after the Output files are split into the individual Packages in separate sub-directories.
	6) The 'temp' directory contains the log files for each Task executed for the Recipe, the 'run' files for each executed Task and log file with the order of execution.
14. The Build for a Recipe can be cleaned using the 'bitbake -c cleanall' command.

Using install Utility in Recipe File:
*************************************
1. In the 'do_install' Task, the 'install' utility is the preferred way to copy the files into the holding area.
2. The reasons to use the 'install' utility are:
	1) It copies the files into the specified location.
	2) It changes the ownership and permissions for the specified files.
	3) It can optimally remove the Debug Symbols from the executables.
3. Therefore, it can be used to perform the same functions as the 'chmod', 'chown' and 'strip' commands.

Details of WORKDIR Variable:
****************************
1. The path of the work directory being used to Build a Recipe is specified by the 'WORKDIR' variable. It is located within the 'TMPDIR' directory.
2. It is specific to the Recipe being Built and the system for which the Recipe is getting Built.
3. The default value of the 'WORKDIR' variable is:
	=> ${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR}
	---> The 'TMPDIR' variable is used to specify the top-level Build Output directory.
	---> The 'MULTIMACH_TARGET_SYS' variable is used to specify the type of the Target system for which the Recipe is being Built.
	---> The 'PN' variable is used to specify the Package name. The name is normally extracted from the Recipe file name.
	---> The 'EXTENDPE' variable is used to specify the prefix for a Recipe's version based on the Epoch of the Recipe. In most cases, it is left blank.
	---> The 'PV' variable is used to specify the Recipe version. The value is normally extracted from the Recipe file name.
	---> The 'PR' variable is used to specify the Recipe revision. The default value is 'r0' and subsequent revisions are 'r1', 'r2' etc.

Including the Recipe into the Image:
====================================
1. Even if the Recipe Build is successful, it would not automatically be included as a part of the Image.
2. The Recipe must be added to the Image Recipe file for it to be included in the Image Build.
3. This can be done by appending the 'IMAGE_INSTALL' variable in the Image Recipe file.
	=> IMAGE_INSTALL:append = " package-name"
	---> The 'package-name' is normally extracted from the Recipe file name.
4. Once the Image Recipe file is updated, the Image Build command can be executed.
5. After the Image Build is successful, the Image can be tested on the Target Device for verifying the Recipe addition.

Running the Added Recipe Yocto Image on QEMU:
=============================================
1. For testing the Built Yocto Image on the Host, QEMU is used to execute the Image on an Emulator mimicking the Target HW.
2. Poky repository provides a script 'runqemu' which allows to start the QEMU for running the Yocto Image.
3. The 'runqemu' script can be executed anywhere in the Build directory after setting up the Build Environment.
	=> runqemu qemuarm core-image-minimal nographic
4. After the Root Login stage is done, it should be verified whether the Cross-Compiled C file binary is present at the correctly installed location.
5. If the C binary is present, execute the binary to verify if the expected Output is displayed.
6. The QEMU can be closed by powering OFF the virtual HW.
	=> poweroff

Using Header File for C File and Building the Image:
====================================================
1. If the C file includes a Header file, the Recipe file must be updated to accomodate the Header file for the Cross-Compilation of the C file.
2. The 'SRC_URI' variable in the Recipe file must now include the path to the Header file as well along with the C file.
	=> SRC_URI = " \
	=>     file://hello.c" \
	=>     file://hello.h" \
	=> "
3. The Header file shall also be placed in the 'files' sub-directory along with the C file. The BitBake can then locate the Header file while Compiling the C file.
4. Once the Recipe file is completed, the Build command can be executed for the Recipe.
5. After the Recipe Build is successful, the Image Build command can be executed.
6. The Image can be tested on the Target Device for verifying the Recipe addition.
