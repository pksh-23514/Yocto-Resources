Recipe Build for C File:
========================
1. This sample Recipe is used to Build a single C file and include it into the RootFS.
2. The C file must be written with the contents to Build.
3. The next step is to place this C file in a directory structure for the BitBake to pick it up during the Build.
	1) The BitBake finds the Recipes using the 'BBFILES' variable in the 'conf/layer.conf' file of the corresponding Layer.
		=> BBFILES += "${LAYERDIR}/recipes-*/*/*.bb \
		               ${LAYERDIR}/recipes-*/*/*.bbappend"
	2) Consequently, the Recipe file must be placed at this path in the Layer such that it can be located by the Build system.
4. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
	2) The C file and the particular Recipe file to Build this C file shall be placed in this 'recipes-*' directory.
6. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
	=> meta/recipes-core/busybox ---> busybox_1.37.0.bb
	---> The name of 'busybox_1.37.0.bb' without the versions or revisions or any other suffixes is 'busybox'.
7. There should be a sub-directory created inside the Recipe folder named as 'files' to contain the C file for the Build.
8. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
9. The Build Meta-data must be filled in the Recipe file:
	1) The path to the sources.
	2) The Recipe file description.
	3) The Recipe file License information.
	4) The Tasks function to be executed by the BitBake.
10. Once the Recipe file is completed, the Build command can be executed for the Recipe.

Using install Utility in Recipe File:
*************************************
1. In the 'do_install' Task, the 'install' utility is the preferred way to copy the files into the holding area.
2. The reasons to use the 'install' utility are:
	1) It copies the files into the specified location.
	2) It changes the ownership and permissions for the specified files.
	3) It can optimally remove the Debug Symbols from the executables.
3. Therefore, it can be used to perform the same functions as the 'chmod', 'chown' and 'strip' commands.

Details of WORKDIR Variable:
****************************
1. The path of the work directory being used to Build a Recipe is specified by the 'WORKDIR' variable. It is located within the 'TMPDIR' directory.
2. It is specific to the Recipe being Built and the system for which the Recipe is getting Built.
3. The default value of the 'WORKDIR' variable is:
	=> ${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR}
	---> The 'TMPDIR' variable is used to specify the top-level Build Output directory.
	---> The 'MULTIMACH_TARGET_SYS' variable is used to specify the type of the Target system for which the Recipe is being Built.
	---> The 'PN' variable is used to specify the Package name. The name is normally extracted from the Recipe file name.
	---> The 'EXTENDPE' variable is used to specify the prefix for a Recipe's version based on the Epoch of the Recipe. In most cases, it is left blank.
	---> The 'PV' variable is used to specify the Recipe version. The value is normally extracted from the Recipe file name.
	---> The 'PR' variable is used to specify the Recipe revision. The default value is 'r0' and subsequent revisions are 'r1', 'r2' etc.
