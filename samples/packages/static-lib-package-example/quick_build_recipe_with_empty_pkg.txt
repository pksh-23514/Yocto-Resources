Quick Build of Recipe for ARM Architecture using the Build Directory:
=====================================================================

1. For building the Image for ARM Architecture instead of the Intel (x86) Architecture, the changes shall be made to the 'local.conf' file in the 'build/conf' directory.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ vi conf/local.conf
=> MACHINE ?= "qemuarm"
=> #MACHINE ?= "qemux86-64"

2. The Layer directory should be created for the the BitBake to pick it up during the Build. The 'bitbake-layers' command is used to create and add the compatible Layer.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake-layers create-layer ../meta-layer
NOTE: Starting bitbake server...
Add your new layer with 'bitbake-layers add-layer /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer'
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake-layers add-layer ../meta-layer
NOTE: Starting bitbake server...
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake-layers show-layers
NOTE: Starting bitbake server...
layer                 path                                      priority
==========================================================================
meta                  /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta   5
meta-poky             /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-poky  5
meta-yocto-bsp        /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-yocto-bsp  5
meta-layer            /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer  5

3. The Recipe file, the C files and the Header files must be placed in the Layer structure in such a way that the BitBake is able to pick them up during the Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ cd ../meta-layer/
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer$ ls
conf  COPYING.MIT  README  recipes-example
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer$ cd recipes-example/

---> It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ mkdir hello-static-lib
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ ls
example  hello-static-lib
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ cd hello-static-lib/
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-static-lib$ mkdir files
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-static-lib$ cd files/

4. Include the C files and the Header files in the 'files' directory of the Layer.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-static-lib/files$ vi maths.c
---> Add the contents of the C file to be Built using the Recipe.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-static-lib/files$ vi print.c
---> Add the contents of the C file to be Built using the Recipe.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-static-lib/files$ vi static_lib.h
---> Add the contents of the Header file to be Built using the Recipe.

5. Include the Recipe file in the Recipe folder i.e. 'hello-static-lib' for the BitBake to be able to read it during the Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-static-lib/files$ cd ..
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-static-lib$ vi hello-static-lib_0.1.bb
---> Add the contents of the Recipe file to Build the C files and include them into the static library.

6. This is the final Layer directory structure which is compatible with the BitBake for the Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-static-lib$ cd ..
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ tree hello-static-lib
hello-static-lib
├── files
│   ├── maths.c
│   ├── print.c
│   └── static_lib.h
└── hello-static-lib_0.1.bb

1 directory, 4 files

7. Modify the Recipe file in the Recipe folder i.e. 'hello-static-lib' for the BitBake to generate the empty Package for the dependency resolution in the Image Build.
---> Since, the '${PN}-staticdev' Package has a dependency on the '${PN}' Package, the main Package has to be generated by the BitBake.
---> The default behavior of the BitBake is to ignore the Package generation of the empty Packages. This behavior has to be overridden in the Recipe file.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ cd hello-static-lib/
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-static-lib$ vi hello-static-lib_0.1.bb
=> ...

=> ALLOW_EMPTY:${PN} = "1"

8. On the Host Machine, run the 'bitbake' command with Target as the Recipe name for a quick Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-static-lib$ cd ../../../build/
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake hello-static-lib
Loading cache: 100% |##############################################################################################################################################| Time: 0:00:00
Loaded 1778 entries from dependency cache.
Parsing recipes: 100% |############################################################################################################################################| Time: 0:00:03
Parsing of 987 .bb files complete (982 cached, 5 parsed). 1782 targets, 159 skipped, 0 masked, 0 errors.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = "2.0.0"
BUILD_SYS            = "x86_64-linux"
NATIVELSBSTRING      = "universal"
TARGET_SYS           = "arm-poky-linux-gnueabi"
MACHINE              = "qemuarm"
DISTRO               = "poky"
DISTRO_VERSION       = "4.0.27"
TUNE_FEATURES        = "arm vfp cortexa15 neon thumb callconvention-hard"
TARGET_FPU           = "hard"
meta
meta-poky
meta-yocto-bsp
meta-layer           = "my-kirkstone:81e0dc80d72d66b7f15a34c0da7a0a8c58809056"
meta-ti-bsp          = "kirkstone:52018a8d730b2977d7163bf56c398905ef9115ac"
meta-arm
meta-arm-toolchain   = "kirkstone:10c27f061b22af78e17a23cf540b69501afc7160"

Initialising tasks: 100% |#########################################################################################################################################| Time: 0:00:00
Sstate summary: Wanted 6 Local 0 Mirrors 0 Missed 6 Current 156 (0% match, 96% complete)
Removing 1 stale sstate objects for arch qemuarm: 100% |###########################################################################################################| Time: 0:00:00
Removing 5 stale sstate objects for arch cortexa15t2hf-neon: 100% |################################################################################################| Time: 0:00:00
NOTE: Executing Tasks
NOTE: Tasks Summary: Attempted 667 tasks of which 660 didn't need to be rerun and all succeeded.
NOTE: Writing buildhistory
NOTE: Writing buildhistory took: 3 seconds

9. After the Recipe Build is successful, the 'WORKDIR' directory contains all the files and directories generated during the Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ cd tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-static-lib/0.1-r0
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-static-lib/0.1-r0$ tree deploy-rpms
deploy-rpms
└── cortexa15t2hf_neon
    ├── hello-static-lib-0.1-r0.cortexa15t2hf_neon.rpm
    ├── hello-static-lib-dbg-0.1-r0.cortexa15t2hf_neon.rpm
    ├── hello-static-lib-dev-0.1-r0.cortexa15t2hf_neon.rpm
    └── hello-static-lib-staticdev-0.1-r0.cortexa15t2hf_neon.rpm

1 directory, 4 files

10. The empty '${PN}' Package is now generated in the Recipe Build as the default BitBake behavior is overridden by the 'ALLOW_EMPTY' parameter in the Recipe file.
	1) The 'packages-split' directory can be verified for the 'hello-static-lib' Package. It is still an empty Package.
	2) The 'deploy-rpms' directory can be verified for the generation of the 'hello-static-lib' Package.
