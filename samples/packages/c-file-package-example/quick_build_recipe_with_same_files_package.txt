Quick Build of Recipe for ARM Architecture with Same Files Mentioned in Two Packages:
=====================================================================================

1. For building the Image for ARM Architecture instead of the Intel (x86) Architecture, the changes shall be made to the 'local.conf' file in the 'build/conf' directory.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ vi conf/local.conf
=> MACHINE ?= "qemuarm"
=> #MACHINE ?= "qemux86-64"

2. The Layer directory should be created for the the BitBake to pick it up during the Build. The 'bitbake-layers' command is used to create and add the compatible Layer.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake-layers create-layer ../meta-layer
NOTE: Starting bitbake server...
Add your new layer with 'bitbake-layers add-layer /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer'
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake-layers add-layer ../meta-layer
NOTE: Starting bitbake server...
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake-layers show-layers
NOTE: Starting bitbake server...
layer                 path                                      priority
==========================================================================
meta                  /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta   5
meta-poky             /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-poky  5
meta-yocto-bsp        /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-yocto-bsp  5
meta-layer            /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer  5

3. The Recipe file and the source C file must be placed in the Layer structure in such a way that the BitBake is able to pick them up during the Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ cd ../meta-layer/
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer$ ls
conf  COPYING.MIT  README  recipes-example
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer$ cd recipes-example/

---> It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ mkdir hello-package
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ ls
example  hello-package
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ cd hello-package/
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package$ mkdir files
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package$ cd files/

4. Include the C file and the README file in the 'files' directory of the Layer.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package/files$ vi hello.c
---> Add the contents of the C file to be Built using the Recipe.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package/files$ vi README.txt
---> Add the contents of the README file to be Built using the Recipe.

5. Include the Recipe file in the Recipe folder i.e. 'hello-package' for the BitBake to be able to read it during the Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package/files$ cd ..
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package$ vi hello-package_0.1.bb
---> Add the contents of the Recipe file to Build the C file.

6. This is the final Layer directory structure which is compatible with the BitBake for the Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package$ cd ..
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ tree hello-package
hello-package
├── files
│   ├── hello.c
│   └── README.txt
└── hello-package_0.1.bb

1 directory, 3 files

7. Modify the Recipe file in the Recipe folder i.e. 'hello-package' to include the same file in '${PN}' and '${PN}-dbg' Packages produced by the BitBake.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ cd hello-package/
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package$ vi hello-package_0.1.bb
=> ...

=> FILES:${PN}-dbg += "${bindir}/hello"
=> FILES:${PN} += "${bindir}/hello"

8. On the Host Machine, run the 'bitbake' command with Target as the Recipe name for a quick Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake hello-package
Loading cache: 100% |##############################################################################################################################################| Time: 0:00:00
Loaded 1646 entries from dependency cache.
Parsing recipes: 100% |############################################################################################################################################| Time: 0:00:00
Parsing of 885 .bb files complete (876 cached, 9 parsed). 1646 targets, 63 skipped, 0 masked, 0 errors.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = "2.0.0"
BUILD_SYS            = "x86_64-linux"
NATIVELSBSTRING      = "universal"
TARGET_SYS           = "arm-poky-linux-gnueabi"
MACHINE              = "qemuarm"
DISTRO               = "poky"
DISTRO_VERSION       = "4.0.30"
TUNE_FEATURES        = "arm vfp cortexa15 neon thumb callconvention-hard"
TARGET_FPU           = "hard"
meta
meta-poky
meta-yocto-bsp
meta-layer           = "my-kirkstone:7f12221f49c32ba320ee175a3f47eb8005db574c"

Initialising tasks: 100% |#########################################################################################################################################| Time: 0:00:00
Sstate summary: Wanted 5 Local 0 Mirrors 0 Missed 5 Current 149 (0% match, 96% complete)
Removing 4 stale sstate objects for arch cortexa15t2hf-neon: 100% |################################################################################################| Time: 0:00:00
Removing 1 stale sstate objects for arch qemuarm: 100% |###########################################################################################################| Time: 0:00:00
NOTE: Executing Tasks
NOTE: Tasks Summary: Attempted 638 tasks of which 632 didn't need to be rerun and all succeeded.
NOTE: Writing buildhistory
NOTE: Writing buildhistory took: 1 seconds

9. After the Recipe Build is successful, the 'WORKDIR' directory contains all the files and directories generated during the Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ cd tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-package/0.1-r0
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-package/0.1-r0$ tree packages-split
packages-split
├── hello-package
├── hello-package-dbg
│   └── usr
│       └── bin
│           └── hello
├── hello-package-dbg.shlibdeps
├── hello-package-dev
│   └── usr
│       └── include
│           └── README.txt
├── hello-package-doc
├── hello-package-locale
├── hello-package-src
└── hello-package-staticdev

11 directories, 3 files
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-package/0.1-r0$ tree deploy-rpms
deploy-rpms
└── cortexa15t2hf_neon
    ├── hello-package-dbg-0.1-r0.cortexa15t2hf_neon.rpm
    └── hello-package-dev-0.1-r0.cortexa15t2hf_neon.rpm

1 directory, 2 files

10. The Recipe Build Environment can be used to fetch 'PACKAGES' variable related to the Recipe using the 'bitbake -e' command.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-package | grep ^PACKAGES=
PACKAGES="hello-package-src hello-package-dbg hello-package-staticdev hello-package-dev hello-package-doc hello-package-locale  hello-package"

11. After analysing the 'packages-split' directory, it is observed that:
	1) The 'hello' binary file is packaged under the 'hello-package-dbg' directory.
	2) Although, the 'hello' binary is mentioned in the 'FILES' variable for the 'hello-package' and the 'hello-package-dbg' Packages, it is put under one Package only.
	3) The reason for such observation is that the 'hello-package-dbg' is mentioned earlier than the 'hello-package' in the 'PACKAGES' variable.
	4) If a file matches in the 'FILES' variable for more than one Package in the 'PACKAGES' variable, it is assigned to the earliest (leftmost) Package in the list.
	5) For each file installed by the Recipe, the first Package whose 'FILES' variable has the value matching the file is the one in which it is packaged.
