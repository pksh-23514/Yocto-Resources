Quick Build of Recipe for ARM Architecture with File Installed at Other Location:
=================================================================================

1. For building the Image for ARM Architecture instead of the Intel (x86) Architecture, the changes shall be made to the 'local.conf' file in the 'build/conf' directory.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ vi conf/local.conf
=> MACHINE ?= "qemuarm"
=> #MACHINE ?= "qemux86-64"

2. The Layer directory should be created for the the BitBake to pick it up during the Build. The 'bitbake-layers' command is used to create and add the compatible Layer.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake-layers create-layer ../meta-layer
NOTE: Starting bitbake server...
Add your new layer with 'bitbake-layers add-layer /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer'
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake-layers add-layer ../meta-layer
NOTE: Starting bitbake server...
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake-layers show-layers
NOTE: Starting bitbake server...
layer                 path                                      priority
==========================================================================
meta                  /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta   5
meta-poky             /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-poky  5
meta-yocto-bsp        /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-yocto-bsp  5
meta-layer            /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer  5

3. The Recipe file and the source C file must be placed in the Layer structure in such a way that the BitBake is able to pick them up during the Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ cd ../meta-layer/
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer$ ls
conf  COPYING.MIT  README  recipes-example
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer$ cd recipes-example/

---> It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ mkdir hello-package
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ ls
example  hello-package
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ cd hello-package/
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package$ mkdir files
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package$ cd files/

4. Include the C file and the README file in the 'files' directory of the Layer.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package/files$ vi hello.c
---> Add the contents of the C file to be Built using the Recipe.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package/files$ vi README.txt
---> Add the contents of the README file to be Built using the Recipe.

5. Include the Recipe file in the Recipe folder i.e. 'hello-package' for the BitBake to be able to read it during the Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package/files$ cd ..
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package$ vi hello-package_0.1.bb
---> Add the contents of the Recipe file to Build the C file.

6. This is the final Layer directory structure which is compatible with the BitBake for the Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package$ cd ..
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ tree hello-package
hello-package
├── files
│   ├── hello.c
│   └── README.txt
└── hello-package_0.1.bb

1 directory, 3 files

7. Modify the Recipe file in the Recipe folder i.e. 'hello-package' for the BitBake to install the README file to some other location.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example$ cd hello-package/
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package$ vi hello-package_0.1.bb
=> ...
=> do_install() {
=>     install -d ${D}${bindir}
=>     install -m 0755 hello ${D}${bindir}
=>     install -d ${D}${includedir}
=>     install -m 0444 README.txt ${D}${includedir}
=> }

8. On the Host Machine, run the 'bitbake' command with Target Image as 'core-image-minimal' for a quick Build. This will Build the Recipe again after modifications.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/meta-layer/recipes-example/hello-package$ cd ../../../build/
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake core-image-minimal
Loading cache: 100% |##############################################################################################################################################| Time: 0:00:00
Loaded 1646 entries from dependency cache.
Parsing recipes: 100% |############################################################################################################################################| Time: 0:00:00
Parsing of 885 .bb files complete (884 cached, 1 parsed). 1646 targets, 63 skipped, 0 masked, 0 errors.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = "2.0.0"
BUILD_SYS            = "x86_64-linux"
NATIVELSBSTRING      = "universal"
TARGET_SYS           = "arm-poky-linux-gnueabi"
MACHINE              = "qemuarm"
DISTRO               = "poky"
DISTRO_VERSION       = "4.0.30"
TUNE_FEATURES        = "arm vfp cortexa15 neon thumb callconvention-hard"
TARGET_FPU           = "hard"
meta
meta-poky
meta-yocto-bsp
meta-layer           = "my-kirkstone:7f12221f49c32ba320ee175a3f47eb8005db574c"

Initialising tasks: 100% |#########################################################################################################################################| Time: 0:00:02
Sstate summary: Wanted 6 Local 0 Mirrors 0 Missed 6 Current 1391 (0% match, 99% complete)
Removing 3 stale sstate objects for arch qemuarm: 100% |###########################################################################################################| Time: 0:00:00
Removing 3 stale sstate objects for arch cortexa15t2hf-neon: 100% |################################################################################################| Time: 0:00:00
NOTE: Executing Tasks
ERROR: core-image-minimal-1.0-r0 do_rootfs: Could not invoke dnf. Command '/home/.../build/tmp/work/.../core-image-minimal/1.0-r0/recipe-sysroot-native/usr/bin/dnf -v ...
DNF version: 4.11.1
cachedir: /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/qemuarm-poky-linux-gnueabi/core-image-minimal/1.0-r0/rootfs/var/cache/dnf
Added oe-repo repo from /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/qemuarm-poky-linux-gnueabi/core-image-minimal/1.0-r0/oe-rootfs-repo
User-Agent: falling back to 'libdnf': could not detect OS or basearch
repo: using cache for: oe-repo
oe-repo: using metadata from Sun 05 Oct 2025 05:21:08 PM UTC.
Last metadata expiration check: 0:00:01 ago on Sun 05 Oct 2025 05:21:08 PM UTC.
No match for argument: hello-package-doc
Error: Unable to find a match: hello-package-doc

ERROR: Logfile of failure stored in: /home/prabhat_kiran/.../Poky/poky/build/tmp/work/qemuarm-poky-linux-gnueabi/core-image-minimal/1.0-r0/temp/log.do_rootfs.2547891
ERROR: Task (/home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta/recipes-core/images/core-image-minimal.bb:do_rootfs) failed with exit code '1'
NOTE: Tasks Summary: Attempted 3586 tasks of which 3580 didn't need to be rerun and 1 failed.
NOTE: Writing buildhistory
NOTE: Writing buildhistory took: 1 seconds

Summary: 1 task failed:
  /home/prabhat_kiran/Documents/Learnings/Yocto_Resources/Poky/poky/meta/recipes-core/images/core-image-minimal.bb:do_rootfs
Summary: There was 1 ERROR message, returning a non-zero exit code.

9. Although, the Image Build failed, the Recipe Build was successful, the 'WORKDIR' directory can be checked for all the files and directories generated during the Recipe Build.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ cd tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-package/0.1-r0
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-package/0.1-r0$ ls
configure.sstate   deploy-source-date-epoch  hello-package.spec  package         pkgdata              pseudo          recipe-sysroot-native                    sysroot-destdir
debugsources.list  hello                     image               packages-split  pkgdata-pdata-input  README.txt      source-date-epoch                        temp
deploy-rpms        hello.c                   license-destdir     patches         pkgdata-sysroot      recipe-sysroot  sstate-install-deploy_source_date_epoch
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-package/0.1-r0$ tree packages-split
packages-split
├── hello-package
│   └── usr
│       └── bin
│           └── hello
├── hello-package-dbg
│   └── usr
│       └── bin
├── hello-package-dev
│   └── usr
│       └── include
│           └── README.txt
├── hello-package-doc
├── hello-package-locale
├── hello-package.shlibdeps
├── hello-package-src
└── hello-package-staticdev

13 directories, 3 files
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-package/0.1-r0$ tree deploy-rpms
deploy-rpms
└── cortexa15t2hf_neon
    ├── hello-package-0.1-r0.cortexa15t2hf_neon.rpm
    ├── hello-package-dbg-0.1-r0.cortexa15t2hf_neon.rpm
    └── hello-package-dev-0.1-r0.cortexa15t2hf_neon.rpm

1 directory, 3 files

10. The Packages in the 'deploy-rpms' directory are created based on the files installed by the Recipe in the 'do_install' Task.
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build/tmp/work/cortexa15t2hf-neon-poky-linux-gnueabi/hello-package/0.1-r0$ cd ../../../../../
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-package | grep ^FILES:hello-package=
FILES:hello-package="/usr/bin/* /usr/sbin/* /usr/libexec/* /usr/lib/lib*.so.* /usr/share/hello-package /usr/lib/hello-package* ..."
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-package | grep ^FILES:hello-package-dbg=
FILES:hello-package-dbg="/usr/lib/debug /usr/lib/debug-static /usr/src/debug"
prabhat_kiran@coldstone:~/Documents/Learnings/Yocto_Resources/Poky/poky/build$ bitbake -e hello-package | grep ^FILES:hello-package-dev=
FILES:hello-package-dev="/usr/include /lib/lib*.so /usr/lib/lib*.so /usr/lib/*.la /usr/lib/*.o /usr/lib/hello-package/*.la /lib/*.la /usr/lib/cmake /usr/share/cmake"
