Recipe Build for C File:
========================
1. This sample Recipe is used to Build a single C file and include it into the RootFS.
2. The C file must be written with the contents to Build.
3. The next step is to place this C file in a directory structure for the BitBake to pick it up during the Build.
	1) The BitBake finds the Recipes using the 'BBFILES' variable in the 'conf/layer.conf' file of the corresponding Layer.
		=> BBFILES += "${LAYERDIR}/recipes-*/*/*.bb \
		               ${LAYERDIR}/recipes-*/*/*.bbappend"
	2) Consequently, the Recipe file must be placed at this path in the Layer such that it can be located by the Build system.
4. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
	2) The C file and the particular Recipe file to Build this C file shall be placed in this 'recipes-*' directory.
5. In the Build directory, the 'conf/bblayers.conf' file can be verified if the Layer is added to the 'BBLAYERS' variable. Otherwise, it would be excluded from the Build.
6. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
	=> meta/recipes-core/busybox ---> busybox_1.37.0.bb
	---> The name of 'busybox_1.37.0.bb' without the versions or revisions or any other suffixes is 'busybox'.
7. There should be a sub-directory created inside the Recipe folder named as 'files' to contain the C file and the README file for the Build.
8. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
9. The Recipe file must be modified for the Build to exclude the README file installation.
10. Once the Recipe file is completed, the Build command can be executed for the Recipe.
11. The Recipe Build Environment can be used to fetch the 'FILES' and the 'PACKAGES' variables related to the Recipe using the 'bitbake -e' command..
	1) The Recipe file is not defining 'FILES' and 'PACKAGES' variables. Therefore, the default values are being used by the BitBake.
	2) The default value of the 'FILES' variable is empty.
	3) The 'FILES' variable for individual Packages have the path values from where the files have to be fetched during the Packaging process.
	4) The default value of the 'PACKAGES' variable contains all the essential Packages being defined by the BitBake.
12. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) The 'packages-split' directory contains the Packages being created and the files packaged into each of the individual Package.
	2) The directories 'deploy-debs', 'deploy-ipks' and 'deploy-rpms' contain the Packages produced by the BitBake in the respective Package format.
	3) The Packages are created based on the files installed by the Recipe in the 'do_install' Task.
	4) The BitBake uses the 'PACKAGES' variable and the 'FILES' variable corresponding to each Package in the 'PACKAGES' variable during the Packaging process.
	5) By default, the Packages in the 'PACKAGES' variable with no matching file in their respective 'FILES' variable are not generated by the BitBake.
13. The Recipe Build Environment can be used to verify the paths from where the files are being fetched for the Packages created by the BitBake using the 'bitbake -e' command.

Recipe Build for All Files Installed by Recipe:
===============================================
1. This sample Recipe is used to Build a single C file and include it into the RootFS.
2. The C file must be written with the contents to Build.
3. The next step is to place this C file in a directory structure for the BitBake to pick it up during the Build.
	1) The BitBake finds the Recipes using the 'BBFILES' variable in the 'conf/layer.conf' file of the corresponding Layer.
		=> BBFILES += "${LAYERDIR}/recipes-*/*/*.bb \
		               ${LAYERDIR}/recipes-*/*/*.bbappend"
	2) Consequently, the Recipe file must be placed at this path in the Layer such that it can be located by the Build system.
4. The Layer can be created and added to the Build system using the 'bitbake-layers' command.
	1) Inside the Layer directory, there is a 'recipes-*' directory that shall contain the Recipes.
	2) The C file and the particular Recipe file to Build this C file shall be placed in this 'recipes-*' directory.
5. In the Build directory, the 'conf/bblayers.conf' file can be verified if the Layer is added to the 'BBLAYERS' variable. Otherwise, it would be excluded from the Build.
6. It is important to note that the name of the Recipe folder must match with the name of the Recipe file name being used to Build the SW.
	=> meta/recipes-core/busybox ---> busybox_1.37.0.bb
	---> The name of 'busybox_1.37.0.bb' without the versions or revisions or any other suffixes is 'busybox'.
7. There should be a sub-directory created inside the Recipe folder named as 'files' to contain the C file and the README file for the Build.
8. The Recipe file must be created inside the Recipe folder as per the path pointed to by the 'BBFILES' variable.
9. Once the Recipe file is completed, the Build command can be executed for the Recipe.
10. After the Build is successful, the 'WORKDIR' directory can be checked for the files and directories generated during the Build.
	1) The 'packages-split' directory contains the Packages being created and the files packaged into each of the individual Package.
	2) The directories 'deploy-debs', 'deploy-ipks' and 'deploy-rpms' contain the Packages produced by the BitBake in the respective Package format.
	3) The Packages are created based on the files installed by the Recipe in the 'do_install' Task.
	4) The BitBake uses the 'PACKAGES' variable and the 'FILES' variable corresponding to each Package in the 'PACKAGES' variable during the Packaging process.
	5) By default, the Packages in the 'PACKAGES' variable with no matching file in their respective 'FILES' variable are not generated by the BitBake.
	6) The number of Packages created have increased in number as the number of files installed are more in this Build as compared to the earlier Build.
11. The Recipe Build Environment can be used to verify the paths from where the files are being fetched for the Packages created by the BitBake using the 'bitbake -e' command.
